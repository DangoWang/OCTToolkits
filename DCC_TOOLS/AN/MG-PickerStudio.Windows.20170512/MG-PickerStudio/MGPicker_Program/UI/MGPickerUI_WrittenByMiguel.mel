//==============================================================//
//                   MGPicker 
//==============================================================//
//Author: Miguel (Wenfeng Gao) 
//website: http://mgland.com
//Feedback/E-mail: mgtoolspro@gmail.com 
//CopyRight Miguel @ mgland animation studio.

//============== global utils for c++ =========================

proc mgp_guardSourceBehavior()
{
	if(!`exists "MGPicker_GPS"`)
	{
		error "You need to source \"MGPicker_WrittenByMiguel.mel\" first.";
	}
}

mgp_guardSourceBehavior;

proc int mgp_wasDocking()
{
    int $docking = 0;
    global string $MGPicker_Config_Docking;
    if(`optionVar -ex $MGPicker_Config_Docking`)
    {
        $docking = `optionVar -q $MGPicker_Config_Docking`;
    }
    return $docking;
}
proc int mgp_getMayaVersionNumForPlugin ()
{
    int $v=`about -api`;
  int $mainV = $v / 100.0;
  return $mainV;
    /*
    string $v=`about -v`;
    string $temp [];clear $temp;
    tokenizeList($v,$temp);
    string $temp1[];clear $temp1;
    tokenize $temp[0] "." $temp1; 
   
    int $ver=$temp1[0]; 
    print "\n";  
    return $ver;*/
} 
proc string mgp_getMayaVersionStringForPlugin ()
{
    int $v=`about -api`;
    int $mainV = $v / 100.0;
    if ($mainV == 2016)
    {
        if($v >= 201650)
        {
            return "2016ex2";
        }
    }
    string $result = $mainV;
    return $result;
} 
proc int mgp_isMaya2017OrLater()
{
    return `exists "workspaceControl"`;
}
proc initGlobalVar()
{
  global int $MGPKR_OStype;

  global string $MGPicker_ToggleMinimizedRunTimeCommandName;
  $MGPicker_ToggleMinimizedRunTimeCommandName = "ToggleMGPickerMinimize";
  //global string $MGPicker_RestoreButton;
  //$MGPicker_RestoreButton = "MGPicker_restoreBtn";
  
  global string $MGPicker_PreviewModeBtn;
  $MGPicker_PreviewModeBtn = "MGP_PreviewModeBtn";
  
  global string $MGPicker_AppName;
  $MGPicker_AppName = "MG-PickerStudio";
  
  global string $MGPicker_AutoSourceFolder;
  $MGPicker_AutoSourceFolder = "AutoSourced";
  
  global string $MGPicker_AutoLoaderFolder;
  $MGPicker_AutoLoaderFolder = "AutoLoaders";
  
  global int $MGPicker_minimumWidth;
  $MGPicker_minimumWidth = 145;
  //config global vars:  
  global string $MGPicker_Config_LanID;
  //global string $MGPicker_Config_AllowOtherF7HotkeyID;
  //global string $MGPicker_Config_minimizeToggleID; 
  global string $MGPicker_Config_ShapeAntialiasingID;
  //global string $MGPicker_Config_TextAntialiasingID;
  global string $MGPicker_Config_ScrollBarVisibleID;
  
  global string $MGPicker_Config_AutoloadScenePkrID;
  global string $MGPicker_Config_AutoClosePkrID;
  global string $MGPicker_Config_LinkOpacityID;
  global string $MGPicker_Config_PanelSpacingID;
  global string $MGPicker_Config_SelBtnSizeID;
  global string $MGPicker_Config_DefaultPanelSizeID;
  global string $MGPicker_Config_DefaultPanelLayoutID;
  global string $MGPicker_Config_DisplayWhenAttrNudgingID;
  global string $MGPicker_Config_CrossLineColID;
  global string $MGPicker_Config_WarnSaveIssueID;  
  global string $MGPicker_Config_SearchingOrderID;
  global string $MGPicker_Config_FallbackPickerID;
  global string $MGPicker_Config_GenericPickerID;
  global string $MGPicker_Config_PanelPresetID;
  
  global string $MGPicker_Config_PoseButtonImageSizeID;
  global string $MGPicker_Config_PoseButtonImageMarginID;
  
  global string $MGPicker_Config_ShowMenuIndicator;
  global string $MGPicker_Config_StayOnTop;
  global string $MGPicker_Config_RenameTablabel;
  global string $MGPicker_Config_FilterAttrButton;
  
  global string $MGPicker_Config_UiMode;

  global string $MGPicker_Config_Docking;
  global string $MGPicker_Config_DockArea;
  
  $MGPicker_Config_LanID = "language";
  //$MGPicker_Config_AllowOtherF7HotkeyID = "MGPicker_allowOtherF7Hotkey";
  //$MGPicker_Config_minimizeToggleID = "minimizeToggleHotkey";
  $MGPicker_Config_ScrollBarVisibleID = "scrollBarVisible";
  $MGPicker_Config_ShapeAntialiasingID = "shapeAntialiasing";
  //$MGPicker_Config_TextAntialiasingID = "textAntialiasing";
  $MGPicker_Config_AutoloadScenePkrID = "autoloadScenePicker";
  $MGPicker_Config_AutoClosePkrID = "autoCloseUnrelatedPicker";
  $MGPicker_Config_LinkOpacityID = "linkPreviewOpacity";
  $MGPicker_Config_PanelSpacingID = "panelSpacing";
  $MGPicker_Config_DefaultPanelLayoutID = "panelDefaultLayout";
  $MGPicker_Config_SelBtnSizeID = "selButtonMultipleCreationSize";
  $MGPicker_Config_DefaultPanelSizeID = "panelDefaultSize";
  $MGPicker_Config_PanelPresetID = "panelNamePresets";
  $MGPicker_Config_DisplayWhenAttrNudgingID = "reportWhenAttrNudging";
  $MGPicker_Config_CrossLineColID = "crossLineColor";
  $MGPicker_Config_WarnSaveIssueID = "warnSaveIssueWhenSwitchToAnimatorMode";
  $MGPicker_Config_SearchingOrderID = "pickerSearchingOrder";
  $MGPicker_Config_FallbackPickerID = "searchFallbackPicker";
  $MGPicker_Config_GenericPickerID = "genericPickerFiles";
  
  $MGPicker_Config_PoseButtonImageSizeID = "poseImageSize";
  $MGPicker_Config_PoseButtonImageMarginID = "poseImageMargin";  
  
  $MGPicker_Config_ShowMenuIndicator = "showMenuIndicator";
  $MGPicker_Config_StayOnTop = "stayOnTop";  
  $MGPicker_Config_RenameTablabel = "renameTabLabel";  
  $MGPicker_Config_FilterAttrButton = "filterAttrButton";
  
  $MGPicker_Config_UiMode = "MGPicker_UiMode";
  
  $MGPicker_Config_Docking = "MGPicker_Config_Docking";
  $MGPicker_Config_DockArea = "MGPicker_Config_DockArea";
  
  global string $MGPicker_FolderName;
  $MGPicker_FolderName = "MG-PickerStudio"; 
  
  global string $MGPicker_3DModelPanel;
  $MGPicker_3DModelPanel = "MGPicker_3DModelPanel";
  
  global string $MGPicker_3DModelPanelImagePlane;
  $MGPicker_3DModelPanelImagePlane = "MGPicker_3DModelPanel_ImagePlane";
  
  global string $MGPicker_3DModelPanelLayout;
  $MGPicker_3DModelPanelLayout = "MGPicker_3DModelPanelLayout";
  
  //global string $MGPicker_3DModelEditorName;
  //$MGPicker_3DModelEditorName = "MGPicker_3DModelEditor";
  
  global string $MGPicker_3DModelView_FormLay;
  $MGPicker_3DModelView_FormLay = "MGPicker_3DModelEditorFormLayout";
  
  global string $MGPicker_3DModelView_styleOM;
  $MGPicker_3DModelView_styleOM = "MGPicker_3DModelView_styleOM";
  
  global string $MGPicker_AttributePanel_ChannelBoxName;    
  $MGPicker_AttributePanel_ChannelBoxName = "MGPicker_AttrPanel_ChannelBox";
  
  global string $MGPicker_3DPanelCamera_OV;
  $MGPicker_3DPanelCamera_OV = "MGPicker_3DModelPanel_Camera";
  
  
  global int $MGPicker_LastRenderResolution[];
  clear $MGPicker_LastRenderResolution;
  
  global string $MGPicker_ControlName;
  $MGPicker_ControlName = "MG_PickerCtl"; 
  global string $MGPicker_WindowName;
  $MGPicker_WindowName = "MG_PickerWindow"; 
  global string $MGPicker_DockControlName;
  $MGPicker_DockControlName = "MG_PickerDockControl"; 
  global string $MGPicker_FrameFormLayout;
  $MGPicker_FrameFormLayout = "MGPicker_FrameFormLayout"; 
  
  global string $MGPicker_SceneDataSuffix;
  $MGPicker_SceneDataSuffix = "_MGPIKR"; 
  
  global string $MGPicker_pickerFileExtension;
  $MGPicker_pickerFileExtension = ".mgpkr"; 
  
  global string $MGPicker_SceneDataNodeType;
  $MGPicker_SceneDataNodeType = "subdivSurfaceVarGroup"; 
  
  global string $MGPicker_SceneData_PickerFilePathAttr;
  $MGPicker_SceneData_PickerFilePathAttr = "pickerFilePath"; 
  
  global string $MGPicker_SceneData_NameAttr;
  $MGPicker_SceneData_NameAttr = "pickerName";
  global string $MGPicker_SceneData_NsAttr;
  $MGPicker_SceneData_NsAttr  = "namespace";
  global string $MGPicker_SceneData_DataAttr;
  $MGPicker_SceneData_DataAttr = "data";
  
  //global string $MGPicker_NamespaceControl_MenuName;
  //$MGPicker_NamespaceControl_MenuName = "MGPicker_NamespaceMenu";
  
  global string $MGPicker_NamespaceControl_MenuName;
  $MGPicker_NamespaceControl_MenuName = "MGPicker_NamespaceMenu";
  
  global string $MGPicker_DefaultProjName;
  $MGPicker_DefaultProjName = "Default";
  
  //global string $MGPicker_CurrentProjec_OVName;
  //$MGPicker_CurrentProjec_OVName = "MGPicker_CurrentProject_OptionVarName";   
  
  global string $MGPicker_lastWindowTitle;
  
  global string $MGPicker_SimpleEdit_FillColor_Btn;
  $MGPicker_SimpleEdit_FillColor_Btn = "MGPicker_SimpleEdit_FillColor_Btn";
  
  global string $MGPicker_SimpleEdit_LabelColor_Btn;
  $MGPicker_SimpleEdit_LabelColor_Btn = "MGPicker_SimpleEdit_LabelColor_Btn";
  
  global string $MGPicker_AllConverters[];
  clear  $MGPicker_AllConverters;
  
  global string $MGPicker_WithScene_Folder;
  $MGPicker_WithScene_Folder = "pickers";
  
  
  global string $MGPicker_InScene_DummyName;
  $MGPicker_InScene_DummyName = "*[In-Scene]";
  global string $MGPicker_WithScene_DummyName;
  $MGPicker_WithScene_DummyName = ("*[Scene/"+$MGPicker_WithScene_Folder+"]");
  global string $MGPicker_Local_DummyName;
  $MGPicker_Local_DummyName = "*[Local]";
  
  
  global string $MGPicker_AttributeNudger_Context;
  $MGPicker_AttributeNudger_Context = "attrNudgerToolContext1";
  
  global string $MGPicker_AttributeNudger_Command;
  $MGPicker_AttributeNudger_Command =  "MGPickerAttrNudger";
  
  
  //$MGPicker_ProgramPath = (`internalVar -usd`+$MGPicker_FolderName+"/");
  
  
    global int $gMGPicker_MayaVerInt;
    $gMGPicker_MayaVerInt = `mgp_getMayaVersionNumForPlugin`;
    
    
    global string $gMGPicker_ShelfLabel_anim;
    global string $gMGPicker_ShelfLabel_designer;
    $gMGPicker_ShelfLabel_anim = "MGPickerStudio_AnimatorMode"; 
    $gMGPicker_ShelfLabel_designer = "MGPickerStudio_DesignerMode";
    
  
    global string $MGPicker_ServerConfigFolder;
    $MGPicker_ServerConfigFolder = "ServerConfig";
    
    global string $MGPicker_DefaultUserConfigFolder;
    $MGPicker_DefaultUserConfigFolder = "MGPicker_UserConfig";
    
    
    global string $MGPicker_UserConfigDefinitionFile;
    $MGPicker_UserConfigDefinitionFile = "UserConfig_Position.txt";
    
    global string $MGPicker_UserConfig_Position_Key;
    $MGPicker_UserConfig_Position_Key = "MGPICKER_USER_CONFIG_DIR";
    
    global string $MGPicker_UserConfig_Position_Value_UserApp;
    $MGPicker_UserConfig_Position_Value_UserApp = "$UserAppDir";
    global string $MGPicker_UserConfig_Position_Value_UserApp_1;
    $MGPicker_UserConfig_Position_Value_UserApp = "${UserAppDir}";
    
    global string $MGPicker_UserConfig_Position_UserApp_Folder;
    $MGPicker_UserConfig_Position_UserApp_Folder = "MG_PickerUserConfig";
    
    global string $MGPicker_UserConfig_Position_Value_UserScript;
    $MGPicker_UserConfig_Position_Value_UserScript = "$UserScriptDir";
    global string $MGPicker_UserConfig_Position_Value_UserScript_1;
    $MGPicker_UserConfig_Position_Value_UserScript = "${UserScriptDir}";
    
    global string $MGPIcker_AutoloadingCleaned_Maya2017;
    $MGPIcker_AutoloadingCleaned_Maya2017 =  "MG_Picker_Maya2017_AutoloadCleaned";
    

    global int $MGPicker_AvoidSourceAgain;
}
initGlobalVar;

global proc int MGP_GetMayaVersionInt()
{
    global int $gMGPicker_MayaVerInt;
    return $gMGPicker_MayaVerInt;
}
global proc MGP_ScriptEditorFeedback(string $msg, int $type)
//$type 0: normal msg
//$type 1: warning 
//$type 2: error
{
    global string $MGPicker_AppName;
    $msg = ("["+$MGPicker_AppName+"] "+$msg);
    if(!`endsWith $msg "\n"`)
    {
        $msg += "\n";
    }
    if(!$type)
    {
        print $msg ;
    }
    else if($type == 1)
    {
        warning $msg;
    }
    else 
    {
        error $msg;
    }
}

global proc string MGP_GetDirInProgramfiles(string $subDir)
{
    global string $MGPicker_ProgramPath;  
    global string $MGPicker_ProgramFolder;
    string $path = ($MGPicker_ProgramPath+$MGPicker_ProgramFolder+"/"+ $subDir);    
    return $path;
}

proc string getMayaBinFolder()
{
    string $dir = `getenv "MAYA_LOCATION"`;
    return ($dir + "/bin");
}

global proc string MGP_GetAutoLoaderDir()
{
    global string $MGPicker_AutoLoaderFolder;
    return `MGP_GetDirInProgramfiles $MGPicker_AutoLoaderFolder`;
}
proc copyNetworkDllForWindowsIn2011()
{
    global int $MGPKR_OStype;
    if($MGPKR_OStype)
    {
        return;
    }
    int $v=`about -api`;
    int $mainV = $v / 100.0;
    if($mainV > 2011)
    {
        return;
    }
    
    string $sourceDll = `MGP_GetDirInProgramfiles "Misc/Maya2011_issue/"`;
    string $x86_x64 = "x64";
    if(!`about -is64`)
    {
      $x86_x64 = "x86";
    }    
    string $slashDll = "/QtNetwork4.dll";
    $sourceDll += ($x86_x64 + $slashDll);
    
    string $targetDll = `getMayaBinFolder` + $slashDll;
    if(!`filetest -f $targetDll`)
    {
        sysFile -cp $targetDll $sourceDll;    
    }
    //print $dllFile;
}

proc string mgp_getDefaultLoaderMelPath()
{ 
  string $loaderMel = `MGP_GetDirInProgramfiles "MGPicker_WrittenByMiguel.mel"`;
  return $loaderMel;
}

global proc string MGP_GetHotkeyMGPKR()
{
    string $mgpkrDir = `MGP_GetDirInProgramfiles "HotkeySets/"`;
    string $files[]=`getFileList -fld $mgpkrDir -fs "*.mgpkr"`;
    return ($mgpkrDir + $files[0]);
}
proc string mgp_icon(string $iconName)
{
    global string $MGPicker_ProgramPath;
    global int $MGPKR_OStype;
    
    string $path = (`MGP_GetDirInProgramfiles "Icons/"`+ $iconName);
    
    if(!$MGPKR_OStype)
    {
        $path = `substituteAllString $path "/" "\\"`;
    }
    if(`filetest -f $path`)
    {
        return $path;
    }
    $path = (`MGP_GetDirInProgramfiles "Icons/Colored/"`+ $iconName);
    if(!$MGPKR_OStype)
    {
        $path = `substituteAllString $path "/" "\\"`;
    }
    return $path;
    /*
    //if it is maya for mac and the version is older than 2011:
    int $iconOption = 0;
    if(`optionVar -ex MGTools_UseMonoIcons`)
    {
        $iconOption = `optionVar -q MGTools_UseMonoIcons`;      
    }
    if(!$iconOption)
    {
        $path = (`MGP_GetDirInProgramfiles "Icons/Colored/"`+ $iconName);
        if(!$MGPKR_OStype)
        {
            $path = `substituteAllString $path "/" "\\"`;
        }
        if(`filetest -f $path`)
        {
            return $path;
        }
        else
        {
            $iconOption = 1;
        }
    }
    if($iconOption)
    {
        $path = (`MGP_GetDirInProgramfiles "Icons/Mono/"`+ $iconName);
        if(!$MGPKR_OStype)
        {
            $path = `substituteAllString $path "/" "\\"`;
        }
    }
    return $path;*/
}

proc mgp_initSearchingOrder()
{   
  global string $MGPicker_SearchOrder[];
  clear $MGPicker_SearchOrder;
  global string $MGPicker_Config_SearchingOrderID;
    string $config = `MGPicker -q -config $MGPicker_Config_SearchingOrderID ""`; 
    $MGPicker_SearchOrder = `stringToStringArray $config "|"`;
}

proc string[] mgp_getSearchingOrder()
{
    mgp_initSearchingOrder;
    global string $MGPicker_SearchOrder[];
    
  global string $MGPicker_InScene_DummyName;
  global string $MGPicker_Local_DummyName;
  global string $MGPicker_WithScene_DummyName;
  
  int $hasInScene = `stringArrayContains $MGPicker_InScene_DummyName $MGPicker_SearchOrder`;
  int $hasWithScene = `stringArrayContains $MGPicker_WithScene_DummyName $MGPicker_SearchOrder`;
  int $hasLocal = `stringArrayContains $MGPicker_Local_DummyName $MGPicker_SearchOrder`;
  if(!$hasInScene)
  {
    stringArrayInsertAtIndex(0,$MGPicker_SearchOrder,$MGPicker_InScene_DummyName);
  }
  if(!$hasWithScene)
  {
    stringArrayInsertAtIndex(1,$MGPicker_SearchOrder,$MGPicker_WithScene_DummyName);
  }
  if(!$hasLocal)
  {
    stringArrayInsertAtIndex(2,$MGPicker_SearchOrder,$MGPicker_Local_DummyName);
  }
  return $MGPicker_SearchOrder;
}
global proc string MGP_MultiLanguage(string $id)
{
    if(!`exists MGPickerService`)
    {
        return $id;
    }
    return `MGPickerService -tr $id`;
}
global proc string MGP_MultiLanguage_rep1(string $id,string $rep1)
{
    if(!`exists MGPickerService`)
    {
        return $id;
    }
    return `MGPickerService -tr1 $id $rep1`;
}
global proc string MGP_MultiLanguage_rep2(string $id,string $rep1,string $rep2)
{
    if(!`exists MGPickerService`)
    {
        return $id;
    }
    return `MGPickerService -tr2 $id $rep1 $rep2`;
}

proc mgp_openFileInExplorer (string $dir)
{
    if(!size($dir))return;
    global int $MGPKR_OStype;   
    if(!$MGPKR_OStype)
    {
        if(`startsWith $dir "//"`)
        {
                $dir = toNativePath($dir);
        }   
        system("load "+("\""+$dir+"\""));
  }
  else if($MGPKR_OStype==1)
    {
        system("open '"+$dir+"'");
  }
  else
  {
    system("xdg-open '"+$dir+"'");
  }
}
global proc MGP_BrowseFolder(string $dir)
{
        mgp_openFileInExplorer $dir;
}
global proc string [] MGP_ListAllNamespaces()
{
    string $ns[] = `namespaceInfo -listOnlyNamespaces`;
    string $remove[]={"UI", "shared"};
    return `stringArrayRemove $remove $ns`;
}

// --------get user config root dir---------------------------
proc string mgp_getUserConfigDefinitionFile()
{
    global string $MGPicker_ServerConfigFolder;
    global string $MGPicker_UserConfigDefinitionFile;
    string $file = (`MGP_GetDirInProgramfiles $MGPicker_ServerConfigFolder`+"/"+ $MGPicker_UserConfigDefinitionFile);
    return $file;
}

proc string mgp_readUserConfigDefinition()
{
    global string $MGPicker_UserConfig_Position_Key;
    string $file = `mgp_getUserConfigDefinitionFile`;
    if(!`filetest -f $file`)
    {
        return "";
    }
    $readFileID=`fopen $file "r"`;
    while(!`feof $readFileID`)
    {
        $nextLine=strip(`fgetline $readFileID`);
        if (size($nextLine) && !`startsWith $nextLine "#"`)
        {
            if(`startsWith $nextLine $MGPicker_UserConfig_Position_Key`)
            {
                string $datas[]=`stringToStringArray $nextLine "="`;
                if(size($datas)!=2)
                {
                    fclose $readFileID;
                    return "";
                } 
                fclose $readFileID;
                return `strip $datas[1]`;
            }
        }
    }
    fclose $readFileID;
    return "";
}
proc string mgp_getDefaultUserConfigDir()
{
    global string $MGPicker_ProgramPath;
    return ($MGPicker_ProgramPath+"MGPicker_UserConfig/");
}
proc string mgp_getUserConfigDir()
{    
    global string $MGPicker_UserConfig_Position_Value_UserApp;  
    global string $MGPicker_UserConfig_Position_Value_UserScript;
    global string $MGPicker_UserConfig_Position_Value_UserApp_1;  
    global string $MGPicker_UserConfig_Position_Value_UserScript_1;
    
    global string $MGPicker_DefaultUserConfigFolder;   
    global string $MGPicker_UserConfig_Position_UserApp_Folder;
    global string $MGPicker_AppName;
    
    global string $MGPicker_UserConfig_Position_Key;
    string $configPosition = strip(`getenv $MGPicker_UserConfig_Position_Key`);
    if(!size($configPosition))
    {
        $configPosition = `mgp_readUserConfigDefinition`;
    }
    if( $configPosition == $MGPicker_UserConfig_Position_Value_UserApp || $configPosition == $MGPicker_UserConfig_Position_Value_UserApp_1 )
    {
        return `internalVar -userAppDir` + $MGPicker_UserConfig_Position_UserApp_Folder + "/";
    }
    else if( $configPosition == $MGPicker_UserConfig_Position_Value_UserScript || $configPosition == $MGPicker_UserConfig_Position_Value_UserScript_1)
    {
        return `internalVar -userScriptDir` + $MGPicker_AppName + "/" + $MGPicker_DefaultUserConfigFolder + "/";
    }
    else
    {
        // if it is absolute directory:
        if(size($configPosition))
        {
            $configPosition = `substituteAllString $configPosition "\\" "/"`;
            if(!`endsWith $configPosition "/"`)
            {
                $configPosition += "/";
            }
            return $configPosition;
        }
    }
    return `mgp_getDefaultUserConfigDir`;
}
proc int mgp_buildConfigSubFolders(string $rootDir)
{
    if(!`filetest -d $rootDir`)
    {
        if(!`sysFile -md $rootDir`)
        {
            return 0;
        }
    }
    if(!`endsWith $rootDir "/"`)
    {
        $rootDir += "/";
    }
    string $subFolders[]={//"UIConfig",
                            "CommandButtonPresets", 
                            "CodeSnippets/MEL", 
                            "CodeSnippets/Python",
                            "Converters",
                            "AutoSourced",
                            "LanguageRes",
                            "SnapshotStyles"};
    for($sub in $subFolders)
    {
        $path = $rootDir + $sub;
        sysFile -md $path;
    }
    return 1;
}
proc mgp_initUserConfigDir()
{
    global string $MGPicker_UserConfig_Position;
    if(!size($MGPicker_UserConfig_Position))
    {
        $MGPicker_UserConfig_Position = `mgp_getUserConfigDir`;
        MGP_ScriptEditorFeedback ("Configuration root directory: "+ $MGPicker_UserConfig_Position) 0;
    }
    // Ensure the necessary folder are built:
    mgp_buildConfigSubFolders $MGPicker_UserConfig_Position;
}
mgp_initUserConfigDir;

proc string mgp_getPickerConfigItemDir(string $configName)
{
    global string $MGPicker_UserConfig_Position;
    if(!size($MGPicker_UserConfig_Position))
    {
        mgp_initUserConfigDir;
    }
    string $folder=($MGPicker_UserConfig_Position + $configName);
    return $folder;
}

global proc string MGP_GetPickerConfigRootDirectory()
{
    return `mgp_getPickerConfigItemDir ""`;
}
/*
proc mgp_writeIntoUIConfig (string $configFileName ,string $configContent)
{       
    string $conFigFileNameForOpen = `mgp_getPickerConfigItemDir $configFileName`;
    string $dir = `dirname $conFigFileNameForOpen`;
    if(!`filetest -d $dir`)
    {
        sysFile -md  $dir;
    }
    //print ($conFigFileNameForOpen+"\n") ;
    $fileId=`fopen $conFigFileNameForOpen "w"`;
    fprint $fileId $configContent;
    fflush $fileId;
    fclose $fileId;
}
*/
proc string mgp_readFormConfig (string $configFileName)
{
    string $file = `mgp_getPickerConfigItemDir $configFileName`;
    //print ($file+"\n") ;
    if(!`filetest -f $file`){return "";}
    string $nextLine ,$getDataString;
    $readFileID=`fopen $file "r"`;
    while(!`feof $readFileID`)
    {
        $nextLine=`fgetline $readFileID`;
        if (size($nextLine)>0)
        {           
            $getDataString=($getDataString+$nextLine);
        }
    }
    fclose $readFileID;
    return $getDataString;
}
global proc string MGP_GetPickerRootDirectory()
{
    global string $MGPicker_ProgramPath;
    return $MGPicker_ProgramPath;
}

proc string mgp_getSnapshotStyle_FactoryDefaultDirectory()
{
    return (`MGP_GetDirInProgramfiles "SnapshotStyles/"`);
}
proc string mgp_getSnapshotStyle_UserDirectory()
{
    return (`mgp_getPickerConfigItemDir "SnapshotStyles/"`);
}
global proc string MGP_getPickerUserTamplateDirectory()
{
    string $dir = `internalVar -userAppDir`;
    $dir += "MG_PickerTemplate/";
    return $dir;
  //return (`mgp_getPickerConfigItemDir "MG_PickerTemplate/"`);
}
global proc string MGP_getPickerFactoryDefaultTamplateDirectory()
{
    string $dir = `MGP_GetDirInProgramfiles "Templates/"`;
    return $dir;
  //return (`mgp_getPickerConfigItemDir "MG_PickerTemplate/"`);
}
global proc string MGP_getPkrDataDirectory()
{
    string $dir = `internalVar -userAppDir`;
    $dir += "MG_PickerData/";
    return $dir;
    //global string $MGPicker_ProgramPath;
    //string $folder=($MGPicker_ProgramPath+"MGPicker_UserData/");
    //return $folder;
}
proc string mgp_getPkrProgramFilesDirectory()
{
    return `MGP_GetDirInProgramfiles ""`;
}
proc string mgp_getPkrConverterFactoryDirectory() 
{
    return `MGP_GetDirInProgramfiles "Converters/"`;
}
proc string mgp_getPkrConverterUserDirectory()
{
    return `mgp_getPickerConfigItemDir "Converters/"`;
}
proc string mgp_getPkrAutoSourceFactoryDirectory()
{
    global string $MGPicker_AutoSourceFolder;
    return `MGP_GetDirInProgramfiles ($MGPicker_AutoSourceFolder+"/")`;
}
proc string mgp_getPkrAutoSourceUserDirectory()
{
    global string $MGPicker_AutoSourceFolder;
     return `mgp_getPickerConfigItemDir ($MGPicker_AutoSourceFolder+"/")`;
}
proc sourceAllPickerAutoInvokeMels_doit(string $dir)
{       
        string $mels[]=`getFileList -fld $dir -fs "*.mel"`;
        
        
        string $melError = "Error auto sourcing mel:";
        string $melSourced = "Mel auto sourced:";
        string $pyError = "Error auto sourcing python script:";
        string $pySourced = "Python script auto sourced:";
    
        if(`exists MGPickerService`)
        {
            $melError = `MGP_MultiLanguage "pkr.errorAutoSourceMel"`;
            $melSourced = `MGP_MultiLanguage "pkr.autoSourceMel"`;
            $pyError = `MGP_MultiLanguage "pkr.errorAutoSourcePy"`;
            $pySourced = `MGP_MultiLanguage "pkr.autoSourcePy"`;
        }
        
        for($mel in $mels)
        {
            string $cmd = "source \""+$dir+$mel+"\"";
            int $result = catch (`eval $cmd`);
            if($result)
            {
                MGP_ScriptEditorFeedback ($melError+" "+$mel+"\n") 1;
            }
            else
            {
                MGP_ScriptEditorFeedback ($melSourced +" "+$mel+"\n") 0;
            }
        }
        
        string $pys[]=`getFileList -fld $dir -fs "*.py"`;
        string $pycs[]=`getFileList -fld $dir -fs "*.pyc"`;
        $pys = stringArrayCatenate($pys,$pycs);
        for($py in $pys)
        {
            string $cmd = "python (\"execfile ('"+$dir+$py+"')\")";
            int $result = catch (`eval $cmd`);
            if($result)
            {
                MGP_ScriptEditorFeedback ($pyError+" "+$py+"\n") 1;
            }
            else
            {
                MGP_ScriptEditorFeedback ($pySourced +" "+$py+"\n") 0;
            }
        }
}
proc sourceAllPickerAutoInvokeMels()
{    
    global int $MGPicker_AvoidSourceAgain;
    if($MGPicker_AvoidSourceAgain)
    {
        $MGPicker_AvoidSourceAgain = 0;
        return;
    }
    sourceAllPickerAutoInvokeMels_doit `mgp_getPkrAutoSourceFactoryDirectory`;
    sourceAllPickerAutoInvokeMels_doit `mgp_getPkrAutoSourceUserDirectory`;
    
}
sourceAllPickerAutoInvokeMels;

proc string mgp_getPickerConverterProc_autoReadNode(string $melBasename)
{
    return ($melBasename+"_autoReadNode");
}
proc string mgp_getPickerConverterProc_nodeType(string $melBasename)
{
    return ($melBasename+"_nodeType");
}
proc string mgp_getPickerConverterProc_isPickerNode(string $melBasename)
{
    return ($melBasename+"_isPickerNode");
}
proc string mgp_getPickerConverterProc_nodeLister(string $melBasename)
{
    return ($melBasename+"_nodeLister");
}
proc string mgp_getPickerConverterProc_readNode(string $melBasename)
{
    return ($melBasename+"_readNode");
}
proc string mgp_getPickerConverterProc_isPickerFile(string $melBasename)
{
    return ($melBasename+"_isPickerFile");
}
proc string mgp_getPickerConverterProc_readFile(string $melBasename)
{
    return ($melBasename+"_readFile");
}
proc string mgp_getPickerConverterProc_getNamespace(string $melBasename)
{
    return ($melBasename+"_getNamespace");
}
proc mgp_sourcePickerConverterMel(string $melFile)
{
    string $cmd = "source \""+$melFile+"\"";
    eval $cmd;
}
proc mgp_initAllPkrConverters_doit(string $dir)
{
    string $mels []=`getFileList -fld $dir -fs "*.mel"`;
    global string $MGPicker_AllConverters[];
    string $bn;
    //print $mels;
    for($mel in $mels)
    {
        $bn = `basename $mel ".mel"`;
        if(`stringArrayContains $bn $MGPicker_AllConverters`)
        {
            continue;
        }
        string $cFile = $dir+$mel;
        if(catch(`mgp_sourcePickerConverterMel $cFile`))
        {
            continue;
        }
        $MGPicker_AllConverters[size($MGPicker_AllConverters)] = $bn;       
    }   
}
proc mgp_initAllPkrConverters()
{  
    global string $MGPicker_AllConverters[];
    clear $MGPicker_AllConverters;
    string $factoryDir = `mgp_getPkrConverterFactoryDirectory`;
    mgp_initAllPkrConverters_doit $factoryDir;
    string $userDir = `mgp_getPkrConverterUserDirectory`;
    mgp_initAllPkrConverters_doit $userDir;
}
mgp_initAllPkrConverters;

proc int mgp_hasNamespace(string $name)
{
    return `gmatch $name "*:*"`;
}
global proc string MGP_cleanUpNonNamespaceMix(string $name)
{
    return `MGPickerService -q -cleanNamespaceMix $name`;
    /*
    if(!`mgp_hasNamespace $name` || !`gmatch $name "*|*"`)
    {
        return $name;
    }
    string $temp[]=`stringToStringArray $name "|"`;
    string $used[];
    clear $used;
    int $start = 0;
    for($each in $temp)
    {
        if($start || mgp_hasNamespace($each))
        {
            $used[size($used)] = $each;
            $start = 1;
        }
    }
    return `stringArrayToString $used "|"`;
    */
}
global proc string [] MGP_cleanUpNonNamespaceMixList(string $names[])
{
    string $used[];
    for($each in $names)
    {
        $used[size($used)] = `MGP_cleanUpNonNamespaceMix $each`;
    }
    return $used;
}
global proc string MGP_validateNodeNameString(string $inputString)
//return a string valid for being a maya control name.
{
    int $count = size($inputString);
    if(!$count)
    {
        return $inputString;
    }
    string $exp = "[a-zA-Z_]+[a-zA-Z0-9_]*";
    string $outputString;
    if(`isValidString $inputString $exp`)
    {
        return $inputString;
    }
    string $cc;
    string $expStart = "[a-zA-Z_]";
    string $expOther = "[a-zA-Z0-9_]";
    for($i=1 ; $i <= $count ; $i++)
    {
        $cc = `substring $inputString $i $i`;
        if($i == 1)
        {
          $exp = $expStart;
        }
        else
        {
          $exp = $expOther;
        }
        if(`isValidString $cc $exp`)
        {
            $outputString += $cc;
        }
        else
        {
            $outputString += "_";
        }
    }
    return $outputString;
}
global proc string MGP_GetSceneNameAsNamespace()
{
    string $fn = `file -q -sn -shn`;
    $fn = `basenameEx $fn`;
    if(!size($fn))
    {
        return "";
    }
    return `MGP_validateNodeNameString $fn`;
}
proc string [] mgp_listAllPkrConverters()
{
    global string $MGPicker_AllConverters[];
    return $MGPicker_AllConverters;
}

global proc string MGP_getPkrLanguageFactoryDirectory()
{
    return `MGP_GetDirInProgramfiles "LanguageRes/"`;
}
global proc string MGP_getPkrLanguageUserDirectory()
{
    return `mgp_getPickerConfigItemDir "LanguageRes/"`;
}
global proc string MGP_getLanguageFileFullpathViaBasename(string $langBasename)
{
    string $file = (`MGP_getPkrLanguageFactoryDirectory`+$langBasename+".qm");
    if(!`filetest -f $file`)
    {
        $file = (`MGP_getPkrLanguageUserDirectory`+$langBasename+".qm");
    }
    return $file;
}
global proc string [] MGP_listPkrAvailableLanguageFileFullPathes()
{
    string $resFolder= `MGP_getPkrLanguageFactoryDirectory`;
    string $qms[]= `getFileList -fld $resFolder -fs "*.qm"`;
    string $result[];
    string $names[];
    for($qm in $qms)
    {
        $result[size($result)] = ($resFolder+$qm);
        $names[size($names)] = $qm;
    }
    $resFolder= `MGP_getPkrLanguageUserDirectory`;
    $qms= `getFileList -fld $resFolder -fs "*.qm"`;
    for($qm in $qms)
    {
        string $path = ($resFolder+$qm);
        if(!`stringArrayContains $qm $names`)
        {
        $result[size($result)] =$path;
      }
    }
    return $result;
}
global proc string MGP_GetLanguageName()
{
    global string $MGPicker_Config_LanID; 
    return `MGPicker -q -config $MGPicker_Config_LanID ""`;
}
global proc MGP_LoadHelp(int $mode)
//$mode 0: home of manual
//$mode 1: home of designer manual
//$mode 2: home of animator manual
//$mode 3: home of programmer manual
{
    string $page = "index.html";
    if($mode == 1)
    {
        $page = "designer.html";
    }
    if($mode == 2)
    {
        $page = "animator.html";
    }
    else if($mode == 3)
    {
        $page = "programmer.html";
    }
    string $lang = `MGP_GetLanguageName`;
    global string $MGPicker_ProgramPath;
    string $helpDir = $MGPicker_ProgramPath + "MGPicker_Help/";
    string $help = $helpDir + $lang + "/" + $page;
    if(`filetest -f $help`)
    {
        showHelp -a $help;
        //mgp_openFileInExplorer $help;
    }
    else if($lang != "English")
    {
        $help = $helpDir + "English/" + $page;
        if(`filetest -f $help`)
        {           
            showHelp -a $help;
            //mgp_openFileInExplorer $help;
        }
    }
}
global proc string MGP_getFactoryDefaultCodeSnippetPath(int $commandType)
//$commandType 0: mel
//CodeSnippet 1: python
{
    string $path= `MGP_GetDirInProgramfiles "CodeSnippets/"`;
        if(!$commandType)
        {
            $path += "MEL";
        }
        else
        {
            $path += "Python";
        }
        return $path;
}
global proc string MGP_getUserCodeSnippetPath(int $commandType)
//$commandType 0: mel
//CodeSnippet 1: python
{   
    string $path = `mgp_getPickerConfigItemDir "CodeSnippets/"`;
    if(!$commandType)
    {
        $path += "MEL";
    }
    else
    {
        $path += "Python";
    }
    return $path;
}

global proc string[] MGP_getUserCodeSnippetCategories(int $commandType)
{   
    string $path = `MGP_getUserCodeSnippetPath $commandType`;
    string $datas[]=`getFileList -fld $path`;
    string $dirs[];
    for($d in $datas)
    {
        if(`filetest -d ($path+"/"+$d)`)
        {
            $dirs[size($dirs)] = $d;
        }
    }
    return $dirs;
}

global proc string MGP_getFactoryDefaultCommandButtonPresetPath()
{
    string $path = `MGP_GetDirInProgramfiles "CommandButtonPresets"`;
    return $path;
}
global proc string MGP_getUserCommandButtonPresetPath()
{   
    string $path = `mgp_getPickerConfigItemDir "CommandButtonPresets"`;
    return $path;
}

global proc string[] MGP_getUserCommandButtonPresetCategories()
{   
    string $path = `MGP_getUserCommandButtonPresetPath`;
    string $datas[]=`getFileList -fld $path`;
    string $dirs[];
    for($d in $datas)
    {
        if(`filetest -d ($path+"/"+$d)`)
        {
            $dirs[size($dirs)] = $d;
        }
    }
    return $dirs;
}
proc mgp_ensureDirBuilt(string $dir)
{
    if(!`filetest -d $dir`)
    {
        sysFile -md $dir;
    }
}
proc mgp_buildMGPicker_relatedDirs()
{
    //UI config:
    //mgp_ensureDirBuilt `mgp_getPickerConfigItemDir "UIConfig"`;
    
    //snapshot style
    mgp_ensureDirBuilt `mgp_getSnapshotStyle_FactoryDefaultDirectory`;
    mgp_ensureDirBuilt `mgp_getSnapshotStyle_UserDirectory`;
    
    //code snippet  
    mgp_ensureDirBuilt `MGP_getFactoryDefaultCodeSnippetPath 0`;
    mgp_ensureDirBuilt `MGP_getFactoryDefaultCodeSnippetPath 1`;
    mgp_ensureDirBuilt `MGP_getUserCodeSnippetPath  0`;
    mgp_ensureDirBuilt `MGP_getUserCodeSnippetPath  1`;
    
    //command button presets
    mgp_ensureDirBuilt `MGP_getFactoryDefaultCommandButtonPresetPath`;
    mgp_ensureDirBuilt `MGP_getUserCommandButtonPresetPath`;
    
    //picker data
    mgp_ensureDirBuilt (`MGP_getPkrDataDirectory`+`MGPkr_getDefaultProjectName`);
    
    //picker template
    mgp_ensureDirBuilt `MGP_getPickerFactoryDefaultTamplateDirectory`;
    mgp_ensureDirBuilt `MGP_getPickerUserTamplateDirectory`;
    
    //language res
    mgp_ensureDirBuilt `MGP_getPkrLanguageFactoryDirectory`;
    mgp_ensureDirBuilt `MGP_getPkrLanguageUserDirectory`;
    
    //converter
    mgp_ensureDirBuilt `mgp_getPkrConverterFactoryDirectory`;
    mgp_ensureDirBuilt `mgp_getPkrConverterUserDirectory`;
    
    //autosourced
    mgp_ensureDirBuilt `mgp_getPkrAutoSourceFactoryDirectory`;
    mgp_ensureDirBuilt `mgp_getPkrAutoSourceUserDirectory`;
    
}
mgp_buildMGPicker_relatedDirs;

proc string [] mgp_ListAllSubFolders (string $parentFolder)
//this servers as a replacement to getFileList, so it only return subfolder names but not the full pathes.
{
  if(!`filetest -d  $parentFolder`)
  {
    return {};
  }
  string $resultFolders[];
    if(!`endsWith $parentFolder "/"`)
    {
        $parentFolder += "/";
    }
    string $subItems[] = `getFileList -folder $parentFolder`;
    if(!size($subItems))
    {
        return $resultFolders;
    }
    string $cSubDir;
    for($each in $subItems)
    {
        $cSubDir = ($parentFolder+$each);
        if(`filetest -d $cSubDir`)
        {
            $resultFolders[size($resultFolders)] = $each;
        }       
    }
    return $resultFolders;
}

global proc string MGP_getSimpleEditColorControlName(int $mode)
//$mode 0:  fill color control
//$mode 1:  label color control
{   
  global string $MGPicker_SimpleEdit_FillColor_Btn;
  global string $MGPicker_SimpleEdit_LabelColor_Btn;
  if(!$mode)
  {
    return $MGPicker_SimpleEdit_FillColor_Btn;
  }
  else
  {
    return $MGPicker_SimpleEdit_LabelColor_Btn;
  }
}
global proc string MGP_getAppName()
{
  global string $MGPicker_AppName;
  return $MGPicker_AppName;
}
global proc string MGPkr_getDefaultProjectName()
{
    global string $MGPicker_DefaultProjName;
    return $MGPicker_DefaultProjName;
}
global proc string MGPkr_getUserName()
{
  global int $MGPKR_OStype; 
  string $result;
  if(!$MGPKR_OStype)
  {
    $result = `getenv "userName"`;
  }
  else  //macOS & Linux
  {
    $result = `getenv "USER"`;
  }
  $result = strip($result);
  return $result;
}
global proc string[] MGP_listAllProjects()
{
    string $dir = `MGP_getPkrDataDirectory`;
    string $projs[] = `mgp_ListAllSubFolders $dir`;
    string $defaultProj = `MGPkr_getDefaultProjectName`;
    if(!`stringArrayContains  $defaultProj $projs`)
    {
        $projs[size($projs)] = $defaultProj;
    }
    return $projs;
}
global proc string MGP_getSnapshotStyleFilePathViaName(string $styleName)
{
        int $isDefault = 1;
    string $filePath = `mgp_getSnapshotStyle_FactoryDefaultDirectory`;
    if(!`startsWith $styleName "~"`)
    {
        $filePath = `mgp_getSnapshotStyle_UserDirectory`;
        $isDefault = 0;
    }
    if(!`endsWith $filePath "/"`)
    {
        $filePath += "/";
    }
    $filePath  += $styleName;
    $filePath += ".style";
    /*
    if(!`filetest -f $filePath`)
    {
        string $alterFile = $filePath;
        if($isDefault)
        {
            
        }
    }
    */
    return $filePath;
}
proc string [] mgp_listExistedStyleNames()
{
        string $dirs[];
        $dirs[0] = `mgp_getSnapshotStyle_UserDirectory`;
        $dirs[1] = `mgp_getSnapshotStyle_FactoryDefaultDirectory`;
    if(!`endsWith $dirs[0] "/"`)
    {
        $dirs[0] = $dirs[0] + "/";
    }
    if(!`endsWith $dirs[1] "/"`)
    {
        $dirs[1] = $dirs[1] + "/";
    }
      string $result [];
        int $index = 0;
    for($dir in $dirs)
    {
        string $styles[]=`getFileList -fld $dir -fs "*.style"`;
        for($each in $styles)
        {
            if(!$index)
            {
                if(`startsWith $each "~"`)
                {
                    continue;
                }
            }
            else
            {
                if(!`startsWith $each "~"`)
                {
                    continue;
                }
            }
            $result[size($result)] = `basenameEx $each`;
        }
        $index ++;
    }
    return $result;
}
global proc string [] MGP_listExistedStyles()
{
        string $dirs[];
        $dirs[0] = `mgp_getSnapshotStyle_UserDirectory`;
        $dirs[1] = `mgp_getSnapshotStyle_FactoryDefaultDirectory`;
    if(!`endsWith $dirs[0] "/"`)
    {
        $dirs[0] = $dirs[0] + "/";
    }
    if(!`endsWith $dirs[1] "/"`)
    {
        $dirs[1] = $dirs[1] + "/";
    }
      string $result [];
      string $styles[];
    for($dir in $dirs)
    {
        $styles=`getFileList -fld $dir -fs "*.style"`;
        for($each in $styles)
        {
            $result[size($result)] = $dir + $each;
        }
    }
    return $result;
}
proc string mgp_getPicker3DPanelInitialCamera()
{
    string $cam = "front";
    global string $MGPicker_3DPanelCamera_OV;
    if(`optionVar -ex $MGPicker_3DPanelCamera_OV`)
    {
        $cam = `optionVar -q $MGPicker_3DPanelCamera_OV`;
    }
    if(!`objExists $cam`)
    {
        $cam = "front";
    }
    return $cam;
}
/*
proc mgp_rememberLastRenderResolution()
{    
    global int $MGPicker_LastRenderResolution[];
    clear $MGPicker_LastRenderResolution;
    int $width = `getAttr defaultResolution.width`;
        int $height = `getAttr defaultResolution.height`;
    $MGPicker_LastRenderResolution[0] = $width ;
    $MGPicker_LastRenderResolution[1] = $height ;
}*/
proc mgp_restoreLastRenderResolution()
{
    float $width = `getAttr defaultResolution.width`;
    float $height = `getAttr defaultResolution.height`;
    $height = $height ? $height : 1;
    setAttr defaultResolution.deviceAspectRatio ($width/$height);
    /*
    global int $MGPicker_LastRenderResolution[];
    if($MGPicker_LastRenderResolution[0] && $MGPicker_LastRenderResolution[1])
    {
        setAttr defaultResolution.width $MGPicker_LastRenderResolution[0];
        setAttr defaultResolution.height $MGPicker_LastRenderResolution[1];
    }*/
}

proc string[] mgp_getFailsaveSnapshotStyle()
{
    return {"antialiasing=1",
                    "silhouette=0",
                    "invert=0",
                    "grayscale=0",
                    "brightness=0",
                    "contrast=0",
                    "saturation=0",
                    "blur=0",
                    "bgcolor=0,0,0",
                    "hTile=1",
                    "hTileGap=0",
                    "vTile=1",
                    "vTileGap=0"};
}

global proc string[] MGP_readSnapshotStyleViaName(string $styleName)
//0: antialiasing 0~1
//1: silhouette 0~1
//2: invert 0~1
//3: grayscale 0~1
//4: brightness -255~255
//5: contrast -255~255
//6: saturation  -255~255
//7: blur 0~18
//8: bgcolor 0~255,0~255,0~255
//9: hTile 1~10
//10: hTileGap 0~100
//11: vTile 1~10
//12: vTileGap 0~100
{
    string $result[];
    clear $result;
    string $filePath = `MGP_getSnapshotStyleFilePathViaName $styleName`;
    if(!`filetest -f $filePath`)
    {
        if($styleName != "~Default")
        {
            return `MGP_readSnapshotStyleViaName "~Default"`;
        }
        else
        {
            return `mgp_getFailsaveSnapshotStyle`;
        }
    }
    else
    {
        $result = `MGP_ReadFileArray $filePath`;
    }
    return $result;
}
global proc string[] MGP_readSnapshotStyleViaFile(string $filePath)
//0: antialiasing 0~1
//1: silhouette 0~1
//2: invert 0~1
//3: grayscale 0~1
//4: brightness -255~255
//5: contrast -255~255
//6: saturation  -255~255
//7: blur 0~18
//8: bgcolor 0~255,0~255,0~255
//9: hTile 1~10
//10: hTileGap 0~100
//11: vTile 1~10
//12: vTileGap 0~100
{
    string $result[];
    clear $result;
    if(!`filetest -f $filePath`)
    {
        if(tolower(`basenameEx $filePath`) != "~default")
        {
            return `MGP_readSnapshotStyleViaName "~Default"`;
        }
        else
        {
            return `mgp_getFailsaveSnapshotStyle`;
        }
    }
    else
    {
        $result = `MGP_ReadFileArray $filePath`;
    }
    return $result;
}
proc string [] mgp_getLabelValuepair(string $line)
{
    string $temp[]=`stringToStringArray $line "="`;
    string $result[];
    $result[0] = strip($temp[0]);
    $result[1] = strip($temp[1]);
    return $result;
}
global proc string[] MGP_selectedMGChannelBoxPlugs(int $channelBoxMode)
//$channelBoxMode 0 : Maya channelBox
//$channelBoxMode 1: MG-channelBox
//$channelBoxMode 2: MGPicker channelBox
{
    //string $mgChannelBoxName = "MGChannelBoxControl"; 
    string $mgChannelBoxName = "MGChannelBoxControl"; 
    global string $MGPicker_AttributePanel_ChannelBoxName;
    global string $gChannelBoxName;  
    if($channelBoxMode == 2)
    {
        $mgChannelBoxName = $MGPicker_AttributePanel_ChannelBoxName;  
    }
    else if(!$channelBoxMode)
    {
        $mgChannelBoxName = $gChannelBoxName;
    }
    string  $result[];

    if( `channelBox -q -exists $mgChannelBoxName` ) {
        string  $main[], $mainObjects[];
        string  $shape[], $shapeObjects[];
        string  $history[], $historyObjects[];
        string  $outputs[], $outputObjects[];
        
        $main = `channelBox -q -selectedMainAttributes  $mgChannelBoxName`;
        $shape = `channelBox -q -selectedShapeAttributes $mgChannelBoxName`;
        $history = `channelBox -q -selectedHistoryAttributes $mgChannelBoxName`;
        $outputs = `channelBox -q -selectedOutputAttributes $mgChannelBoxName`;
        
        string  $attr;
        
        $main = `channelBox -q -selectedMainAttributes $mgChannelBoxName`;
        $mainObjects = `channelBox -q -mainObjectList $mgChannelBoxName`;

        $shape = `channelBox -q -selectedShapeAttributes $mgChannelBoxName`;
        $shapeObjects = `channelBox -q -shapeObjectList $mgChannelBoxName`;

        $history = `channelBox -q -selectedHistoryAttributes $mgChannelBoxName`;
        $historyObjects = `channelBox -q -historyObjectList $mgChannelBoxName`;

        $outputs = `channelBox -q -selectedOutputAttributes $mgChannelBoxName`;
        $outputObjects = `channelBox -q -outputObjectList $mgChannelBoxName`;
        
        if( size( $main ) > 0 ) 
        {
            for( $object in $mainObjects ) 
            {
                for ($mattr in $main) 
                {
                    $result[ size($result) ] = ($object+"."+$mattr);
                }
            }
        }

        if( size( $shape ) > 0 ) 
        {
            for( $object in $shapeObjects ) 
            {
                for ($mattr in $shape) 
                {
                    $result[ size($result) ] = ($object+"."+$mattr);
                }
            }
        }

        if( size( $history ) > 0 ) 
        {
            for( $object in $historyObjects ) 
            {
                for ($mattr in $history) 
                {
                    $result[ size($result) ] = ($object+"."+$mattr);
                }
            }
        }

        if( size( $outputs ) > 0 ) 
        {
            for( $object in $outputObjects ) 
            {
                for ($mattr in $outputs) 
                {
                    $result[ size($result) ] = ($object+"."+$mattr);
                }
            }
        }
    }
        
    return $result;
}
proc string [] mgp_getAttributeMinMaxValue(string $node, string $attr)
{
     //$node = "peterteen01_rig:neck_M_top_ctrl";
     //select  $node
     //$attr = "rx";
        string $result[];
        float $minV = -100000;
        float $maxV = 100000;
        if(`getAttr -l ($node+"."+$attr)`)
        {
            $minV = $maxV = `getAttr ($node+"."+$attr)`;
            $result[0] = $minV;
            $result[1] = $maxV;
            return $result;
        }
        if(`attributeQuery -n $node -softMinExists $attr`)
        {
            float $mins[] =`attributeQuery -n $node -softMin $attr`;
            $result[0] = $mins[0];
            $minV = $mins[0];
        }
        else if(`attributeQuery -n $node -minExists $attr`)
        {
            float $mins[] =`attributeQuery -n $node -minimum $attr`;
            $result[0] = $mins[0];
            $minV = $mins[0];
        } 
        else
        {
            $result[0] = "";
        } 
         
        if(`attributeQuery -n $node -softMaxExists $attr`)
        {
            float $max[] =`attributeQuery -n $node -softMax $attr`;
            $result[1] = $max[0];
            $maxV = $max[0];
        }
        else if(`attributeQuery -n $node -maxExists $attr`)
        {
            float $max[] =`attributeQuery -n $node -maximum $attr`;
            $result[1] = $max[0];
            $maxV = $max[0];
        } 
        else
        {
            $result[1] = "";
        }
        int $enable[];
        float $limit [];
        int $isTransform = 0;
    if($attr == "tx" || $attr == "translateX")
    {
        $enable =`transformLimits -q -etx $node`;
        $limit = `transformLimits -q -tx $node`;
        $isTransform = 1;
    }
    else if($attr == "ty" || $attr == "translateY")
    {
        $enable =`transformLimits -q -ety $node`;
        $limit = `transformLimits -q -ty $node`;
        $isTransform = 1;
    }
    else if($attr == "tz" || $attr == "translateZ")
    {
        $enable = `transformLimits -q -etz $node`;
        float $limit [] = `transformLimits -q -tz $node`;
        $isTransform = 1;
    }
    else if($attr == "rx" || $attr == "rotateX")
    {
        $enable = `transformLimits -q -erx $node`;
        $limit = `transformLimits -q -rx $node`;
        $isTransform = 1;
    }
    else if($attr == "ry" || $attr == "rotateY")
    {
        $enable = `transformLimits -q -ery $node`;
        $limit = `transformLimits -q -ry $node`;
        $isTransform = 1;
    }
    else if($attr == "rz" || $attr == "rotateZ")
    {
        $enable = `transformLimits -q -erz $node`;
        $limit = `transformLimits -q -rz $node`;
        $isTransform = 1;
    }
    else if($attr == "sx" || $attr == "scaleX")
    {
        $enable =`transformLimits -q -esx $node`;
        $limit = `transformLimits -q -sx $node`;
        $isTransform = 1;
    }
    else if($attr == "sy" || $attr == "scaleY")
    {
        $enable =`transformLimits -q -esy $node`;
        $limit = `transformLimits -q -sy $node`;
        $isTransform = 1;
    }
    else if($attr == "sz" || $attr == "scaleZ")
    {
        $enable =`transformLimits -q -esz $node`;
        $limit = `transformLimits -q -sz $node`;
        $isTransform = 1;
    }
    if($isTransform)
    {
        if($enable[0])
        {
            if($limit [0] < -100000)
            {
                $result[0] = "";
            }
            else
            {
                $minV = $minV < $limit [0] ? $limit [0] : $minV;
                $result[0] = $minV;
            }
        }
        if($enable[1])
        {
            if($limit [1] > 100000)
            {
                $result[1] = "";
            }
            else
            {
                $maxV = $maxV > $limit [1] ? $limit [1] : $maxV;
                $result[1] = $maxV;
            }
        }
    }
    return $result;
}
proc int mgp_isAttrRotateAttribute(string $attr)
{
    if($attr == "rotateX" || $attr == "rotateY" || $attr == "rotateZ" || $attr == "rx" || $attr == "ry" || $attr == "rz")
    {
        return 1;
    }
    return 0;
}
proc int mgp_isAttrScaleAttribute(string $attr)
{
    if($attr == "scaleX" || $attr == "scaleY" || $attr == "scaleZ" || $attr == "sx" || $attr == "sy" || $attr == "sz")
    {
        return 1;
    }
    return 0;
}
proc string [] mgp_fillupNoRangeAttributeMinMaxValues(string $attr, string $infos[], float $cv)
{   
    int $isRotate = `mgp_isAttrRotateAttribute $attr`;
    int $isScale = `mgp_isAttrScaleAttribute $attr`;
    int $wholeRange = 2;
    int $halfRange = 1;
    if($isRotate)
    {
        $wholeRange = 90;
        $halfRange = 45;
    }
    if(!size($infos[0]) && !size($infos[1]))
    {       
        if(!$isScale)
        {
            $infos[0] = -$halfRange;
            $infos[1] = $halfRange;
            $infos[2] = 0;
        }
        else
        {
            $infos[0] = 0.01;
            $infos[1] = 2;
            $infos[2] = 0;
        }
    }
    else
    {
        if(!size($infos[0]))
        {
            float $max = $infos[1];
            
            if($cv >= $max)
            {
                $infos[0] = $max-$wholeRange;
            }
            else
            {
                float $gap = $max - $cv;
                if($gap < $halfRange)
                {
                    $infos[0] = $max-$wholeRange;
                }
                else
                {
                    $infos[0] = $cv - $halfRange;
                }
            }
            /*
            if($max > 0)
            {
                $infos[0] = -$max;
            }
            else 
            {
                $infos[0] = $max-2;
            }   
            */      
            $infos[2] = 0;
        }
        if(!size($infos[1]))
        {
            float $min = $infos[0];
            if($cv <= $min)
            {
                $infos[1] = $min+$wholeRange;
            }
            else
            {
                float $gap = $cv - $min;
                if($gap < $halfRange)
                {
                    $infos[1] = $min+$wholeRange;
                }
                else
                {
                    $infos[1] = $cv + $halfRange;
                }
            }
            //$infos[1] = $min+2;
            /*
            if($min < 0)
            {
                $infos[1] = -$min;
            }
            else 
            {
                $infos[1] = $min+2;
            }
            */          
            $infos[2] = 0;
        }
        //if both min max available, it has range.
        if(!size($infos[2]))
        {
            $infos[2] = 1;
        }
    }
    return $infos;
}
global proc string MGP_GetAliasRealAttributeName(string $node, string $attr)
{
        string $alias[] = `aliasAttr -q $node`;
        int $aliasLen = size($alias);
        if(!$aliasLen)
        {
            return "";
        }
        for($i=0; $i<$aliasLen-1; $i+=2)
        {
            if($alias[$i] == $attr)
            {
                return $alias[$i+1];
            }
        }
        return "";
}
global proc string[] MGP_getContainerRealAttribute(string $node, string $attr)
{
    string $result[]={$node, $attr};
    if(`nodeType $node` == "container")
    {
        string $bindAttrs[]=`container -q -bindAttr $node`;
        int $sz = size($bindAttrs);
        string $nodeList[] = `container -q -nodeList $node`;
        print $nodeList;
        for($i=0; $i<$sz; $i+=2)
        {
            if($bindAttrs[$i+1] == $attr)
            {
                string $realObjDotName = $bindAttrs[$i];
                $result=`stringToStringArray $realObjDotName "."`;
                // chances are there are duplicate named control!
                // if you get that from container -q -bindAttr, it just give you short publish name!
                for($each in $nodeList)
                {
                    if(`endsWith $each $result[0]`)
                    {
                        $result[0] = $each;
                        break;
                    }
                }
                break;
            }
        }
    }
    return $result;
}

global proc string [] MGP_GetInfosFromAttribute(string $nodeAttrName, int $forSlider)
/*return a array contains these element:
    0 AttributeType
    1 node name
    2 attr nice name
    3 attr short name
    4 attr long name
    5 current value
    6 default value
    7 min value
    8 max value
    9 other value : will be enums when it is enum, empty if not enum type.
    
  $forSlider: if it is for slider, we have to clamp the rangeliss attribute into a placeholder range.
*/
{
    string $temp[]=`stringToStringArray $nodeAttrName "."`;
    if(size($temp) != 2)
    {
        return {};
    } 
    string $node = $temp[0];
    if(!`objExists $node`)
    {
            return {};
    }
    string $attr = $temp[1];
    string $validated[]=`MGP_getContainerRealAttribute $node $attr`;
    $node =  $validated[0];
    $attr =  $validated[1];
    string $realAttrName = `MGP_GetAliasRealAttributeName $node $attr`;
    int $hasAlias = size($realAttrName);
    
    if(!`attributeExists $attr $node`)  //attributeExists is not accurate because it says not exist if it is a alias attribute.
    {
        if(!$hasAlias)
        {
            return {};
        }
    }
    string $result[];
    int $attrType = 0;

    
    string $typeStr = `getAttr -type $nodeAttrName`;
    if($typeStr == "long" || $typeStr == "short")
    {
        $attrType = 2;
    }
    else if($typeStr == "enum")
    {
        $attrType = 3;
    }
    else if($typeStr == "bool")
    {
        $attrType = 4;
    }
    else //if(`startsWith $typeStr "double"` || `startsWith $typeStr "float"`)
    {
        $attrType = 1;
    }
    string $shortAttr;
    if(!$hasAlias)
    {
        $shortAttr = `attributeQuery -n $node -shortName $attr`;
    }
    else
    {
        $shortAttr = $attr;
    }
    string $niceAttr;
    if(!$hasAlias)
    {
        $niceAttr = `attributeQuery -n $node -niceName $attr`;
    }
    else
    {
        $niceAttr = $attr;
    }
    string $longAttr;
    if(!$hasAlias)
    {
        $longAttr = `attributeQuery -n $node -longName $attr`;
    }
    else
    {
        $longAttr = $attr;
        //$longAttr = $realAttrName;
    }
    $result[size($result)] = $attrType;
    $result[size($result)] = $node;
    $result[size($result)] = $niceAttr;
    $result[size($result)] = $shortAttr;
    $result[size($result)] = $longAttr;
    $result[size($result)] = `getAttr $nodeAttrName`;
    float $defaultVs[] =`attributeQuery -n $node -listDefault $attr`;
    if(size($defaultVs))
    {
        $result[size($result)] = $defaultVs[0];
    }
    else
    {
        $result[size($result)] = "";
    }
    string $minMax [] = `mgp_getAttributeMinMaxValue $node $attr`;
    if($forSlider)
    {
        float $cv = `getAttr ($node+"."+$attr)`;
            $minMax = `mgp_fillupNoRangeAttributeMinMaxValues $attr $minMax $cv`;
    }
    $result[size($result)] = $minMax[0];
    $result[size($result)] = $minMax[1];
    if($attrType == 3)
    {
        string $enums[]=`attributeQuery -n $node -listEnum $attr`;
        $result[size($result)] = $enums[0];
    }
    else
    {
        $result[size($result)] = "";
    }
    return $result;
}
global proc MGP_setAttr(string $nodeDotAttr, float $value)
{
    string $temp[]=`stringToStringArray $nodeDotAttr "."`;
    MGP_setMayaNodeAttribute($temp[0], $temp[1], $value);
}
global proc int MGP_setMayaNodeAttribute(string $node, string $attr, float $value)
{
        string $minMax[] = `mgp_getAttributeMinMaxValue $node $attr`;
        if(size($minMax[0]))
        {
            float $min = $minMax[0];
            $value = $value < $min ? $min : $value;
        }
        if(size($minMax[1]))
        {
            float $max = $minMax[1];
            $value = $value > $max ? $max : $value;
        }
    int $error = catchQuiet(`setAttr ($node+"."+$attr) $value`);
    if($error)
    {
        return 0;
    }
    return 1;
}

proc mgp_SwitchModelViewCamera(string $modelView, string $camera)
{
    if(`objExists $camera` && `modelEditor -q -ex $modelView`)
    {
        modelEditor -e -cam $camera $modelView;
                MGP_clear3DModelEditorImagePlane;        
    }
}
proc string mgp_getCurrent3DViewCamera()
{
    string $editor = `MGP_get3DModelEditor`;
    if(`modelEditor -q -ex $editor`)
    {
        return `modelEditor -q -cam $editor`;
    }
    return "";
}
proc mgp_switchModelViewCameraViaCameraTransform(string $cameraTransform)
{
        string $editor = `MGP_get3DModelEditor`;
        if(!`modelEditor -q -ex $editor`)
        {
            return;
        }
        string $shapes[]=`listRelatives -s $cameraTransform`;
    //int $gotCam = 0;
    //string $shape = "";
    for($camShape in $shapes)
    {
        if(`nodeType $camShape` == "camera")
        {
            mgp_SwitchModelViewCamera $editor $camShape;
            //$gotCam = 1;
            //$shape = $camShape;
            break;
        }
    }
}
global proc MGP_SwitchModelViewOM_CC()
{
    if(!`optionMenu -q -ex MGPicker_3DModelView_camOM`)
    {
        return;
    }
    string $cam = `optionMenu -q -v MGPicker_3DModelView_camOM`;
    if(size($cam))
    {
        mgp_switchModelViewCameraViaCameraTransform $cam;
        global string $MGPicker_3DPanelCamera_OV;
        optionVar -sv $MGPicker_3DPanelCamera_OV $cam;
    }
}
proc string [] mgp_filterSelectedObjsToSelectedRigs()
{
    string $sel[] = `ls -sl -long -dagObjects`;
    if(!size($sel))
    {
        return {};
    }
    string $result[];
    clear $result;
    string $temp[];
    for($s in $sel)
    {
        clear $temp;
        tokenize $s "|" $temp;
        $result [size($result)] = $temp[0];
    }
    $result = `stringArrayRemoveDuplicates $result`;
    return $result;
}
global proc MGP_IsolateSelectedRig_doit(string $panel)
{
    if(!`modelPanel -q -ex $panel`)
    {
        MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.activeModelPanelFirst"` 1;
    }
    string $oldSel[] = `ls -sl`;
    if(!size($oldSel))
    {
        enableIsolateSelect $panel false;   
    }
    else
    {
        string $tops [] = `mgp_filterSelectedObjsToSelectedRigs`;
        select $tops;
        enableIsolateSelect $panel true;
        select $oldSel;
    } 
}
global proc MGP_IsolateSelection_doit(string $panel)
{
    if(!`modelPanel -q -ex $panel`)
    {
        MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.activeModelPanelFirst"` 1;
    }
    string $oldSel[] = `ls -sl`;
    if(!size($oldSel))
    {
        enableIsolateSelect $panel false;   
    }
    else
    {
        enableIsolateSelect $panel true;
    }   
}
global proc MGP_CancelIsolation_doit(string $panel)
{
    if(!`modelPanel -q -ex $panel`)
    {
        MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.activeModelPanelFirst"` 1;
    }
    enableIsolateSelect $panel false;   
}
global proc MGP_Change3DCamConfig(string $configType)
//$applyToAll 0: only apply to current active view
//$applyToAll 1: apply to all 4 view
{
    string $editor = `MGP_get3DModelEditor`;
        string $activeEditor= $editor;    
    if(!`modelEditor -q -ex ($activeEditor)`)
    {
        return;
    }
    int $value = 0;
    int $index = 0;
    /*
    if($configType == "HUD")
    {
        $value = 1-`modelEditor -q -headsUpDisplay $activeEditor`;
        modelEditor -e -headsUpDisplay $value $activeEditor;
    }
    else if($configType == "NurbsCurve")
    {
        $value = 1-`modelEditor -q -nurbsCurves $activeEditor`;
        modelEditor -e -nurbsCurves $value $activeEditor;
    }
    else if($configType == "NurbsSurface")
    {
        $value = 1-`modelEditor -q -nurbsSurfaces $activeEditor`;
        modelEditor -e -nurbsSurfaces $value $activeEditor;
    }
    else if($configType == "Grid")
    {
        $value = 1-`modelEditor -q -grid $activeEditor`;
        modelEditor -e -grid $value $activeEditor;
    }
    else if($configType == "SelectHightlight")
    {
        $value = 1-`modelEditor -q -selectionHiliteDisplay $activeEditor`;
        modelEditor -e -selectionHiliteDisplay $value $activeEditor;
    }
    else */
    if($configType == "Texture")
    {
        $value = 1-`modelEditor -q -displayTextures $activeEditor`;
        modelEditor -e -da "smoothShaded" -displayTextures $value -dl "default"  $activeEditor;
    }
    else if($configType == "FieldChart")
    {
        string $cam = `modelEditor -q -cam $activeEditor`;
        $value = 1-`camera -q -displayFieldChart $cam`;
        camera -e -displayFieldChart $value $cam;
    }
    else if($configType == "WireframeOnShaded")
    {
        if(!$index)
        $value = 1-`modelEditor -q -wireframeOnShaded $activeEditor`;
        modelEditor -e -wireframeOnShaded $value $activeEditor;
    }
    else if($configType == "IsolateSelRig")
    {
        string $panel = `modelEditor -q -panel $activeEditor`;
        MGP_IsolateSelectedRig_doit $panel;
    }
    else if($configType == "IsolateSelObj")
    {
        string $panel = `modelEditor -q -panel $activeEditor`;
        MGP_IsolateSelection_doit $panel;
    }
    else if($configType == "CancelIsolate")
    {
        string $panel = `modelEditor -q -panel $activeEditor`;
        MGP_CancelIsolation_doit $panel;    
    }
}
proc mgp_applyUserCamPresetToSingleCam (string $file, string $panel, string $cam)
{    
    if(!`filetest -f $file`)
    {
        return;
    }
    string $getData[] = `MGP_ReadFileArray $file`;
    //mgSnapshot_applyUserCamPresetToSingleCam_doit $getData $panel $cam;
}
proc mgp_applyUserCamPresetTo4Cams (string $file)
{    
  if(!`filetest -f $file`)
  {
        return;
  }
  
 global string $g_MGSnapshot_CreatePreviewEditorPanelPrefix;
  string $cams[] = `mgSnapshot_getAllSnapshotCamsViaModelEditors`;
    int $currentReadCamIndex = 0;
    string $presetInfoArray [] =`MGP_ReadFileArray $file`;
    string $cContents[];
    //now we apply the last one.
    //clear $cContents;
}

global proc MGP_UpdateStyleOptionMenu()
{
    global string $MGPicker_3DModelView_styleOM;
    if(!`optionMenu -q -ex $MGPicker_3DModelView_styleOM`)
    {
        return;
    }
    string $styles [] =`mgp_listExistedStyleNames`;
    string $mis[] = `optionMenu -q -itemListLong $MGPicker_3DModelView_styleOM`;
    //print $mis;
    if(size($mis))
    {
        for($mi in $mis)
        {
            deleteUI -menuItem $mi;
        }
    }
    for($each in $styles)
    {
        menuItem -p $MGPicker_3DModelView_styleOM -l $each;
    }
    //menuItem -p $MGPicker_3DModelView_styleOM -d 1;
    //
}
global proc MGP_Update3DCameraOptionMenu()
{
    string $camOM = "MGPicker_3DModelView_camOM";
    if(!`optionMenu -q -ex $camOM`)
    {
        return;
    }
    string $mis[] = `optionMenu -q -itemListLong $camOM`;
    if(size($mis))
    {
        for($mi in $mis)
        {
            deleteUI -menuItem $mi;
        }
    }
    string $usedCam = `mgp_getPicker3DPanelInitialCamera`;
  string $camShapes []=`ls -cameras`;
    string $cam [];clear $cam;
    for ($each in $camShapes)
    {
        $temp=`listRelatives -p $each`;
        $cam[size($cam)]=$temp[0];
    }
    int $cCamIndex = 1;
    int $currentCamIndex = $cCamIndex;
    for ($eachCam in $cam)
    {
        menuItem -p ($camOM) -l $eachCam;
        if($eachCam == $usedCam)
        {
            $currentCamIndex = $cCamIndex;
        }
        $cCamIndex ++;
    }   
  optionMenu -e -select $currentCamIndex $camOM;
  MGP_SwitchModelViewOM_CC;
}
global proc MGP_3DViewConfigMenu_TopCommand(int $mode)
//$mode 0 : all
//$mode 1: none
//$mode 2: geo
{
    string $editor = `MGP_get3DModelEditor`;
    if(!`modelEditor -q -ex $editor`)
    {
        return;
    }
    if(!$mode)
    {       
        modelEditor -e -allObjects 1 -cv 1 -hulls 1 -grid 1  -hud 1  $editor;
    }
    else
    {
        modelEditor -e -allObjects 0 -cv 0 -hulls 0 -grid 0 -hud 0 $editor;
      if($mode == 2)
      {
        modelEditor -e -polymeshes 1 -subdivSurfaces 1 -nurbsSurfaces 1 $editor;
      }
    }
}
global proc MGP_Update3DViewConfigMenu()
{
    if(!`popupMenu -q -ex MGPiker_3DView_ConfigMenu`)
    {
        return;
    }
    if(!`control -q -ex MGP_ShowTex_ITCB`)
    {
        return;
    }
    
    string $editor = `MGP_get3DModelEditor`;
    popupMenu -e -deleteAllItems -p MGPiker_3DView_ConfigBtn MGPiker_3DView_ConfigMenu;
    
  string $tempMenu = `popupMenu -p MGP_ShowTex_ITCB`;
  updateShowMenu $tempMenu   $editor "" ""; 
  //clear the isolate menuitems;
  string $ca[]=`popupMenu -q -itemArray $tempMenu`;
  int $menuLen = size($ca);
    menuItem -l "All" -p MGPiker_3DView_ConfigMenu -c "MGP_3DViewConfigMenu_TopCommand 0;MGP_RefocusOnPicker3DviewPanel;";
    menuItem -l "None" -p MGPiker_3DView_ConfigMenu  -c "MGP_3DViewConfigMenu_TopCommand 1;MGP_RefocusOnPicker3DviewPanel;";
    menuItem -l "Geometry" -p MGPiker_3DView_ConfigMenu  -c "MGP_3DViewConfigMenu_TopCommand 2;MGP_RefocusOnPicker3DviewPanel;";        
  if($menuLen >4)
  {
        string $lbl,$command;
        int $cb = 0, $sep = 0;
        for($i=4; $i<$menuLen; $i++)
        {
            $sep = `menuItem -q -d $ca[$i]`;
            if($sep)
            {
                menuItem -d 1 -p MGPiker_3DView_ConfigMenu;
                continue;
            }
            $lbl = `menuItem -q -l $ca[$i]`;
            $command = `menuItem -q -c $ca[$i]`;
            if(!`endsWith $command ";"`)
            {
                $command += ";";
            }
            $command += "MGP_RefocusOnPicker3DviewPanel;";
            $cb = `menuItem -q -checkBox $ca[$i]`;
            menuItem -p MGPiker_3DView_ConfigMenu -l $lbl -c  $command -checkBox $cb;
        }
      //deleteUI -menuItem $ca[0];
      //deleteUI -menuItem $ca[1];
  }
  deleteUI -menu $tempMenu;
}
global proc string MGP_GetTemp3DImagePlaneImagePath()
{
    string $td = `internalVar -utd`;
    return ($td + "MGPicker_Temp_ImagePlaneImage.png");
}
global proc string MGP_get3DModelPanel()
{   
    global string $MGPicker_3DModelPanel;
    return $MGPicker_3DModelPanel;
}
global proc string MGP_get3DModelEditor()
{   
    global string $MGPicker_3DModelPanel;
    return `modelPanel -q -modelEditor $MGPicker_3DModelPanel`;
}
proc mgp_preImageplane_setOptionVars ()
{
    if ( !`optionVar -exists freeImageWidth`) {
            optionVar -floatValue freeImageWidth 10.0;
    }
    if ( !`optionVar -exists freeImageHeight`) {
            optionVar -floatValue freeImageHeight 10.0;
    }
    if ( !`optionVar -exists freeImageMR`) {
            optionVar -intValue freeImageMR 1;
    }
}

proc string[] mgp_createImagePlane_doit (string $camera)                                          
{
    //Initialize the parameters
    mgp_preImageplane_setOptionVars();
    global string $MGPicker_3DModelPanelImagePlane;
    
    // Initialize the command's parameters
    float $width  = `optionVar -query freeImageWidth`;
    float $height = `optionVar -query freeImageHeight`;
    int   $mr      = `optionVar -query freeImageMR`;
    
    // create image plane
    string $newImagePlane[];
    
    string $attrName;
    
    
    //make sure it is legacy render not viewport 2.0, in viewport2.0, imageplane will not lock to camera.
    global string $MGPicker_3DModelPanel;
    setRendererInModelPanel base_OpenGL_Renderer $MGPicker_3DModelPanel;
    
    
    string $lookThruCamera = `lookThru -q`;
    int $v = `MGP_GetMayaVersionInt`;
    // create imageplane in underworld of the camera.
    // We will consider that if user(s) detach the image plane from the camera 
    // and the image plane will still respect the optionVars        
  if($v >= 2014)
  {
    string $okCam = $camera;
    //something in Maya2014, using transform name will issue error, so we switch to camera shape name after all.
    if(`nodeType $okCam` == "transform")
    {
        string $shapes[] = `listRelatives -s $okCam`;
        for($each in $shapes)
        {
            if(`nodeType $each` == "camera")
            {
                $okCam = $each;
            }
        }
    }
    
    /*
        if($v == 2013)
        {
            $newImagePlane = `imagePlane -width $width -height $height -maintainRatio $mr`;
            parent $newImagePlane[0] $okCam; 
        }   
        else
        {
            $newImagePlane = `imagePlane -camera $okCam -width $width -height $height -maintainRatio $mr`;
        }*/
        $newImagePlane = `imagePlane -camera $okCam -width $width -height $height -maintainRatio $mr`;
    }
    else
    {
        $newImagePlane[0] = `shadingNode -asUtility imagePlane`;

    // set the image plane type to image file
    setAttr ($newImagePlane[0] + ".type") 0;            
    setAttr ($newImagePlane[0] + ".width") $width;      
    setAttr ($newImagePlane[0] + ".height") $height;        
        
        cameraImagePlaneUpdate $camera $newImagePlane[0];
    }
    $newImagePlane[0] = `rename $newImagePlane[0] $MGPicker_3DModelPanelImagePlane`;    

    // make camera visible to ensure the image plane outline is drawn and selectable.
    string $parents[] = `listRelatives -parent $camera`;
    for ($item in $parents) 
    {
        showHidden $item;    
    } 
    return $newImagePlane;
}

global proc int MGP_make3DModelEditorImagePlane(string $image)
{
    if(!`filetest -f $image`)
    {
        return 0;
    }
    global int $MGPKR_OStype;
  global string $MGPicker_3DModelPanel;
  string $cam = `modelPanel -q -cam $MGPicker_3DModelPanel`;
    global string $MGPicker_3DModelPanelImagePlane;
    MGP_clear3DModelEditorImagePlane; 
    string $oldSel[] = `ls -sl`;
    
    string $ips[]=`mgp_createImagePlane_doit  $cam`;
    
    //rename $ips[0] $MGPicker_3DModelPanelImagePlane;
    //string $shapes[] = `listRelatives -s $MGPicker_3DModelPanelImagePlane`;
    setAttr ($ips[0] + ".imageName")   -type "string" $image;
    setAttr ($ips[0] + ".displayOnlyIfCurrent")  1;
    
    //setting alphaGain in my mac crash maya. Why?
    if($MGPKR_OStype != 1)
    {
        setAttr ($ips[0] + ".alphaGain")   0.8;
    }
  setAttr ($ips[0] + ".lockedToCamera") on; 
  if(size($oldSel))
  {
        catch (`select $oldSel`);
    }
    
    string $editor = `MGP_get3DModelEditor`;
  int $v = `MGP_GetMayaVersionInt`;
  if($v >= 2013)
  {
    modelEditor -e -imagePlane 1 $editor;
    }
    else
    {
    modelEditor -e -cameras 1 $editor;
    }
    return 1;
}
global proc int MGP_clear3DModelEditorImagePlane()
{
    global string $MGPicker_3DModelPanelImagePlane;
    string $olds[]=`ls -type "transform" ("*"+$MGPicker_3DModelPanelImagePlane+"*")`;
    for($old in $olds)
    {
        catch (`delete $old`);
    }
    int $v = `MGP_GetMayaVersionInt`;   
    if($v < 2013)
    {
        string $olds1[]=`ls -type "imagePlane" ("*"+$MGPicker_3DModelPanelImagePlane+"*")`;
        for($old1 in $olds1)
        {
            catch (`delete $old1`);
        }
    }
    print "\n";
    return 1;
}

proc mgp_initModelEditorViewportRender(string $editor)
{    
    if(`optionVar -ex "viewportRenderer"`)
    {
        int $v = `optionVar -q "viewportRenderer"`;
        if($v == 2)
        {
            modelEditor -e -rnm "vp2Renderer" $editor;
        }
    }
}
global proc int MGP_make3DviewPanelContent_Doit()
{
    global string $MGPicker_3DModelPanelLayout;
    //print ("MGP_make3DviewPanelContent_Doit: " + $MGPicker_3DModelPanelLayout+"\n");
    if(!`optionMenu -q -ex MGPicker_3DModelView_camOM`)
    {
        return 0;
    }
    global string $MGPicker_3DModelView_FormLay;
    if(!`layout -q -ex $MGPicker_3DModelView_FormLay`)
    {
        return 0;
    }
        global string $MGPicker_3DModelPanel;
        
    //global int $MGPKR_OStype;
    if(`modelPanel -q -ex $MGPicker_3DModelPanel`)
    {
        //if it is not macOS x:
            //if($MGPKR_OStype != 1)
            //{
            string $p = `modelPanel -q -p $MGPicker_3DModelPanel`;
            if(!`endsWith $p $MGPicker_3DModelPanelLayout`)
            {
                modelPanel -e -up $MGPicker_3DModelPanel;
                modelPanel -e -p $MGPicker_3DModelPanelLayout -mbv 0 $MGPicker_3DModelPanel;
            }
        //}
        /*
        formLayout -e 
            -ac $MGPicker_3DModelPanelLayout  "top" 3 MGPicker_3DModelView_camOM
            -af $MGPicker_3DModelPanelLayout  "left" 3
            -af $MGPicker_3DModelPanelLayout  "right" 0
            -af $MGPicker_3DModelPanelLayout  "bottom" 3 
            $MGPicker_3DModelView_FormLay;
        */
      string $bl = `modelPanel -q -bl $MGPicker_3DModelPanel`;
      layout -e -vis 0 $bl;
      fillEmptyPanes;   
        //print "\n"; 
      return 1;
    }
    else
    {
        modelPanel -p $MGPicker_3DModelPanelLayout -mbv 0 -label "MG-PickerStudio_3DPanel" $MGPicker_3DModelPanel;
    }
    string $editor = `MGP_get3DModelEditor`;
    mgp_initModelEditorViewportRender $editor;
    string $bl = `modelPanel -q -bl $MGPicker_3DModelPanel`;
    layout -e -vis 0 $bl;
    //$MGPicker_3DModelEditorName = $modelEditor;    
    modelEditor -e -displayAppearance smoothShaded $editor;  //-p $MGPicker_3DModelView_FormLay
        
    string $initCam = `mgp_getPicker3DPanelInitialCamera`;   
        mgp_switchModelViewCameraViaCameraTransform   $initCam;  
    //modelEditor -e -camera $initCam $MGPicker_3DModelEditorName;
    
    if(`optionMenu -q -ex MGPicker_3DModelView_camOM`)
    {
        formLayout -e 
            -ac $MGPicker_3DModelPanelLayout  "top" 3 MGPicker_3DModelView_camOM
            -af $MGPicker_3DModelPanelLayout  "left" 3
            -af $MGPicker_3DModelPanelLayout  "right" 0
            -af $MGPicker_3DModelPanelLayout  "bottom" 3 
            $MGPicker_3DModelView_FormLay;
    }
    print "\n"; 
    return 1;
}
global proc MGP_RefocusOnPicker3DviewPanel()
{   
    global string $MGPicker_3DModelPanel;
    if(`control -q -ex $MGPicker_3DModelPanel`)
    {
        setFocus $MGPicker_3DModelPanel;
    }
}

proc string mgp_make3DviewPanelContent(string $parentLayout)
{
    //print ("mgp_make3DviewPanelContent: " + $parentLayout + "\n\n\n");
    global string $MGPicker_3DModelPanelLayout;
    global string $MGPicker_3DModelPanel;
    string $result;
    setParent $parentLayout;
    
    //make the form layout:
    global string $MGPicker_3DModelView_FormLay;
    if(`layout -q -ex $MGPicker_3DModelView_FormLay`)
    {
        deleteUI -layout $MGPicker_3DModelView_FormLay;
    }
    $result = `formLayout -p $parentLayout $MGPicker_3DModelView_FormLay`;   
    $MGPicker_3DModelView_FormLay = $result;
       
    
    setParent $result;    
    //make style option menu:
    global string $MGPicker_3DModelView_styleOM;
    string $styleOM = `optionMenu -l "" $MGPicker_3DModelView_styleOM`;
        popupMenu;
        menuItem -l `MGP_MultiLanguage "pkr.updateMenu.lbl"` 
                    -c "evalDeferred (\"MGP_UpdateStyleOptionMenu;MGP_Update3DCameraOptionMenu;\");MGP_RefocusOnPicker3DviewPanel;"
                    MGP_UpdateStyleMenuMI;
    //now make the camera switch option menu:
    string $camLbl = `MGP_MultiLanguage "pkr.Cam"`;
    string $camOM = `optionMenu -l $camLbl
                                     -cc "MGP_SwitchModelViewOM_CC;MGP_RefocusOnPicker3DviewPanel;"  MGPicker_3DModelView_camOM`;   
        popupMenu;
        menuItem -l `MGP_MultiLanguage "pkr.updateMenu.lbl"` 
                    -c "evalDeferred (\"MGP_UpdateStyleOptionMenu;MGP_Update3DCameraOptionMenu;\");MGP_RefocusOnPicker3DviewPanel;"
                    MGP_UpdateCameraMenuMI; 
   
      string $viewCfgBtn = `iconTextButton -i "rightArrow.png" -w 18 -h 18 MGPiker_3DView_ConfigBtn`;     
                popupMenu -b 1 -postMenuCommand "MGP_Update3DViewConfigMenu" MGPiker_3DView_ConfigMenu;
                
      string $SmallBtnRL = `rowLayout -nc 4 -cw4 16 16 2 16`;
                    
                        /*
                    $icon = `mgp_icon "enableHUD.bmp"`;
                    $ann = `MG_DualLan "poseAnimLib.snapshotUI.viewConfig.hud.ann"`;
                    $ann += `MG_DualLan "poseAnimLib.snapshotUI.viewConfig.doubleClick.ann"`;
                    iconTextButton -w 16 -h 16 
                                            -image $icon -ann $ann
                                            -c "MGP_Change3DCamConfig \"HUD\""
                                            ;*/
                    /*                        
                    $icon = `mgp_icon "showControler.png"`;
                    $ann = `MG_DualLan "poseAnimLib.snapshotUI.viewConfig.nurbsCurve.ann"`;
                    iconTextButton -w 16 -h 16 
                                            -image $icon -ann $ann
                                            -c "MGP_Change3DCamConfig \"NurbsCurve\""
                                            MGP_ShowCurve_ITCB;
                    $icon = `mgp_icon "enableNurbsSurface.bmp"`;
                    $ann = `MG_DualLan "poseAnimLib.snapshotUI.viewConfig.nurbsSurface.ann"`;
                    iconTextButton -w 16 -h 16 
                                            -image $icon -ann $ann
                                            -c "MGP_Change3DCamConfig \"NurbsSurface\""
                                            MGP_ShowNurbsGeo_ITCB;*/
                    //separator -w 2 -h 16 -horizontal 0 -style "in";
                        /*
                    $icon = `mgp_icon "selHightlighting.png"`;
                    $ann = `MG_DualLan "poseAnimLib.snapshotUI.viewConfig.highlight.ann"`;
                    $ann += `MG_DualLan "poseAnimLib.snapshotUI.viewConfig.doubleClick.ann"`;
                    iconTextButton -w 16 -h 16 
                                            -image $icon -ann $ann
                                            -c "MGP_Change3DCamConfig \"SelectHightlight\""
                                            MGP_SelHilite_ITCB;*/
                    $icon = `mgp_icon "Textured.png"`;     
                    $ann = `MGP_MultiLanguage "pkr.texture.ann"`;               
                    iconTextButton -w 18 -h 18 
                                            -image $icon -ann $ann
                                            -c "MGP_Change3DCamConfig \"Texture\";MGP_RefocusOnPicker3DviewPanel;"
                                            MGP_ShowTex_ITCB;
                    $icon = `mgp_icon "FieldChart.png"`;  
                    $ann = `MGP_MultiLanguage "pkr.fieldChart.ann"`;
                    iconTextButton -w 18 -h 18 
                                            -image $icon  -ann $ann
                                            -c "MGP_Change3DCamConfig \"FieldChart\";MGP_RefocusOnPicker3DviewPanel;" 
                                            MGP_WireOnShaded_ITCB;                      
                   /*                         
                    $icon = `mgp_icon "wireOnShaded.png"`;  
                    $ann = `MG_DualLan "poseAnimLib.snapshotUI.viewConfig.wire.ann"`;
                    $ann += `MG_DualLan "poseAnimLib.snapshotUI.viewConfig.doubleClick.ann"`;  
                    iconTextButton -w 16 -h 16 
                                            -image $icon  -ann $ann
                                            -c "MGP_Change3DCamConfig \"WireframeOnShaded\"" 
                                            MGP_WireOnShaded_ITCB;*/
                    separator -w 2 -h 16 -horizontal 0 -style "in";
                    $icon = `mgp_icon "IsolateSelected.png"`;                              
                    iconTextButton -w 18 -h 18 
                                            -image $icon                                         
                                            MGP_Isolate_ITCB;
                            popupMenu -button 1;
                            $text = `MGP_MultiLanguage "pkr.isolateSelRig.lbl"`;
                            menuItem -l $text -c "MGP_Change3DCamConfig \"IsolateSelRig\";MGP_RefocusOnPicker3DviewPanel;" MGP_IsolateRig_MI;
                            $text = `MGP_MultiLanguage "pkr.isolateSelObj.lbl"`;
                            menuItem -l $text -c "MGP_Change3DCamConfig \"IsolateSelObj\";MGP_RefocusOnPicker3DviewPanel;" MGP_IsolateObj_MI;
                            menuItem -d 1;
                            $text = `MGP_MultiLanguage "pkr.isolateCancel.lbl"`;
                            menuItem -l $text -c "MGP_Change3DCamConfig \"CancelIsolate\";MGP_RefocusOnPicker3DviewPanel;" MGP_IsolateCancel_MI;
                    /*separator -w 2 -h 16 -horizontal 0 -style "in";   
                    iconTextButton -w 16 -h 16 
                                        -image ($g_PoseAnim_IconFolder+"timeLineToggle.png")    
                                        -c "MGP_Change3DCamConfig \"Timeline\""                                                 
                                        MGP_ToggleTimeline_ITCB;*/
                    //setParent..;  
    
    setParent $result;  
    
    $MGPicker_3DModelPanelLayout = `paneLayout -p $MGPicker_3DModelView_FormLay -configuration  "single" $MGPicker_3DModelPanelLayout`;
    //make the form 3d model editor:  
    MGP_make3DviewPanelContent_Doit;// $MGPicker_3DModelPanelLayout;         
                    
    MGP_UpdateStyleOptionMenu;
    MGP_Update3DCameraOptionMenu;  
    formLayout -e 
            -af $camOM  "top" 0
            -af $camOM  "left" 3
            -ac $camOM  "right" 1 $styleOM
            
            -af $styleOM  "top" 0
            -ac $styleOM  "right" 1 $viewCfgBtn //MGP_Snapshot_CamPreset_OM        
            
            //-af MGP_Snapshot_CamPreset_OM  "top" 3
            //-ac MGP_Snapshot_CamPreset_OM  "right" 3 $SmallBtnRL
            
            -af $viewCfgBtn "top" 1
            -ac $viewCfgBtn  "right" -5 $SmallBtnRL
            
            -af $SmallBtnRL "top" 0
            -af $SmallBtnRL  "right" 1
            
            -ac $MGPicker_3DModelPanelLayout  "top" 3 $camOM
            -af $MGPicker_3DModelPanelLayout  "left" 3
            -af $MGPicker_3DModelPanelLayout  "right" 0
            -af $MGPicker_3DModelPanelLayout  "bottom" 3      
            
            $result;
            
    return $result;
}
global proc string MGP_make3DPanelForMGPicker(string $parentLayout)
{
    string $p = `setParent -q`;
    string $result = `mgp_make3DviewPanelContent $parentLayout`;
    if(size($p))
    {
        setParent $p;
    }
    return $result;
}

global proc MGP_DeleteItemMenu()
{
    string $prefix = "MGPicker_ItemPopupMenu";
    string $rightMenuName = ($prefix+"_RightPM");
  string $leftMenuName = ($prefix+"_LeftPM");
  string $menu[] = {$rightMenuName,$leftMenuName};
  for($m in $menu)
  {
      if(`popupMenu -q -ex $m`)
      {
        //string $items[]=`popupMenu -q -ia $m`;
        eval ("deleteUI -menu " + $m);
        //eval ("deleteUI -menu " + $m);
      }
    }
}
global proc string MGP_makeChannelBoxForAttributePanel(string $parentLayout)
{
    string $p = `setParent -q`;
    global string $MGPicker_AttributePanel_ChannelBoxName;
    string $result = $MGPicker_AttributePanel_ChannelBoxName;
    if(`modelPanel -q -ex $MGPicker_AttributePanel_ChannelBoxName`)
    {
        channelBox -e -up $MGPicker_AttributePanel_ChannelBoxName;
        $result = `channelBox -e -p $parentLayout $MGPicker_AttributePanel_ChannelBoxName`;
    }
    else
    {
        $result = `channelBox -p $parentLayout $MGPicker_AttributePanel_ChannelBoxName`;
    }
    if(size($p))
    {
        if(catchQuiet(`setParent $p`))
        {
            print "\n";
        }
    }
    return $MGPicker_AttributePanel_ChannelBoxName;
}
/*
global proc string MGP_makeModelEditorForPickerPanel()
{
    string $editor = `MGP_get3DModelEditor`;
    if(`modelEditor -q -ex $editor`)
    {
        return $editor;
    }
    if(!`layout -q -ex  MGPicker_mainFormLayout`)
    {
        return "";
    }
    string $p = `setParent -q`;
    string $result = `modelEditor -p MGPicker_mainFormLayout $MGPicker_3DModelEditorName`;
    if(size($p))
    {
        setParent $p;
    }
    
    mgp_initModelEditorViewportRender $editor;
    return $result;
}
*/
proc mgp_switchToVp2AtMaya2017orLater()
{
    if(!`mgp_isMaya2017OrLater`)
    {
        return;
    }
    string $editor = `MGP_get3DModelEditor`;
    if(!`modelEditor -q -ex $editor`)
    {
        return;
    }
    string $render = `modelEditor -q -rnm  $editor`;
    if($render == "base_OpenGL_Renderer" || $render == "hwRender_OpenGL_Renderer")
    {
        modelEditor -edit -rnm "vp2Renderer" $editor;
        MGP_ScriptEditorFeedback(1, `MGP_MultiLanguage "pkr.3dView.switchVP2.war"`);
    }
}

global proc int MGP_prepare3DViewForSnapshoting(int $w, int $h)
{
    string $editor = `MGP_get3DModelEditor`;
    if(!`modelEditor -q -ex $editor`)
    {
        MGP_make3DviewPanelContent_Doit;
    }
    string $cam = `modelEditor -q -cam $editor`;
    if(!`size($cam)`)
    {
        return 0;
    }
    if($w>0 && $h>0)
    {
        float $fw = $w;
        if(!$h)
        {
            $h = 1;
        }
        float $ratio = $fw/$h;
        //print $ratio;
        setAttr defaultResolution.deviceAspectRatio $ratio; 
        camera -e -displayFilmGate 0 -displayResolution 1 -displayGateMask 1 -filmFit fill $cam;
        if($w >= $h)
        {
            camera -e -filmFit horizontal $cam;
        }
        else
        {
            camera -e -filmFit vertical $cam;
        }
    }
    /*
    modelEditor -e -allObjects 0 $modelView;
    modelEditor -e -polymeshes 1 -nurbsSurfaces 1 -subdivSurfaces 1 
                -manipulators 1 -grid 0 -selectionHiliteDisplay 1 -headsUpDisplay 0 $modelView;
    */
    mgp_switchToVp2AtMaya2017orLater;
    headsUpMessage `MGP_MultiLanguage "pkr.3dViewPrepared"`;
    return 1;
}
proc int mgp_makeBGImageFrom3DView(string $filePath, int $w, int $h)
{
    string $editor = `MGP_get3DModelEditor`;
    if(!`modelEditor -q -ex $editor`)
    {
        MGP_make3DviewPanelContent_Doit;
    }
    modelEditor -e -activeView $editor;
    global int $gMGPicker_MayaVerInt;
    int $result = 0;
    float $fr = `currentTime -q`;
    if($gMGPicker_MayaVerInt >= 2013) 
    {  
        mgp_switchToVp2AtMaya2017orLater;
        playblast  -format "image" -forceOverwrite
           -completeFilename  $filePath 
           -offScreen 
           -percent 100 
           -compression "bmp" 
           -showOrnaments 0
           -frame  $fr 
           -viewer 0
           -widthHeight $w $h;
    }
    else if($gMGPicker_MayaVerInt < 2013)      
    {        
        string $fn = `basenameEx $filePath`;
        string $dir = `dirname $filePath` +"/";  
        /*   
         if($gMGPicker_MayaVerInt == 2012)  
         {
            string $tempFileName = ($dir + $fn + ".iff");
            playblast  -format "iff" -forceOverwrite
               -filename  $tempFileName
               -framePadding 0
               -offScreen 
               -percent 100 
               -compression "bmp" 
               -showOrnaments 0
               -frame  $fr 
               -viewer 0
               -widthHeight $w $h;
              if(`filetest -f $filePath`)
              {
                  sysFile -delete $filePath;
              }
              sysFile -rename $tempFileName $filePath;
        }
        else    //maya 2011 and earilier version.
        {*/
            
            //print ($w+","+$h+"\n");
            string $tempFileName = ($dir + $fn);
            //print ($tempFileName+"\n");
            playblast  -format "iff" -forceOverwrite
               -filename  $tempFileName
               -framePadding 0
               -offScreen 
               -percent 100 
               -showOrnaments 0
               -frame  $fr 
               -viewer 0
               -widthHeight $w $h;
           //print ($tempFileName+"\n");
           //print ($filePath+"\n");
            $tempFileName += (".0.iff");
                system ("imgcvt \"" + $tempFileName+ "\" \"" + $filePath+"\"");
            //delete the old iff image
            sysFile -delete $tempFileName;
        //}    
    }
    if(!`filetest -f  $filePath`)
    {
        return 0;
    }
    return 1;
}
proc mgp_prepareVisualStyleForSnapshoting(int $visualMode)
//$visualMode 0: normal mode
//$visualMode 1: Silluate mode
{
    string $editor = `MGP_get3DModelEditor`;
    string $modelView = $editor;
    string $ambLight = "MGPicker_TempNULLLight";
    if(`objExists $ambLight`)
    {
        delete $ambLight;
    }
    /*
    int $nurbsSurface = `modelEditor -q -nurbsSurfaces $modelView`;
    int $subDSurface = `modelEditor -q -subdivSurfaces $modelView`;
    int $hilite = `modelEditor -q -selectionHiliteDisplay $modelView`;
    modelEditor -e -allObjects 0 $modelView;
    modelEditor -e -polymeshes 1 -nurbsSurfaces $nurbsSurface -subdivSurfaces $subDSurface 
                -manipulators 0 -grid 0 -selectionHiliteDisplay $hilite -headsUpDisplay 0 
                $modelView;
     */
    if(!`modelEditor -q -ex $modelView`)
    {
        return;
    }
    if(!$visualMode)
    {
        modelEditor -e -dl "default" $modelView;
    }
    else
    {
        string $lights[]=`ls -type "light"`;
        if(size($lights))
        {   
            $ambLight = `ambientLight -n $ambLight -intensity 0`;
                select $ambLight;
                modelEditor -e -dl "selected" $modelView;    
        }  
        else
        {
            modelEditor -e -dl "all" $modelView;   
        }  
    }
}
proc string mgp_getSnapshotStyleName()
{
    global string $MGPicker_3DModelView_styleOM;
    if(!`optionMenu -q -ex $MGPicker_3DModelView_styleOM`)
    {
        return "";
    }
    return `optionMenu -q -value $MGPicker_3DModelView_styleOM`;
}
global proc string MGP_GetTrailingDigitStr(string $str)
{
  if(!size($str))
  {
    return "";
  }
  return `match "([0-9])+$" $str`;
}
global proc string MGP_GetValidNonDupFileName(string $basename, string $ext , string $initUntitledName, string $existsFileList[])
{
    if(size($ext) && !`startsWith $ext "."`)
    {
        $ext = "." + $ext;
    }
    string $validName = `MGP_ValidateFileNameString $basename`;
    if(!`size $validName`)
    {
        $validName = $initUntitledName;
    }
    //print $bookmarks;
    string $realFileName = $validName+$ext;
    string $version = `MGP_GetTrailingDigitStr $validName`;
    int $verInt;
    int $versonSize;
    if(size($existsFileList))
    {
        while(stringArrayContains ($realFileName,$existsFileList))
        {
            if(!size($version)) 
            {
                $version = "1";
            }
            else
            {
                $verInt = $version;  
                $verInt ++;
                $versonSize = size($version);
                $validName = `substring $validName 1 (size($validName)-$versonSize)`;
                $version =  $verInt;
            }
            $validName += $version;
            $realFileName = $validName+$ext;
        }
        return $realFileName;
    }
    else
    {
        return $realFileName;
    }
}
proc string mgp_getNonDuplicateFilename(string $basename, string $ext,string $initUntitledName,string $exFiles[])
{
    //string $dir = `MGP_getPkrDataDirectory`;
    //string $exFiles[];
    return `MGP_GetValidNonDupFileName $basename $ext $initUntitledName $exFiles`;
}

proc string mgp_getSnapshotFullPath(string $fileName)
{
    if(!`endsWith $fileName ".bmp"`)
    {
        if(!`endsWith $fileName "_PkrImage"`)
        {
            $fileName += "_PkrImage";
        }
        $fileName += ".bmp";
    }
    else
    {
        return $fileName;
    }
    return $fileName;
}
proc string mgp_getSnapshotNonDupFullPath(string $fullPath)
{
    
    string $dir = `dirname $fullPath`+"/";
    string $exFiles[] = `getFileList -fld $dir -fs "*.bmp"`;
    string $baseName  = `basename $fullPath ""`;
    string $fileName = `mgp_getNonDuplicateFilename $baseName ".bmp" "" $exFiles`;
    $fullPath = ($dir + $fileName);    
    return $fullPath;
}
proc int[] mgp_getPreProcessOptionFromStyleStringList(string $styleList[])
{
    int $result[];
    for($each in $styleList)
    {
        string $data[]=`mgp_getLabelValuepair $each`;
        if($data[0] == "antialiasing")
        {
            $result[0] = $data[1];
        }
        else if($data[0] == "silhouette")
        {
            $result[1] = $data[1];
        }
    }
    return $result;
}

global proc string MGP_snapshot(string $pickerFullPathExceptSuffix, int $w, int $h)
{
    //print ("input file: "+$pickerFullPathExceptSuffix+"\n");
    string $fullPath = `mgp_getSnapshotFullPath $pickerFullPathExceptSuffix`;
    string $appName = `MGP_getAppName`;
    if(`filetest -f $fullPath`)
    {
        string $override = `MGP_MultiLanguage "pkr.override"`;
        string $append = `MGP_MultiLanguage "pkr.versionUp"`;
        string $cancel = `MGP_MultiLanguage "pkr.cancel"`;
        string $msg = `MGP_MultiLanguage "pkr.override.msg"`;
        string $answer = `confirmDialog -t $appName  -m ($msg+"\n\n"+$fullPath)
                            -button $override 
                            -button $append 
                            -button $cancel 
                            -defaultButton $append 
                            -dismissString $cancel`;
        if($answer == $cancel)
        {
            return "";
        }
        else if($answer == $append)
        {
            $fullPath = `mgp_getSnapshotNonDupFullPath $fullPath`;
        }
    }
    string $styleName = `mgp_getSnapshotStyleName`;
    string $styleConfig[] = MGP_readSnapshotStyleViaName($styleName);
    int $preprocessOptions[] = `mgp_getPreProcessOptionFromStyleStringList $styleConfig`;
    int $pw = $w;
    int $ph = $h;
    if($preprocessOptions[0])
    {
        $pw *= 2;
        $ph *= 2;
    }
    if($preprocessOptions[1])
    {
        mgp_prepareVisualStyleForSnapshoting 1;
    }
    else
    {
        mgp_prepareVisualStyleForSnapshoting 0;
    }
    if(!`mgp_makeBGImageFrom3DView $fullPath $pw $ph`)
    {
        return "";
    }
    mgp_restoreLastRenderResolution;
    string $cStyleFile = MGP_getSnapshotStyleFilePathViaName (`mgp_getSnapshotStyleName`);
    //print ("style file: "+$cStyleFile+"\n");
    //print ("image file: "+$fullPath+"\n");
    MGImageProcesser -style $cStyleFile $fullPath;
    if($preprocessOptions[0])
    {
        //print "Goona resize the image!\n";
        MGImageProcesser -resize ($w+":"+$h) $fullPath;
    }
    mgp_prepareVisualStyleForSnapshoting 0;
    return $fullPath;
}

global proc int MGP_PrepareAttributeNugerContext(string $attrInfo)
{
    global string $MGPicker_AttributeNudger_Context;
    global string $MGPicker_AttributeNudger_Command;
    if (!`contextInfo -ex $MGPicker_AttributeNudger_Context`)
    {
        string $cmd = ($MGPicker_AttributeNudger_Command + " "+$MGPicker_AttributeNudger_Context);
        eval $cmd;
    }
    if (!`contextInfo -ex $MGPicker_AttributeNudger_Context`)
    {
        return 0;
    }
    string $cmd = ($MGPicker_AttributeNudger_Command + " -e -attribute \""+$attrInfo+"\" "+$MGPicker_AttributeNudger_Context); //-markClean 1 
    eval $cmd;
    //print ($attrInfo+"\n");
    setToolTo $MGPicker_AttributeNudger_Context;
    return 1;
}
global proc MGP_ResetAttributeNugerContext()
{
    global string $MGPicker_AttributeNudger_Context;
    if (!`contextInfo -ex $MGPicker_AttributeNudger_Context`)
    {
        return;
    }
    global string $MGPicker_AttributeNudger_Command;
    string $cmd = ($MGPicker_AttributeNudger_Command + " -e -reset "+$MGPicker_AttributeNudger_Context); //-markClean 1 
    eval $cmd;
}
global proc MGP_deleteAttributeNudgerContext()
{
    global string $MGPicker_AttributeNudger_Context;
    if (!`contextInfo -ex $MGPicker_AttributeNudger_Context`)
    {
        return;
    }
    //global int $MGTools_2011_orNot;
    
        global string $gSelect;
        setToolTo $gSelect;
    //  if(!$MGTools_2011_orNot)
    //  {
                //after 2011 it is buggy to delete a context!!!
    //      deleteUI -toolContext  $MGPicker_AttributeNudger_Context;  
    //  }
    global string $gNonSacredToolWidget;            
    string $vacantPix = "vacantCell.png";   
    string $currentPix =`toolButton -q -i1 $gNonSacredToolWidget`;
    global string $gNonSacredTool;
    if($gNonSacredTool == $MGPicker_AttributeNudger_Context)
    {
        toolButton -edit -enable false 
                -i1 $vacantPix $gNonSacredToolWidget;               
        $gNonSacredTool="";
    }
}
global proc MGP_uninstallPlugin_Callback()
{  
    global string $MGPicker_DockControlName;
    if(`control -q -ex $MGPicker_DockControlName`)
    {
        deleteUI -control $MGPicker_DockControlName;
    }
    global string $MGPicker_WindowName;
    if(`window -q -ex $MGPicker_WindowName`)
    {
        deleteUI $MGPicker_WindowName;
    }
}


global proc string [] MGP_GetPredifinedPanelPresets()  //the order of the list also decide the order of panel creation.
{
    string $presets[] =  {"Body","Facial","Deformer","Lipsync","Poses","Body_Poses","Facial_Poses","Hand_Poses",
                                            "Accessary","Other","Miscellaneous","Main"};
    return $presets;
}
global proc MGP_SwitchToTool(int $mode)
//$mode 0: do nothing;
//$mode 1: switch to translate;
//$mode 2: switch to rotate;
//$mode 3: switch to scale;
{
  global string $gMove;
    global string $gRotate;
    global string $gScale;
    if($mode == 1)
    {
        setToolTo $gMove;
    }
    else if($mode == 2)
    {
        setToolTo $gRotate;
    }
    if($mode == 3)
    {
        setToolTo $gScale;
    }
}
global proc int MGP_isNodeReadonly(string $node)
{
    if(!size($node))
    {
        return 1;
    }
    if(!`objExists $node`)
    {
        return 0;
    }
  int $isRef = `referenceQuery -isNodeReferenced $node`;
  if($isRef)
  {
    return 1;
  }
  //print $node;
  int $locked[] = `lockNode -q -lock $node`;
  return $locked[0];
}
global proc string MGP_GetPickerFilePathFromNode(string $nodeName)
{
    if(!`objExists $nodeName`)
    {
        return "";
    }
    global string $MGPicker_SceneDataNodeType;
    global string $MGPicker_SceneData_PickerFilePathAttr;
    if(`nodeType $nodeName` != $MGPicker_SceneDataNodeType)
    {
        //MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.node.notPickerNode"` 1;
        return "";
    }
    if(!`attributeExists $MGPicker_SceneData_PickerFilePathAttr $nodeName`)
    {
        return "";
    }
    return `getAttr ($nodeName+"."+$MGPicker_SceneData_PickerFilePathAttr)`;
}
global proc int MGP_ExportFilePathToNode(string $nodeName, string $filePath)
{
    string $pickerName = `basenameEx $filePath`;
    if(!`objExists $nodeName`)
    {
        return `MGP_StorePickerWithScene $nodeName "" "" 1 $filePath`;
    }
    global string $MGPicker_SceneData_PickerFilePathAttr;
    /*
    global string $MGPicker_SceneData_NameAttr;
    global string $MGPicker_SceneData_NsAttr;
    if(!`attributeExists $MGPicker_SceneData_NameAttr $nodeName`)
    {
        addAttr -dt "string" -ln $MGPicker_SceneData_NameAttr $nodeName;
    }
    if(!`attributeExists $MGPicker_SceneData_NsAttr $nodeName`)
    {
        addAttr -dt "string" -ln $MGPicker_SceneData_NsAttr $nodeName;
    }
    */
    if(!`attributeExists $MGPicker_SceneData_PickerFilePathAttr $nodeName`)
    {
        addAttr -dt "string" -ln $MGPicker_SceneData_PickerFilePathAttr $nodeName;
    }
    //setAttr -type "string" ($nodeName+"."+$MGPicker_SceneData_NameAttr) $pickerName;
    //setAttr -type "string" ($nodeName+"."+$MGPicker_SceneData_NsAttr) $pickerName;
    setAttr -type "string" ($nodeName+"."+$MGPicker_SceneData_PickerFilePathAttr) $filePath;
    return 1;
}
global proc string[] MGP_GetPickerFilePathFromSelection()
{
    string $sel[]=`ls -sl`;
    for($each in $sel)
    {
        string $path = `MGP_GetPickerFilePathFromNode $each`;
        if(size($path))
        {
            return {$each, $path};
        }
    }    
    return {};
}
global proc int MGP_StorePickerWithScene(string $pickerName, string $ns, string $data, int $forceOverride, string $pickerFilePath)
{
    
    global string $MGPicker_SceneData_NameAttr;
    global string $MGPicker_SceneData_NsAttr;
    global string $MGPicker_SceneData_DataAttr;
    global string $MGPicker_SceneData_PickerFilePathAttr;
    
    global string $MGPicker_SceneDataNodeType;
    global string $MGPicker_SceneDataSuffix;
    string $name = $pickerName;
    /*
    if(!`endsWith $name $MGPicker_SceneDataSuffix`)
    {
        $name += $MGPicker_SceneDataSuffix;
    }
    */
    string $appName = `MGP_getAppName`;
    string $ok = "OK";
    if(`objExists $name`)
    {
            if(!$forceOverride)
            {
            string $cancel = `MGP_MultiLanguage "pkr.cancel"`;
            string $msg = `MGP_MultiLanguage_rep1 "pkr.overrideNode.war" $name`;
            string $answer = `confirmDialog -t $appName 
                                    -m $msg
                                    -button $ok -button $cancel
                                    -defaultButton $cancel -dismissString $cancel`;
            if($answer != $ok)
            {
                return 0;
            }
            else
            {
                delete $name;
            }
        }
        else
        {
            delete $name;
            string $msg = `MGP_MultiLanguage_rep1 "pkr.OverridedNode.rep" $name`;
                MGP_ScriptEditorFeedback($msg,0);
        }
    }
    createNode $MGPicker_SceneDataNodeType -n $name;
    string $nameAttr = $MGPicker_SceneData_NameAttr;
    string $nsAttr = $MGPicker_SceneData_NsAttr;
    string $dataAttr = $MGPicker_SceneData_DataAttr;
    string $filepathAttr = $MGPicker_SceneData_PickerFilePathAttr;
    addAttr -dt "string" -ln $filepathAttr;
    addAttr -dt "string" -ln $nameAttr;
    addAttr -dt "string" -ln $nsAttr;
    addAttr -dt "string" -ln $dataAttr;
    setAttr -type "string" ($name+"."+$nameAttr) $pickerName;
    setAttr -type "string" ($name+"."+$nsAttr) $ns;
    setAttr -type "string" ($name+"."+$dataAttr) $data;
    setAttr -type "string" ($name+"."+$filepathAttr) $pickerFilePath;
    
    setAttr -l 1 ($name+"."+$dataAttr);
    string $msg = `MGP_MultiLanguage_rep1 "pkr.storeNode.done.rep" $name`;
    MGP_ScriptEditorFeedback($msg,0);
    /*
    confirmDialog -t $appName -m ("The picker data has been written to scene with the node: "+$name)
                                -button $ok;*/
    return 1;                            
}
global proc string MGP_GetScenePathFromNode(string $node)
{
    if(!size($node))
    {
        return "";
    }
    if(!`objExists $node`)
    {
        return "";
    }
    if(`referenceQuery -isNodeReferenced $node`)
    {
            string $Refname =`referenceQuery -topReference -referenceNode $node`;
            string $path =`referenceQuery -filename  $Refname`;
            return $path;
    }
    else
    {
        return `file -q -sn`;
    }
}
global proc string [] MGP_ReadPickerNodeData(string $node)
//result[0]: node name
//result[1]: picker name
//result[2]: namespace
//result[3]: data
{
        if(!`objExists $node`)
    {
        return {};
    }
    global string $MGPicker_SceneData_NameAttr;
    global string $MGPicker_SceneData_NsAttr;
    global string $MGPicker_SceneData_DataAttr;
    
    //get picker name attr:
    if(!`attributeExists $MGPicker_SceneData_NameAttr $node`)
    {
        return {};
    }
    $pickerName = getAttr ($node+"."+$MGPicker_SceneData_NameAttr);
    //get namespace:
    $ns = `MGP_GetNamespaceViaObj $node`;
    if(!size($ns))
    {
        if(!`attributeExists $MGPicker_SceneData_NsAttr $node`)
        {
            return {};
        }
        $ns = getAttr ($node+"."+$MGPicker_SceneData_NsAttr);
    }
    //get data:
    if(!`attributeExists $MGPicker_SceneData_DataAttr $node`)
    {
        return {};
    }
    $data = getAttr ($node+"."+$MGPicker_SceneData_DataAttr);
    string $result[];
    $result[0] = $node;
    $result[1] = $pickerName;
    $result[2] = $ns;
    $result[3] = $data;
    return $result;
}
global proc MGP_ActiveOrOpenPickerNode(string $node)
{
    //print "MGP_ActiveOrOpenPickerNode\n";
    if(!`objExists $node`)
    {
        MGP_ScriptEditorFeedback `MGP_MultiLanguage_rep1 "pkr.pkrNode.notexist.war" $node` 2;//("The picker node: "+$node+" not exist.")
        return;
    }   
    
        string $datas[] =`MGP_ReadPickerNodeData $node`;
    if(`size $datas` != 4)
    {
            MGP_ReadPickerFromScene_MGAndOther $node 0;
        return;
    }    
    MGPicker -e -readScenePicker $datas[0] $datas[1] $datas[2] $datas[4];
}
proc int mgp_loadPickerFileIfNotLoadedAndEditNamespace(string $file, string $ns, int $editNamespace)
{
    if(!`MGPicker -q -activate $file $ns`)  //if exist, we active it, if not, we open it.
  {
    if(`MGPicker -e -readPickerFile $file 1`)  //if is not loaded, we still open it!
    {
            if($editNamespace)
            {
                MGPicker -e -namespace $ns;
            }
            return 1;
    }
    else
    {
        return  0;
    }
    }
  return 1;
}
global proc MGP_ActiveOrOpenProjectPicker(string $pickerDir)
{
    global string $MGPicker_pickerFileExtension;
    string $pickers[]=`getFileList -fld $pickerDir -fs ("*"+$MGPicker_pickerFileExtension)`;
    //print ($pickerDir+"\n");
    //print $pickers;
    if(!size($pickers))
    {
        global string $MGPicker_AppName;
        confirmDialog -title $MGPicker_AppName -m (`MGP_MultiLanguage "pkr.noDataFound.war"`+" "+$pickerDir) -button "OK";
        return;
    }
    string $file = ($pickerDir+$pickers[0]);
    //if(`MGPicker -q -pickerLoaded $file $ns`)
    //{
    MGPicker -e -readPickerFile $file 0;
    //}
}
global proc MGP_UpdateProjectPickerMenu(string $pickerProjectDir, string $mi)
{
    menu  -e -deleteAllItems $mi;
    string $folders[]=`mgp_ListAllSubFolders $pickerProjectDir`;
    for($f in $folders)
    {
        menuItem -p $mi -l $f -c ("MGP_ActiveOrOpenProjectPicker \""+$pickerProjectDir+$f+"/\"");
    }
}
proc int mgp_readSceneMGPickerNode(string $node)
{
        //print "mgp_readSceneMGPickerNode\n";
    global string $MGPicker_SceneData_NameAttr;
    global string $MGPicker_SceneData_NsAttr;
    global string $MGPicker_SceneData_DataAttr;
    global string $MGPicker_SceneData_PickerFilePathAttr;
    //get picker name attr:
    if(!`attributeExists $MGPicker_SceneData_NameAttr $node`)
    {
        return 0;
    }
    string $pickerName = getAttr ($node+"."+$MGPicker_SceneData_NameAttr);
    //get namespace:
    string $ns = `MGP_GetNamespaceViaObj $node`;
    string $nsInPickerNode = $ns;
    if(`attributeExists $MGPicker_SceneData_NsAttr $node`)
    {
        $nsInPickerNode = `getAttr ($node+"."+$MGPicker_SceneData_NsAttr)`;
    }
    
    if(!size($ns))
    {
        if(size($nsInPickerNode))
        {
            $ns = $nsInPickerNode;
        }
    } 
    if(`attributeExists $MGPicker_SceneData_PickerFilePathAttr $node`)
    {
        string $filePath = `getAttr ($node+"."+$MGPicker_SceneData_PickerFilePathAttr)`;
        $filePath = `MGPickerService -q -resolvePath $filePath $node`;
        if(size($filePath))
        {
            if(`MGPicker -e -readPickerFile $filePath 1`)  //if is loaded, we still open it!
            {
                MGPicker -e -namespace $ns;
                MGPicker -e -appendRecentPickerNode $node;  //still we add recent opened node list!
                return 1;
            }
            else
            {
                MGP_ScriptEditorFeedback(`MGP_MultiLanguage_rep1 "pkr.loadfileFromNode.war" $filePath`, 1);
            }
        }
    }
    //get data:
    if(!`attributeExists $MGPicker_SceneData_DataAttr $node`)
    {
        return 0;
    }
    string $data = getAttr ($node+"."+$MGPicker_SceneData_DataAttr);
    MGPicker -e -readScenePicker $node $pickerName $ns $data;
    return 1;
}

global proc MGP_ReadAllPickerFromScene()   //used for picker qt ui, in the menu.
{    
    //print "MGP_ReadAllPickerFromScene!";
    //READ MGPicker nodes first:
    global string $MGPicker_SceneDataNodeType;    
    string $nodes[]=`ls -type $MGPicker_SceneDataNodeType`;
    int $nodeSize = size($nodes);
    
    if($nodeSize)
    {
        for($n in $nodes)
        {
            mgp_readSceneMGPickerNode $n;
        }
    }
    //read other picker nodes now:
    string $converts[]= `mgp_listAllPkrConverters`;
    for($converter in $converts)
    {
        //print ($converter+"\n");
        string $autoload = `mgp_getPickerConverterProc_autoReadNode $converter`;
        string $lister = `mgp_getPickerConverterProc_nodeLister $converter`;
        string $reader = `mgp_getPickerConverterProc_readNode $converter`;
        if(!`exists $autoload` || !`exists $lister` || !`exists $reader`)
        {
            continue;
        }
        string $pkrNodes[]=`eval $lister`;
        if(!size($pkrNodes))
        {
            continue;
        }       
        for($each in $pkrNodes)
        {
            string $cmd = ($reader+" \""+$each+"\"");
            eval $cmd;
        }       
    }       
}
global proc int MGP_ReadOtherPickerFile(string $filePath)
{
    string $converts[]= `mgp_listAllPkrConverters`;
    string $isFileProc, $readerProc;
    string $cmd;
    for($converter in $converts)
    {
        $isFileProc = `mgp_getPickerConverterProc_isPickerFile $converter`;
        $cmd = $isFileProc+" \""+$filePath;
        if(!`eval  $cmd`)
        {
            continue;
        }
        $readerProc = `mgp_getPickerConverterProc_readFile $converter`;
        $cmd = $readerProc+" \""+$filePath;
        eval $cmd;
        return 1;
    }
    return 0;
}
global proc int MGP_ReadPickerFromScene_MGAndOther(string $node, int $stillOpenIfExist)
{
    //print "MGP_ReadPickerFromScene_MGAndOther\n";
    if(!`objExists $node`)
    {
        return 0;
    }
    if(!$stillOpenIfExist)
    {
        string $ns = `MGP_GetNamespaceViaObj $node`;
        if(`MGPicker -e -activate $node $ns`)
        {
            return 1;
        }
    }
    global string $MGPicker_SceneDataNodeType;  
        if(`nodeType $node` == $MGPicker_SceneDataNodeType)
    {
      return `mgp_readSceneMGPickerNode $node`;
    }
    
    //read using other picker converter now:
        string $converts[]= `mgp_listAllPkrConverters`; 
    for($converter in $converts)
        {
            string $isNodeProc = `mgp_getPickerConverterProc_isPickerNode $converter`;
            string $reader = `mgp_getPickerConverterProc_readNode $converter`;
            if(!`exists $isNodeProc` || !`exists $reader`)
            {
                continue;
            }
            if(`eval ($isNodeProc+" \""+$node+"\"")`)
            {
                string $cmd = ($reader+" \""+$node+"\"");
                return `eval $cmd`;
            }
        }
        return 0;       
}
global proc MGP_ReadSelectedPickerFromScene()
{      
    //print "MGP_ReadSelectedPickerFromScene";
    string $nodes[]=`ls -sl`;
        string $converts[]= `mgp_listAllPkrConverters`; 
    int $nodeSize = size($nodes);
    if(!$nodeSize)
    {
            return;
    }
    for($n in $nodes)
    {
        MGP_ReadPickerFromScene_MGAndOther $n 0;
    }
}

global proc MGP_ReadAllPickerFromSceneAndUpdateMenu(int $autoRead)
{
    //print "MGP_ReadAllPickerFromSceneAndUpdateMenu\n";
    global string $MGPicker_SceneDataNodeType;
    string $nsCtrlName = "MGPicker_NamespaceTF";
    if(!`control -q -ex $nsCtrlName`)
    {
        return;
    }
    
    string $nodes[]=`ls -type $MGPicker_SceneDataNodeType`;
    int $nodeSize = size($nodes);
    string $pickerName,$ns,$data;
    global string $MGPicker_NamespaceControl_MenuName;
    if(`popupMenu -q -ex $MGPicker_NamespaceControl_MenuName`)
    {
        deleteUI -menu $MGPicker_NamespaceControl_MenuName;
    }
    popupMenu -b 1 -p $nsCtrlName $MGPicker_NamespaceControl_MenuName;
    string $genericItemList[] = `MGP_GetGenericPickers_OfCurrentPickerProject`;
    //print $genericItemList;
    if(size($genericItemList))
    {
        for($g in $genericItemList)
        {
            menuItem -l ("* "+$g) -p $MGPicker_NamespaceControl_MenuName 
                    -c ("MGP_LoadGenericPicker \""+$g+"\"")
                    -ann `MGP_MultiLanguage "pkr.genericPicker.mi.ann"`;
        }
        menuItem -d 1  -p $MGPicker_NamespaceControl_MenuName;
    }
    menuItem -l `MGP_MultiLanguage "pkr.inSceneNode"` 
                    -subMenu 1 -p $MGPicker_NamespaceControl_MenuName  MGP_InSceneNodeMenu;
    if($nodeSize)
    {
        for($n in $nodes)
        {
            if(!$autoRead)
            {
                menuItem -l ($ns+" ["+$n+"]") -c ("MGP_ReadPickerFromScene_MGAndOther \""+$n+"\" 0") -p MGP_InSceneNodeMenu;
            }
            else
            {
            if($autoRead && `MGP_ReadPickerFromScene_MGAndOther $n 0`)
            {                        
                menuItem -l ($ns+" ["+$n+"]") -c ("MGP_ReadPickerFromScene_MGAndOther \""+$n+"\" 0") -p MGP_InSceneNodeMenu;
            }
          }
        }        
        menuItem -d 1 -p $MGPicker_NamespaceControl_MenuName;
    }
    string $pickerDataFolder = `MGP_getPkrDataDirectory`;
    string $projs[]=`mgp_ListAllSubFolders $pickerDataFolder`;
    string $cproj = `MGPicker -q -pickerProject`;
    for($proj in $projs)
    {
        if($proj != $cproj)
        {
            continue;
        }    
        string $lbl = (`MGP_MultiLanguage "pkr.proj"`+": "+$proj);    
        string $mi = `menuItem -l $lbl -subMenu  1  -p $MGPicker_NamespaceControl_MenuName`;
        menuItem -e -postMenuCommandOnce 1 -postMenuCommand ("MGP_UpdateProjectPickerMenu \""+$pickerDataFolder+$proj+"/\" \""+$mi+"\"") $mi;
        break;
    }        
}
global proc MGP_UpdateAvailablePickerMenu()
{
    if(`textField -q -ex MGPicker_NamespaceTF`)
    {
        if(`textField -q -vis MGPicker_NamespaceTF`)
        {
            evalDeferred("MGP_ReadAllPickerFromSceneAndUpdateMenu 0; MGP_ReadOtherPickerFromSceneAndUpdateMenu 0;");
        }
    }
}
global proc MGP_ReadOtherPickerFromSceneAndUpdateMenu(int $autoRead)
{
    global string $MGPicker_NamespaceControl_MenuName;
    string $converts[]= `mgp_listAllPkrConverters`;
    for($converter in $converts)
    {
        //print ($converter+"\n");
        string $autoload = `mgp_getPickerConverterProc_autoReadNode $converter`;
        string $lister = `mgp_getPickerConverterProc_nodeLister $converter`;
        string $reader = `mgp_getPickerConverterProc_readNode $converter`;
        if(!`exists $autoload` || !`exists $lister` || !`exists $reader`)
        {
            continue;
        }
        string $pkrNodes[]=`eval $lister`;
        if(!size($pkrNodes))
        {
            continue;
        }
        menuItem -d 1 -p MGP_InSceneNodeMenu;
        for($each in $pkrNodes)
        {
            string $cmd = ($reader+" \""+$each+"\"");
            menuItem -l $each -c $cmd -p MGP_InSceneNodeMenu;
            if($autoRead && `eval $autoload`)
            {
                eval $cmd;
            }
        }       
    }   
    menuItem -d 1 -p $MGPicker_NamespaceControl_MenuName;
    menuItem -p $MGPicker_NamespaceControl_MenuName -l `MGP_MultiLanguage "pkr.updateMenu.lbl"` 
                    -ann `MGP_MultiLanguage "pkr.updateMenu.ann"`   
                    -command "MGP_UpdateAvailablePickerMenu" 
                    MGPicker_UpdateMenuMI;
}
//picker switch ui mode and minimize codes ----------------------------------

//global int $MGPicker_LastUIMode;
//$MGPicker_LastUIMode = 0;

proc int mgp_getPickerDesignerOrAnimatorMode()
{
    return `MGPicker -q -pickerMode`;
}

global proc MGP_ReactiveModelViewport ()
{
    
    showWindow  MayaWindow;
    string $cpanel =`getPanel -withFocus`;  
    global string $gMainPane;
    setFocus $gMainPane;
    if(`modelPanel -q -ex $cpanel`)
    {
        setFocus    $cpanel;
    }
    else
    {
        string $visPanels[]=`getPanel -vis`;
        for($each in $visPanels)
        {
            if(`modelPanel -q -ex $each`)   
            {
                setFocus $each;
                break;  
            }
        }
    }
    //print "\nFocus!!\n";
}
global proc MGP_makeSureUIIsRestored()
{
    global string $MGPicker_DockControlName;
    if(`mgp_isMaya2017OrLater`)
    {
        if(`workspaceControl -q -ex $MGPicker_DockControlName`)
        {
            workspaceControl -e -raise -vis 1 $MGPicker_DockControlName;
        }
        return;
    }
    if(!`exists "MGDockControl"`)
    {
        return;
    }
    if(`MGDockControl -q -ex $MGPicker_DockControlName`)
    {
        MGDockControl -e -iconify 0 $MGPicker_DockControlName;
    }
}

global proc MGP_ensurePanelAreHiddenForAnimMode()
{   
    global int $gMGPicker_CurrentSwitchedPickerMode ;
    if( $gMGPicker_CurrentSwitchedPickerMode)
    {
        MGPicker -e -dockPanelVisible 0;
    }
}

global proc MGP_ensurePanelAreShownForDesignerMode()
{   
    global int $gMGPicker_CurrentSwitchedPickerMode ;
    if(!$gMGPicker_CurrentSwitchedPickerMode)
    {
        MGPicker -e -dockPanelVisible 1;
    }
}
global proc int MGP_isMinimized()
{    
    global string $MGPicker_DockControlName;
    if(`mgp_isMaya2017OrLater`)
    {        
        if(`workspaceControl -q -ex $MGPicker_DockControlName`)
        {
            return `workspaceControl -q -raise $MGPicker_DockControlName`;
        }
        return 0;
    }
    
    if(!`exists "MGDockControl"`)
    {
        return 0;
    }
    if(`MGDockControl -q -ex $MGPicker_DockControlName`)
    {
        return `MGDockControl -q -iconify $MGPicker_DockControlName`;
    }
    return 0;
    /*
    global string $MGPicker_RestoreButton;
    if(!`control -q -ex $MGPicker_RestoreButton`)
    {
        return 0;
    }
    return `control -q -vis $MGPicker_RestoreButton`;*/
}
proc mgp_updateWindowIcon(int $mode)
{    
    global string $MGPicker_DockControlName;
    if(`exists "MGDockControl"` && `MGDockControl -q -ex $MGPicker_DockControlName`)
    {
        if(!$mode)
        {
            MGDockControl -e -icon `mgp_icon "PickerWindowIcon_design.png"` $MGPicker_DockControlName;
        }
        else
        {
            MGDockControl -e -icon `mgp_icon "PickerWindowIcon_anim.png"` $MGPicker_DockControlName;
        }
    }
}
global proc MGP_switchBetweenDesignerAnimatorMode_doit(int $mode)
//$mode 0: designer mode
//$mode 1: animator mode
{
    global string $MGPicker_PreviewModeBtn;
    if(!`control -q -ex $MGPicker_PreviewModeBtn` || !`exists MGPicker`)
    {
        return;
    }
    int $ver2017OrLater = `mgp_isMaya2017OrLater`;
    if($ver2017OrLater)
    {
        global string $MGPicker_Config_UiMode;
        optionVar -iv $MGPicker_Config_UiMode $mode;
    }
    
    //if it is minimized, we first restore:
    int $minimized = `MGP_isMinimized`;
    int $targetInfo[];
    if($minimized)
    {
        //$targetInfo = `mgp_readUISizePosInfoString $mode`;
        //MGP_toggleMinimize;
        MGP_makeSureUIIsRestored;
    } 
    global string $MGPicker_ControlName;
    //global string $MGPicker_RestoreButton;
    //iconTextButton -e -vis 0 $MGPicker_RestoreButton;
    global string $MGPicker_DockControlName;
    if(`exists "MGDockControl"`)
    {
        if(`MGDockControl -q -ex $MGPicker_DockControlName`)
        {
            //if(`MGDockControl -q -vis $MGPicker_DockControlName`)
            //{
            //  //MGP_saveUIModeSizePosition `mgp_getPickerDesignerOrAnimatorMode`;
            //}
            if(!`MGDockControl -q -vis $MGPicker_DockControlName`)
            {
                MGDockControl -e -vis 1 $MGPicker_DockControlName;
            }
        }
    }
    MGPicker -e -pickerMode $mode;
    
    layout -e -visible $mode MGPicker_TopRowLay;
    //mgp_applyUISizePosViaInfoString $mode;
    
    
    global int $gMGPicker_CurrentSwitchedPickerMode ;
    $gMGPicker_CurrentSwitchedPickerMode = $mode;
    
    //double check if the dock panel is turned off in animator mode:
    
    if($mode)
    {
        evalDeferred ("MGP_ensurePanelAreHiddenForAnimMode");
    }    
    else
    {
        evalDeferred ("MGP_ensurePanelAreShownForDesignerMode");
    }
    mgp_updateWindowIcon $mode;
    /*
    if($minimized)
    {
        mgp_applyUISizePosViaInfoString_doit $targetInfo;
    }*/
    //evalDeferred ("MGP_RefocusOnPickerView");  //this is done in c++
    mgp_refreshUi;
}
global proc MGP_switchBetweenDesignerAnimatorMode()
{
    int $mode = `mgp_getPickerDesignerOrAnimatorMode`;
    MGP_switchBetweenDesignerAnimatorMode_doit (1-$mode);
}
global proc MGP_switchToDesignerMode()
{
      MGP_switchBetweenDesignerAnimatorMode_doit 0;
}
global proc MGP_switchToAnimatorMode()
{
      MGP_switchBetweenDesignerAnimatorMode_doit 1;
}
//picker project code ----------------------------------

proc string mgp_getCurrentProjectName()
{
    string $proj = `MGPicker -q -pickerProject`;
    if(!size($proj))
    {
        $proj = `MGPkr_getDefaultProjectName`;
    }
    return $proj; 
    /*
    global string $MGPicker_CurrentProjec_OVName;
    int $exist = `optionVar -ex $MGPicker_CurrentProjec_OVName`;
    string $proj;
    if(!$exist)
    {
        $proj = `MGPkr_getDefaultProjectName`;
    }
    else 
    {
        $proj = `optionVar -q $MGPicker_CurrentProjec_OVName`;
        if($proj == "0")
        {
            $proj = `MGPkr_getDefaultProjectName`;
        }
    }   
    return $proj; 
    */
}
global proc MGP_SetProjectDoit(string $projName)
{
    if(!size($projName))
    {
        return;
    }
    MGPicker -e -pickerProject $projName;
    /*
    global string $MGPicker_CurrentProjec_OVName;
    MGPicker -e -pickerProject $projName;
    optionVar -sv $MGPicker_CurrentProjec_OVName $projName;
    */
}
/*
proc mgp_init_setPickerProjName()
{
    string $proj = `mgp_getCurrentProjectName`;
    MGP_SetProjectDoit $proj;    
}
*/
global proc MGP_SetProjectCommand()
{
    string $proj[] = `textScrollList -q -si MGP_ProjectList_TSL`;
    MGP_SetProjectDoit $proj[0];
    layoutDialog -dismiss "";
}
global proc string MGP_ValidateFileNameString(string $inputString)
//return a string valid for being a file name.
{
    int $count = size($inputString);
    if(!$count)
    {
        return $inputString;
    }
    string $outputString;
    if(`isValidString $inputString "[a-zA-Z0-9_\.]+"`)
    {
        return $inputString;
    }
    string $cc;
    for($i=1 ; $i <= $count ; $i++)
    {
        $cc = `substring $inputString $i $i`;
        if(`isValidString $cc "[a-zA-Z0-9_\.]+"`)
        {
            $outputString += $cc;
        }
        else
        {
            $outputString += "_";
        }
    }
    return $outputString;
}
global proc MGP_NewProjectForSetProjectUI()
{
    string $newProj = `textFieldButtonGrp -q -text MGP_AddProjectInSetProjectUI_TFBG`;
    $newProj = `MGP_ValidateFileNameString $newProj`;
    string $ai[]=`textScrollList -q -ai MGP_ProjectList_TSL`;
    if(`stringArrayContains $newProj $ai`)
    {
        textScrollList -e -si $newProj MGP_ProjectList_TSL;
        textFieldButtonGrp -e -text "" MGP_AddProjectInSetProjectUI_TFBG;
        return;
    }
    textScrollList -e -append $newProj MGP_ProjectList_TSL;
    string $projPath = `MGP_getPkrDataDirectory`;
    $projPath += $newProj;
    sysFile -md $projPath;
    layoutDialog -dismiss "";
    MGP_ScriptEditorFeedback (`MGP_MultiLanguage "pkr.pkrProj.created.rep"`+$newProj) 0;
}
global proc MGP_SetProjectUI()
{   
    string $form = `setParent -q`;
    string $tr = `MGP_MultiLanguage "pkr.availableProj"`;
    string $lbl = `text -align "left" -l $tr`;
    string $tsl = `textScrollList -allowMultiSelection 0 MGP_ProjectList_TSL`;
    string $trlbl = `MGP_MultiLanguage "pkr.addProj"`;
    string $btnLbl = `MGP_MultiLanguage "pkr.add"`;
    string $addProjTFBG = `textFieldButtonGrp -cw 1 80 
                                                                -l $trlbl
                                -adj 2 
                                -bl $btnLbl
                                -bc "MGP_NewProjectForSetProjectUI" MGP_AddProjectInSetProjectUI_TFBG`;                                
    string $sep = `separator -st "in"`;
    string $row = `rowLayout -nc 3 -cw3 1 100 100 -adj 1`;
        text -l "";
        $tr = `MGP_MultiLanguage "pkr.cancel"`;
        string $cancelBtn = `button -l $tr -c "layoutDialog -dismiss \"\"" -w 97`;  
        $tr = `MGP_MultiLanguage "pkr.setproj"`;
        string $setBtn = `button -l $tr -c  "MGP_SetProjectCommand" -w 97`; 
            
    formLayout -e 
        -af $lbl "top" 3 
        -af $lbl "left" 3 
        -af $lbl "right" 3
        
        -ac $tsl "top" 3 $lbl
        -af $tsl "left" 3 
        -af $tsl "right" 3
        -ac $tsl "bottom" 3 $addProjTFBG
        
        -af $addProjTFBG "left" 3
        -af $addProjTFBG "right" 3
        -ac $addProjTFBG "bottom" 3 $sep
        
        -af $sep "left" 3
        -af $sep "right" 3
        -ac $sep "bottom" 3 $row
        
        -af $row "bottom" 3 
        -af $row "right" 3
        -af $row "left" 3
        $form;
    string $projs[]=`MGP_listAllProjects`;
    string $cName = `MGPicker -q -pickerProject`;
    for($p in $projs)
    {
        textScrollList -e -append $p MGP_ProjectList_TSL;
        if($p == $cName)
        {
            textScrollList -e -si $p MGP_ProjectList_TSL;
        }
    }   
}

global proc MGP_SetPickerProject()
{
  global string $MGPicker_AppName;
  string $tr = `MGP_MultiLanguage "pkr.setCProj"`;
  string $title = ($MGPicker_AppName + ": "+$tr);
    layoutDialog -ui MGP_SetProjectUI -title $title;
}
global proc MGP_NewPickerProject()
{
    global string $MGPicker_AppName;
    string $appName = $MGPicker_AppName;
    string $msg = `MGP_MultiLanguage "pkr.newProj.ann"`;
    string $ok = "OK";
    string $cancel = `MGP_MultiLanguage "pkr.cancel"`;
    string $answer = `promptDialog -title $appName -m $msg -button $ok -button $cancel -defaultButton $ok -dismissString $cancel`;
    if($answer != $ok)
    {
        return;
    }
    string $newProj = `promptDialog -q -text`;
    $newProj = `MGP_ValidateFileNameString $newProj`;
    if(!size($newProj))
    {
        return;
    }
    string $projPath = `MGP_getPkrDataDirectory`;
    $projPath += $newProj;
    if(`filetest -d $projPath`)
    {
        $msg = `MGP_MultiLanguage "pkr.newProj.exist.war"`;
        string $cProj = `MGPicker -q -pickerProject`;
        if($cProj == $newProj)
        {
            $msg = `MGP_MultiLanguage "pkr.newProj.exist.alreadySet.war"`;
            confirmDialog -t $appName -m $msg -button $ok;
            return;
        }
        else
        {
            $answer = `confirmDialog -t $appName -m $msg -button $ok -button $cancel -defaultButton $ok -dismissString $cancel`;
            if($answer != $ok)
            {
                return;
            }
            MGP_SetProjectDoit $newProj;
            MGP_ScriptEditorFeedback (`MGP_MultiLanguage "pkr.pkrProj.set.rep"`+$newProj) 0;
            return;
        }
    }
    int $result = `sysFile -md $projPath`;
    if($result)
    {
        MGP_SetProjectDoit $newProj;
        MGP_ScriptEditorFeedback (`MGP_MultiLanguage "pkr.newProj.newproj.set"`+$newProj) 0;
    }
    else
    {
        MGP_ScriptEditorFeedback (`MGP_MultiLanguage "pkr.newProj.unableSet"`+$newProj) 2;
    }
}

global proc MGP_updateNamespaceTextFiled(string $ns)
{    
    if(!`textField -q -ex MGPicker_NamespaceTF`)
    {
        return;
    }
    if(!size($ns))
    {
        textField -e -text "N/A" MGPicker_NamespaceTF;
    }
    textField -e -text $ns MGPicker_NamespaceTF;
}

proc string mgp_getInitWindowTitle()
{    
    global string $MGPicker_AppName;
    float $v = `MGPicker -q -v`;
    string $vstr = python("'%.2f' % "+$v);
    return ($MGPicker_AppName+" v"+ $vstr);
}

global proc MGP_updateWindowTitle(string $fileInfoStr)
{    
    string $title = `mgp_getInitWindowTitle`;
    if(size($fileInfoStr))
    {
        $fileInfoStr = ": [" + $fileInfoStr+"]";
    }
    string $longTitle = ($title + $fileInfoStr);
    global string $MGPicker_WindowName;
    global string $MGPicker_AppName;
    global string $MGPicker_DockControlName;
    if(`mgp_isMaya2017OrLater`)
    {
        if(`workspaceControl -q -ex $MGPicker_DockControlName`)
        {
            workspaceControl -e -l $title $MGPicker_DockControlName;
            control -e -ann $longTitle  $MGPicker_DockControlName;
        }
        return;
    }
    
    if(!`exists "MGDockControl"`)
    {
        return;
    }
    if(`MGDockControl -q -ex $MGPicker_DockControlName`)
    {
        MGDockControl -e -l $title -e -floatLabel $longTitle -ann $longTitle  $MGPicker_DockControlName;
        return;
    }
    if(!`window -q -ex $MGPicker_WindowName`)
    {
        return;
    }
    window -e -title $longTitle $MGPicker_WindowName;
}
global proc MGP_updateWindowTitleInMel()
{
    string $cfile = `MGPicker -q -pickerFilePath`;
    //print ($cfile+"\n");
    MGP_updateWindowTitle $cfile;
}
//----------create picker selection button via 3d view----------------------
proc string mgp_getObjectShortName(string $properName)
{
    string $temp[]=`stringToStringArray $properName "|"`;
    if(!size($temp))
    {
        return "";
    }
    return $temp[(size($temp)-1)];
}

proc float[] mgp_getObjectPivotWorldPos(string $obj)
{
    float $result[];
    if(!`objExists $obj`)
    {
        return $result;
    }
    return `xform -q -ws -t $obj`;
}
proc float[] mgp_getShapesBoundingCenter(string $shapes[])
{
    float $wPnt[];
    int $shapeSize = size($shapes);
    if(!$shapeSize)
    {
        return $wPnt;
    }
    int $usedShapeSize = $shapeSize;
    float $x,$y,$z;
    for($i=0; $i<$shapeSize; $i++)
    {
            $cShape = $shapes[$i];
            float $bb[] = `exactWorldBoundingBox -ignoreInvisible 1 $cShape`;
            if($bb[0] == 100000000000000000000)  //it is empty shape.
            {
                 $usedShapeSize--;
                 continue;
            }
            $x += ($bb[0]+$bb[3])/2;
            $y += ($bb[1]+$bb[4])/2;
            $z += ($bb[2]+$bb[5])/2;
    }
    if(!$usedShapeSize)
    {
        return $wPnt;
    }
    $wPnt[0] = $x/$usedShapeSize;
    $wPnt[1] = $y/$usedShapeSize;
    $wPnt[2] = $z/$usedShapeSize;
    return $wPnt;
}
proc float[] mgp_getObjectBoundingCenter(string $obj)
{
    float $wPnt[];
    if(!`objExists $obj`)
    {
        return $wPnt;
    }
    string $shapes[]=`listRelatives -shapes -path $obj`;
    int $shapeSize = size($shapes);
    if(!$shapeSize)
    {
        $wPnt = `xform -q -ws -t $obj`;
    }
    else
    {
        $wPnt = `mgp_getShapesBoundingCenter $shapes`;
        if(!size($wPnt))
        {
            $wPnt = `xform -q -ws -t $obj`;
        }
    }
    return $wPnt;
}
proc int[] mgp_getObjectOverrideColorValue_doit(string $obj)
{
    //print ($obj+"\n");
    int $result[];
    string $colAttr = ".overrideColor";
    int $index = `getAttr ($obj+$colAttr)`;
    if($index <= 0 || $index > 31)
    {
        return {-1,-1,-1};
    }
    float $col []=`colorIndex -q $index`;   
    $result [0] = $col[0]*255;
    $result [1] = $col[1]*255;
    $result [2] = $col[2]*255;
    return $result;
}
proc int[] mgp_getObjectOverrideColorValue(string $obj)
{
    int $result[];
    $result [0] = -1;
    $result [1] = -1;
    $result [2] = -1;
    if(!`objExists $obj`)
    {
        return $result;
    }
    string $overideAttr = ".overrideEnabled";
    int $transformNodeResult[];
    $transformNodeResult [0] = -1;
    $transformNodeResult [1] = -1;
    $transformNodeResult [2] = -1;
    if(`getAttr ($obj+$overideAttr)`)
    {       
        $transformNodeResult = `mgp_getObjectOverrideColorValue_doit $obj`;
        if($transformNodeResult[0] >= 0)
        {
            return $transformNodeResult;
        }
    }
    
    string $shapes[]=`listRelatives -shapes -path $obj`;
    for($s in $shapes)
    {
        if(`getAttr ($s+$overideAttr)`)
        {
            $result = `mgp_getObjectOverrideColorValue_doit $s`;
            if($result[0] >= 0)
            {
                return $result;
            }
        }
    }
    
    return {0,4,96};  //default curve color
}
global proc string[] MGP_getSelectionObjectButtonInfos(int $playblastW, int $playblastH)
{
    string $result[];
    if(!$playblastW || !$playblastH)
    {
        return $result;
    }
    global string $MGPicker_AppName;
    string $sel[]=`ls -sl -transforms`; 
    if(!size($sel))
    {
        confirmDialog -t $MGPicker_AppName -m `MGP_MultiLanguage "pkr.noTransformSelected"` -button "OK";
        return $result;
    }
    
    int $portW,$portH;  
    string $editor = `MGP_get3DModelEditor`;
    int $size[] = `MGPickerService -modelEditorSize $editor`;
    $portW = $size[0];
    $portH = $size[1];
    if($portW<=1 || $portH<=1)
    {
        confirmDialog -t $MGPicker_AppName -m `MGP_MultiLanguage "pkr.3dView.notVisible"` -button "OK";
        return $result;
    }
    
    if($playblastW<0)
    {
        $playblastW = $portW;
    }
    if($playblastH<0)
    {
        $playblastH = $portH;
    }
    
    float $aspectRatio = float($playblastW)/$playblastH;
    
    
    float $xGap = 0,$yGap = 0,$xGapRight = $portW ,$yGapRight = $portH;
    float $viewToPlayblastMul_x = 1,$viewToPlayblastMul_y = 1;
    if($playblastW <= $playblastH)  //h is full, but w has gap
    {
        float $usedPortWidth = $portH*$aspectRatio;
        $xGap = ($portW-$usedPortWidth)/2.0;
        $xGapRight = $portW-$xGap;
        $viewToPlayblastMul_x = float($playblastW)/$usedPortWidth;
        $viewToPlayblastMul_y = float($playblastH)/$portH;
    }
    else if($playblastW > $playblastH) //w is full, but h has gap
    {
        float $usedPortHeight = $portW/$aspectRatio;
        $yGap = ($portH-$usedPortHeight)/2.0;
        $yGapRight = $portH-$yGap;
        $viewToPlayblastMul_x = float($playblastW)/$portW;
        $viewToPlayblastMul_y = float($playblastH)/$usedPortHeight;
    }   
    
    float $halfViewX = $portW/2.0;
    float $halfViewY = $portH/2.0;
    float $halfPlayblastX = $playblastW/2.0;
    float $halfPlayblastY = $playblastH/2.0;
    
    float $wPnt[];
    int $vPnt[];
    int $clipCount = 0;
    string $cDataStr;
    
    float $progress = 0;
    int $count = size($sel);
    float $step = 0.0;
    if($count)
    {
        $step = 50.0 / $count;
    }
    int $progressInt = 0;
    for($obj in $sel)
    {
        $progress += $step;
        $progressInt = $progress;
        MGPicker -e -progressBar $progressInt;
        
        $obj = `MGP_cleanUpNonNamespaceMix $obj`;
        $wPnt = `mgp_getObjectBoundingCenter $obj`;
        $vPnt = `MGPickerService -getViewCoordinate $editor $wPnt[0] $wPnt[1] $wPnt[2]`;
        //if(!$vPnt[0])
        //{
        //  $clipCount ++;
        //  continue;
        //}
        if($vPnt[1]<$xGap || $vPnt[1]>$xGapRight)
        {
            $clipCount ++;
            continue;
        }
        if($vPnt[2]<$yGap || $vPnt[2]>$yGapRight)
        {
            $clipCount ++;
            continue;
        }
        $cDataStr = $obj;
        $cDataStr+=",";
        $cDataStr+=`mgp_getObjectShortName $obj`;
        $cDataStr+=",";
        int $col[]=`mgp_getObjectOverrideColorValue $obj`;
        //print $col;
        $cDataStr+=$col[0];
        $cDataStr+=",";
        $cDataStr+=$col[1];
        $cDataStr+=",";
        $cDataStr+=$col[2];
        $cDataStr+=",";     
        float $px = ($vPnt[1] -$halfViewX)*$viewToPlayblastMul_x+$halfPlayblastX;
        $cDataStr+= $px;
        $cDataStr+=",";
        float $py = ($vPnt[2] -$halfViewY)*$viewToPlayblastMul_y+$halfPlayblastY;
        $cDataStr+= $py;
        $result[size($result)] = $cDataStr;
    }
    if($clipCount)
    {
        MGP_ScriptEditorFeedback (`MGP_MultiLanguage "pkr.skipClippedObj"`+" "+$clipCount) 1;
    }
    //print $result;
    return $result;
}
//----------end of create picker selection button via 3d view----------------------
//---------start of create slider via 3d view----------------------------------
proc int mgp_isAttributeMovable (string $obj, string $attr)
//0 for locked
//1 for movable
//2 for no range
{   
    string $infos[] =  mgp_getAttributeMinMaxValue($obj, $attr);
    if($infos[0] == $infos[1])
    {
        return 0;
    }
    if($infos[0] == -100000 && $infos[1] == 100000)
    {
        return 2;
    }
    return 1;
}
proc int[] mgp_getScreenCoordViaWorldPoint(string $obj)
//$screenPnt[0]: within port or not
//$screenPnt[1]: x in qt coordinate
//$screenPnt[2]: y in qt coordinate
{   
    string $editor = `MGP_get3DModelEditor`;
    float $worldPnt[]= `xform -q -ws -rotatePivot $obj`;
    int $screenPnt[] =`MGPickerService -getViewCoordinate $editor $worldPnt[0] $worldPnt[1] $worldPnt[2]`;
    return $screenPnt;
}
proc float mgp_getAttributeDefaultValue(string $obj, string $attr)
{
        float $defaultVs[] =`attributeQuery -n $obj -listDefault $attr`;
    if(size($defaultVs))
    {
        return $defaultVs[0];
    }
    return 0;
}

proc int mgp_isAverageWorldPointWithinViewport(float $wpStart[], float $wpEnd[])
{   
    string $editor = `MGP_get3DModelEditor`;
        float $averageWp [];
        $averageWp = {($wpStart[0]+$wpEnd[0])/2.0,($wpStart[1]+$wpEnd[1])/2.0,($wpStart[2]+$wpEnd[2])/2.0};
        int $screenPnt[] =`MGPickerService -getViewCoordinate $editor $averageWp[0] $averageWp[1] $averageWp[2]`;
        return $screenPnt[0];
}
proc string [] mgp_getHorizontalVerticalAttributes (string $obj)
//0 node name
//1 horizontal attr
//2 vertical attr
//3 h min value
//4 h max value
//5 h default value
//6 v min value
//7 v max value
//8 v default value

//9 h min screen coord
//10 v min screen coord
//11 h max screen coord
//12 v max screen coord

//13 h has valid Range
//14 v has valid Range
{
    if(!`objExists $obj`)
    {
        return {};
    }
    if(`nodeType $obj`!="transform")
    {
        return {};
    }
    string $result[];
    clear $result;
    $result[0] = $obj;
    //float $t[]= `getAttr ($obj+".t")`;
    //int $cScreenPnt[] =`mgp_getScreenCoordViaWorldPoint $obj`;
    string $tx = "translateX";
    string $ty = "translateY";
    string $tz = "translateZ";
    string $xinfos[] =  mgp_getAttributeMinMaxValue($obj, $tx);
    float $cTx = `getAttr ($obj+"."+$tx)`;
    $xinfos = `mgp_fillupNoRangeAttributeMinMaxValues $tx $xinfos $cTx`;  //to support the no range transform been created into slider.
    //print $xinfos;
    //print "\n-----\n";
    string $yinfos[] =  mgp_getAttributeMinMaxValue($obj, $ty);
    float $cTy = `getAttr ($obj+"."+$ty)`;
    $yinfos = `mgp_fillupNoRangeAttributeMinMaxValues $ty $yinfos $cTy`;  //to support the no range transform been created into slider.
    //print $yinfos;
    //print "\n-----\n";
    string $zinfos[] =  mgp_getAttributeMinMaxValue($obj, $tz);
    float $cTz = `getAttr ($obj+"."+$tz)`;
    $zinfos = `mgp_fillupNoRangeAttributeMinMaxValues $tz $zinfos $cTz`;  //to support the no range transform been created into slider.
    //print $zinfos;
    //print "\n-----\n";
    int $txMoveable = 0;
    if($xinfos[0] != $xinfos[1])
    {
        $txMoveable = 1;
    }
    int $tyMoveable = 0;
    if($yinfos[0] != $yinfos[1])
    {
        $tyMoveable = 1;
    }
    int $tzMoveable = 0;
    if($zinfos[0] != $zinfos[1])
    {
        $tzMoveable = 1;
    }
    
    //first test the horizontal attribute:
    int $xHGap = 0;
    int $xVGap = 0;
    int $startXPos[];
    int $endXPos[];
    if($txMoveable)
    {
        float $min = $xinfos[0];
        float $max = $xinfos[1];
        setAttr ($obj+"."+$tx) $min ;
        $startXPos = `mgp_getScreenCoordViaWorldPoint $obj`;
        float $wpStart [] = `xform -q -ws -rotatePivot $obj`;
        undo;
        setAttr ($obj+"."+$tx) $max;
        $endXPos = `mgp_getScreenCoordViaWorldPoint $obj`;
        float $wpEnd [] = `xform -q -ws -rotatePivot $obj`;
        undo;
        //if any part of the range within viewport
        if($startXPos [0] || $endXPos [0] || `mgp_isAverageWorldPointWithinViewport $wpStart $wpEnd`)
        {
            $xHGap = abs($endXPos [1]-$startXPos [1]);
            $xVGap = abs($endXPos [2]-$startXPos [2]);
        }   
    }
    int $yHGap = 0;
    int $yVGap = 0;
    int $startYPos[];
    int $endYPos[];
    if($tyMoveable)
    {
        float $min = $yinfos[0];
        float $max = $yinfos[1];
        setAttr ($obj+"."+$ty) $min;
        $startYPos = `mgp_getScreenCoordViaWorldPoint $obj`;
        float $wpStart [] = `xform -q -ws -rotatePivot $obj`;
        undo;
        setAttr ($obj+"."+$ty) $max;
        $endYPos = `mgp_getScreenCoordViaWorldPoint $obj`;
        float $wpEnd [] = `xform -q -ws -rotatePivot $obj`;
        undo;
        //if any part of the range within viewport
        if($startYPos [0] || $endYPos [0] || `mgp_isAverageWorldPointWithinViewport $wpStart $wpEnd`)
        {
            $yHGap = abs($endYPos [1]-$startYPos [1]);
            $yVGap = abs($endYPos [2]-$startYPos [2]);
        }   
    }
    int $zHGap = 0;
    int $zVGap = 0;
    int $startZPos[];
    int $endZPos[];
    if($tzMoveable)
    {
        float $min = $zinfos[0];
        float $max = $zinfos[1];
        setAttr ($obj+"."+$tz) $min;
        $startZPos = `mgp_getScreenCoordViaWorldPoint $obj`;
        float $wpStart [] = `xform -q -ws -rotatePivot $obj`;
        undo;
        setAttr ($obj+"."+$tz) $max;
        $endZPos = `mgp_getScreenCoordViaWorldPoint $obj`;
        float $wpEnd [] = `xform -q -ws -rotatePivot $obj`;
        undo;
        //if any part of the range within viewport:
        if($startZPos [0] || $endZPos [0] || `mgp_isAverageWorldPointWithinViewport $wpStart $wpEnd`)
        {
            $zHGap = abs($endZPos [1]-$startZPos [1]);
            $zVGap = abs($endZPos [2]-$startZPos [2]);
        }
    }
    int $hMaxGap = max(max($xHGap,$yHGap), $zHGap);
    int $vMaxGap = max(max($xVGap,$yVGap), $zVGap);
    if(!$hMaxGap)
    {
        $result[1] = "";
        if(!$vMaxGap)
        {
            $result[2] = "";
        }
        else
        {
            if($vMaxGap  == $yVGap)
            {
                $result[2] = $ty;
                $result[6] = $yinfos[0];
                $result[7] = $yinfos[1];
                $result[14] = $yinfos[2];
            }
            else if($vMaxGap  == $zVGap)
            {
                $result[2] = $tz;
                $result[6] = $zinfos[0];
                $result[7] = $zinfos[1];
                $result[14] = $zinfos[2];
            }
            else
            {
                $result[2] = $tx;
                $result[6] = $xinfos[0];
                $result[7] = $xinfos[1];
                $result[14] = $xinfos[2];
            }
        }
    }
    else
    {
        if($hMaxGap  == $xHGap)
        {
            $result[1] = $tx;           
            $result[3] = $xinfos[0];
            $result[4] = $xinfos[1];
            $result[13] = $xinfos[2];
        }
        else if($hMaxGap  == $zHGap)
        {
            $result[1] = $tz;
            $result[3] = $zinfos[0];
            $result[4] = $zinfos[1];
            $result[13] = $zinfos[2];
        }
        else
        {
            $result[1] = $ty;
            $result[3] = $yinfos[0];
            $result[4] = $yinfos[1];
            $result[13] = $yinfos[2];
        }
        if(!$vMaxGap)
        {
            $result[2] = "";
        }
        else
        {
            if($vMaxGap  == $yVGap)
            {
                $result[2] = $ty;
                $result[6] = $yinfos[0];
                $result[7] = $yinfos[1];
                $result[14] = $yinfos[2];
            }
            else if($vMaxGap  == $zVGap)
            {
                $result[2] = $tz;
                $result[6] = $zinfos[0];
                $result[7] = $zinfos[1];
                $result[14] = $zinfos[2];
            }
            else
            {
                $result[2] = $tx;
                $result[6] = $xinfos[0];
                $result[7] = $xinfos[1];
                $result[14] = $xinfos[2];
            }
        }
    }
    //print $result;
    //if same attribute for h/v attribute, we prefere vertical and abondan horizontal.
    if($result[1] == $result[2])
    {
        $result[1] = "";
        $result[3] = "";
        $result[4] = "";
        $result[5] = "";
    }
    int $hasH = size($result[1]);
    int $hasV = size($result[2]);
    if(!$hasH && !$hasV)
    {
        return {};
    }
    if($hasH)
    {
        $result[5] = mgp_getAttributeDefaultValue($obj, $result[1]);
    }
    if($hasV)
    {
        $result[8] = mgp_getAttributeDefaultValue($obj, $result[2]);
    }
    
    if($hasH && $hasV)
    {
        float $hmin = $result[3];
        //print ($result[3]+"="+$hmin+"\n");
        float $vmin = $result[6];
        //print ($result[6]+"="+$vmin+"\n");
        setAttr ($obj+"."+$result[1]) $hmin;
        setAttr ($obj+"."+$result[2]) $vmin;
        //print ($result[1]+"="+$hmin+"\n");
        //print ($result[2]+"="+$vmin+"\n");
        int $minPnt[] = `mgp_getScreenCoordViaWorldPoint $obj`;
        //print $minPnt;
        //print "\n";
        undo;
        undo;
        float $hmax = $result[4];
        float $vmax = $result[7];
        setAttr ($obj+"."+$result[1]) $hmax;
        setAttr ($obj+"."+$result[2]) $vmax;
        //print ($result[1]+"="+$hmax+"\n");
        //print ($result[2]+"="+$vmax+"\n");
        int $maxPnt[] = `mgp_getScreenCoordViaWorldPoint $obj`;
        //print $maxPnt;
        //print "\n";
        undo;
        undo;
        $result[9] = $minPnt[1];
        $result[12] = $minPnt[2];
        $result[11] = $maxPnt[1];
        $result[10] = $maxPnt[2];
    }
    else
    {
        if($hasH)
        {
            float $hmin = $result[3];
            setAttr ($obj+"."+$result[1]) $hmin;
            int $minPnt[] = `mgp_getScreenCoordViaWorldPoint $obj`;
            undo;
            float $hmax = $result[4];
            setAttr ($obj+"."+$result[1]) $hmax;
            int $maxPnt[] = `mgp_getScreenCoordViaWorldPoint $obj`;
            undo;
            $result[9] = $minPnt[1];
            $result[12] = $minPnt[2];
            $result[11] = $maxPnt[1];
            $result[10] = $maxPnt[2];
        }
        else
        {
            float $vmin = $result[6];
            setAttr ($obj+"."+$result[2]) $vmin;
            int $minPnt[] = `mgp_getScreenCoordViaWorldPoint $obj`;
            undo;
            float $vmax = $result[7];
            setAttr ($obj+"."+$result[2]) $vmax;
            int $maxPnt[] = `mgp_getScreenCoordViaWorldPoint $obj`;
            undo;
            $result[9] = $minPnt[1];
            $result[12] = $minPnt[2];
            $result[11] = $maxPnt[1];
            $result[10] = $maxPnt[2];
        }
    }
    if(size($result)!=15)
    {
        $result[14]="";
    }
    return $result;
}
//0 node name
//1 horizontal attr
//2 vertical attr
//3 h min value
//4 h max value
//5 h default value
//6 v min value
//7 v max value
//8 v default value

//9 h min screen coord
//10 v min screen coord
//11 h max screen coord
//12 v max screen coord

//13 h has valid Range
//14 v has valid Range
global proc string[] MGP_getSelectionSliderInfos(int $playblastW, int $playblastH)
{
    string $result[];
    if(!$playblastW || !$playblastH)
    {
        return $result;
    }
    global string $MGPicker_AppName;
    string $sel[] = `ls -sl -transforms`;   
    if(!size($sel))
    {
        confirmDialog -t $MGPicker_AppName -m `MGP_MultiLanguage "pkr.noTransformSelected"` -button "OK";
        return $result;
    }
    select $sel;
    
    int $portW,$portH;
    string $editor = `MGP_get3DModelEditor`;
    int $size[] = `MGPickerService -modelEditorSize $editor`;
    $portW = $size[0];
    $portH = $size[1];
    if($portW<=1 || $portH<=1)
    {
        confirmDialog -t $MGPicker_AppName -m `MGP_MultiLanguage "pkr.3dView.notVisible"` -button "OK";
        return $result;
    }
    
    if($playblastW<0)
    {
        $playblastW = $portW;
    }
    if($playblastH<0)
    {
        $playblastH = $portH;
    }
    
    float $aspectRatio = float($playblastW)/$playblastH;
    
    
    float $xGap = 0,$yGap = 0,$xGapRight = $portW ,$yGapRight = $portH;
    float $viewToPlayblastMul_x = 1,$viewToPlayblastMul_y = 1;
    if($playblastW <= $playblastH)  //h is full, but w has gap
    {
        float $usedPortWidth = $portH*$aspectRatio;
        $xGap = ($portW-$usedPortWidth)/2.0;
        $xGapRight = $portW-$xGap;
        $viewToPlayblastMul_x = float($playblastW)/$usedPortWidth;
        $viewToPlayblastMul_y = float($playblastH)/$portH;
    }
    else if($playblastW > $playblastH) //w is full, but h has gap
    {
        float $usedPortHeight = $portW/$aspectRatio;
        $yGap = ($portH-$usedPortHeight)/2.0;
        $yGapRight = $portH-$yGap;
        $viewToPlayblastMul_x = float($playblastW)/$portW;
        $viewToPlayblastMul_y = float($playblastH)/$usedPortHeight;
    }   
    
    float $halfViewX = $portW/2.0;
    float $halfViewY = $portH/2.0;
    float $halfPlayblastX = $playblastW/2.0;
    float $halfPlayblastY = $playblastH/2.0;
    
    float $wPnt[];
    int $vPntMin[];
    int $vPntMax[];
    int $clipCount = 0;
    string $cDataStr;
    int $undoState = `undoInfo -q -state`;
    int $infinity = `undoInfo -q -infinity`;
    if(!$undoState || !$infinity)
    {
        undoInfo -state 1 -infinity 1;
    }
    
    
//0 node name
//1 horizontal attr
//2 vertical attr
//3 h min value
//4 h max value
//5 h default value
//6 v min value
//7 v max value
//8 v default value

//9 h min screen coord
//10 v min screen coord
//11 h max screen coord
//12 v max screen coord

//13 h has valid Range
//14 v has valid Range
    string $leftver[];
    
    string $cInfos[];
    
    float $progress = 0;
    int $count = size($sel);
    float $step = 0.0;
    if($count)
    {
        $step = 50.0 / $count;
    }
    int $progressInt = 0;
    
    for($obj in $sel)
    {
        $progress += $step;
        $progressInt = $progress;
        MGPicker -e -progressBar $progressInt;
        
        $obj = `MGP_cleanUpNonNamespaceMix $obj`;
        $cInfos = `mgp_getHorizontalVerticalAttributes $obj`;
        //print "$cInfos: ";
        //print $cInfos;
        //if both h and v are null:
        if(!size($cInfos[1]) && !size($cInfos[2]))
        {
            $leftver[size($leftver)] = $obj;
            continue;
        }
        
        //map the view coord into panel coordinate:
        $vPntMin[0] = $cInfos[9];
        $vPntMin[1] = $cInfos[10];
        $vPntMin[0] = ($vPntMin[0] -$halfViewX)*$viewToPlayblastMul_x+$halfPlayblastX;
        $vPntMin[1] = ($vPntMin[1] -$halfViewY)*$viewToPlayblastMul_y+$halfPlayblastY;      
        $vPntMax[0] = $cInfos[11];
        $vPntMax[1] = $cInfos[12];
        $vPntMax[0] = ($vPntMax[0] -$halfViewX)*$viewToPlayblastMul_x+$halfPlayblastX;
        $vPntMax[1] = ($vPntMax[1] -$halfViewY)*$viewToPlayblastMul_y+$halfPlayblastY;
        
        $cInfos[9] = min($vPntMin[0],$vPntMax[0]);
        $cInfos[10] = min($vPntMin[1],$vPntMax[1]);
        $cInfos[11] = max($vPntMin[0],$vPntMax[0]);
        $cInfos[12] = max($vPntMin[1],$vPntMax[1]);
        /*
        for($i=0; $i<size($cInfos); $i++)
        {
            print ("["+$i+"] = "+$cInfos[$i]+"\n");
        }
        print "---------------------\n";
        */
        //print $cInfos;
        //print "\n------------------------------\n";
        $cDataStr = `stringArrayToString  $cInfos ","`;     
        $result[size($result)] = $cDataStr;
    }
    if(!$undoState || !$infinity)
    {
        undoInfo -state $undoState -infinity $undoState;
    }
    $count = size($leftver);
    if($count)
    {
        select $leftver;
        MGP_ScriptEditorFeedback ($count + " "+`MGP_MultiLanguage "pkr.obj.notMadeSlider.war"`) 0;
    }
    else
    {
        select -cl;
    }
    //print $result;
    return $result;
}
//---------end of create slider via 3d view----------------------------------

//-------------code for picker template----------------------------------------

global proc string MGP_getUntitledNonduplicateTemplateName()
{
    
    string $dir = `MGP_getPickerUserTamplateDirectory`;
    string $exTemplates[] = `mgp_ListAllSubFolders $dir`;
    string $baseName  = "Template1";
    string $templateName = `mgp_getNonDuplicateFilename $baseName "" $baseName $exTemplates`;
    return $templateName;       
}
global proc MGP_browseUserTemplateFolder()
{
    string $dir = `MGP_getPickerUserTamplateDirectory`;
    mgp_openFileInExplorer $dir;
}

global proc string[] MGP_listAllTemplateInfos()
//return a array compose string: templateName*pkrFileFullpath*templateThumbnailImageFullpath.
{
    string $result[];
    string $dir = `MGP_getPickerUserTamplateDirectory`;
    string $exTemplates[] = `mgp_ListAllSubFolders $dir`;
    string $templateDirs[];
    string $templateNames[];
    for($d in $exTemplates)
    {
        $templateNames[size($templateNames)] = $d;
        $templateDirs[size($templateDirs)] = $dir;
    }
        string $defaultDir = `MGP_getPickerFactoryDefaultTamplateDirectory`;
    string $defaultTemplates[] = `mgp_ListAllSubFolders $defaultDir`;
    for($dd in $defaultTemplates)
    {
        $templateNames[size($templateNames)] = $dd;
        $templateDirs[size($templateDirs)] = $defaultDir;
    }
    //print $templateDirs;
    int $len = size($templateDirs);
    if(!$len)
    {
        return $result;
    }
    for($i = 0; $i<$len; $i++)
    {
        string $folder = $templateDirs[$i];
        string $name = $templateNames[$i];
        string $pkrFiles[]=`getFileList -fld ($folder+$name+"/") -fs "*.mgpkr"`;
        if(!size($pkrFiles))
        {
            continue;
        }
        string $cData = $name;
        string $pkrFilePath;
        for($pkr in $pkrFiles)
        {
            if($pkr == $name+".mgpkr")
            {
                $pkrFilePath = ($folder+$name+"/"+$pkr);
                break;
            }
        }
        if(!size($pkrFilePath))
        {
            $pkrFilePath = ($folder+$name+"/"+$pkrFiles[0]);
        }
        $cData += ("*"+$pkrFilePath);
        string $img = $folder+$name+"/thumbnail.bmp";
        $cData += ("*"+$img);
        $result[size($result)] = $cData;
    }
    return $result;
}
global proc string MGP_getMelCommandHelp(string $cmd)
{
    if(!size($cmd) || !`exists $cmd`)
    {
        return "";
    }
    string $doc = `help  $cmd`;
    string $temps[] = `stringToStringArray $doc "\n"`;
    string $cmdUsed[];
    for($s in $temps)
    {
        string $l = strip($s);
        if(!size($l) || `startsWith $l "Command"`)
        {
            continue;
        }
        $cmdUsed[size($cmdUsed)] = $s;
    }
    return (`stringArrayToString $cmdUsed "\n"`);
}
//-------------end of code for picker template----------------------------------------
proc string [] mgp_readSelSet(string $selSetName)
{
    string $getData[];
    string $setFolder = `MGSelSet_getMGSelectionSetFolderFull`;
    if(!`filetest -d ($setFolder)`)
    {
        return $getData;
    }       
    $getData= `readSelSetContentViaFileName $setFolder $selSetName`;
    return $getData;
}

global proc string [] MGP_getSelectedSelSetInfo(int $makeMultiple)  //the namespace are included.
{
    if(!`textScrollList -q -ex selSetTSL`)
    {
        MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.selSet.notOpened"` 1;
        return {};
    }
    string $si[]=`textScrollList -q -si selSetTSL`;
    int $dataSize = size( $si);
    if(!$dataSize)
    {
        MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.selSet.noSel"` 1;
        return {};
    }
    string $datas [];
    string $cdata [];
    string $cSet;
    string $firstSet;
    for($i=0; $i<$dataSize;$i++)
    {
        $cSet = $si[$i];
        if(!$i)
        {
            $firstSet = $cSet;
        }
        $cdata = `mgp_readSelSet $cSet`;
        if($makeMultiple)
        {
            $datas[size($datas)] = $cSet+">"+`stringArrayToString $cdata  ";"`;
        }
        else
        {
            $datas[size($datas)] = `stringArrayToString $cdata  ";"`;
        }
    }
    if(!$makeMultiple)
    {
        string $realData = `stringArrayToString $datas ";"`;
        clear($datas);
        string $plus = "+";
        if($dataSize<=1)
        {
            $plus = "";
        }
        $datas[0] = ($firstSet+$plus+">"+$realData);
    }
    //print $datas;
    return $datas;
}
global proc MGP_setSimpleModeIconState(int $mode)
//0: set preview icon "checked".
//1: set simpleEdit icon "checked".
{  
        global string $MGPicker_SimpleEdit_FillColor_Btn;  
        global string $MGPicker_SimpleEdit_LabelColor_Btn;  
      string $icon1,$icon2;
    if(!$mode)
    {                                     
        $icon1 = `mgp_icon "testMode_btn_small_h.png"`;   
        $icon2 = `mgp_icon "edit_Btn_small.png"`;
            button -e -vis $mode -w 1 -h 1 $MGPicker_SimpleEdit_FillColor_Btn;
            button -e -vis $mode -w 1 -h 1 $MGPicker_SimpleEdit_LabelColor_Btn;
            formLayout -e                       
                        -ac $MGPicker_SimpleEdit_FillColor_Btn "left" 0 MGP_SimpleEditModeBtn                       
                        -ac $MGPicker_SimpleEdit_LabelColor_Btn  "left" 0 $MGPicker_SimpleEdit_FillColor_Btn
                        -ac MGPicker_NamespaceTF  "left" 0 $MGPicker_SimpleEdit_LabelColor_Btn
                        MGP_topRigthFormLay;
    }
    else
    {  
        $icon1 = `mgp_icon "testMode_btn_small.png"`;  
        $icon2 = `mgp_icon "edit_Btn_small_h.png"`;   
            button -e -vis $mode  -w 12 -h 18 $MGPicker_SimpleEdit_FillColor_Btn;  
            button -e -vis $mode  -w 12 -h 18 $MGPicker_SimpleEdit_LabelColor_Btn;  
            formLayout -e                       
                        -ac $MGPicker_SimpleEdit_FillColor_Btn "left" 2 MGP_SimpleEditModeBtn                       
                        -ac $MGPicker_SimpleEdit_LabelColor_Btn  "left" 2 $MGPicker_SimpleEdit_FillColor_Btn
                        -ac MGPicker_NamespaceTF  "left" 2 $MGPicker_SimpleEdit_LabelColor_Btn
                        MGP_topRigthFormLay;   
    }      
    
    iconTextButton -e -i  $icon1 MGP_PreviewModeBtn;   
    iconTextButton -e  -i $icon2 MGP_SimpleEditModeBtn;          
}
global proc MGP_turnOffSimpleModeIconState()
{  
    string $icon1,$icon2;
    $icon1 = `mgp_icon "testMode_btn_small.png"`;   
    $icon2 = `mgp_icon "edit_Btn_small.png"`;
    iconTextButton -e -i  $icon1 MGP_PreviewModeBtn;   
    iconTextButton -e  -i $icon2 MGP_SimpleEditModeBtn;          
}
global proc MGP_switchSimpleMode(int $mode)
//0: set preview icon "checked".
//1: set simpleEdit icon "checked".
{
    MGPicker -e -interactiveMode $mode;
}

global proc MGP_setSimpleColorEditColor_AfterEdit(int $mode, float $r, float $g, float $b)
{
    string $ctl = `MGP_getSimpleEditColorControlName $mode`;
    if(!`button -q -ex $ctl`)
    {
        return;
    }
    button -e -bgc $r $g $b $ctl; 
}

global proc string[] MGP_getSelectionNonDuplicateNamespaces (int $deselectNoNS, int $maximum)
{
    string $result[];
    string $selectItem [] = `ls -sl -ro`;
    if (size($selectItem)==0){select -cl; return $result;}
    int $index = 0;
    for($obj in $selectItem)
    {
        string $ns = `MGP_GetNamespaceViaObj $obj`;
        if(size($ns))
        {
            if(!`stringArrayContains $ns $result`)
            {
                $result[size($result)] = $ns;
                if($deselectNoNS && $index > $maximum)  //add one more null items so it could be wraned.
                {
                    select -d $obj;
                    break;
                }
                $index ++;
                continue;
            }
            else
            {               
                    select -d $obj;
            }
        }
        if($deselectNoNS)
        {
            select -d $obj;
        }
    }
    return `stringArrayRemoveDuplicates $result`;
}
global proc string MGP_getSelectionNamespace ()
{
    return `MGPickerService -q -namespaceFromSelection 1`;
    /*
    // approach below not works for layered reference or imported object.
    string $selectItem [] = `ls -sl -ro`;
    if (size($selectItem)==0){return "";}
    string $node = $selectItem[0];
    if(!`referenceQuery -isNodeReferenced $node`)
    {
        return "";
    }
    string $filepath = `referenceQuery -filename $node`;
    return `file -q -rpr $filepath`;
    */
}

proc int mgp_isStringNumber(string $str)
{
    return `gmatch $str "[0-9]*"`;
}
proc int mgp_namespaceMatch(string $nsToFind, string $nsMatching)
{
        //print ("ns to find: "+$nsToFind+", "+$nsMatching+"\n");
    int $findSize = size($nsToFind);
    int $matchSize = size($nsMatching);
    if(!$findSize || !$matchSize)
    {
        return 0;
    }
    if($nsToFind == $nsMatching)
    {
        return 1;
    }
    if(!`startsWith $nsToFind $nsMatching`)
    {
        return 0;
    }
    string $trail = `substring $nsToFind ($matchSize+1) $findSize`;
    if(`mgp_isStringNumber $trail`)
    {
        return 1;
    }
    //if ns to find is "ns:ns1" and match ns is "ns:", then we return 2:
    if(`startsWith $trail ":"`)
    {
        return 2;
    }
    return 0;
    
}
proc string [] mgp_findMGPickerInScene(string $ns)
{
    global string $MGPicker_SceneData_NameAttr;
    global string $MGPicker_SceneData_NsAttr;    
    global string $MGPicker_SceneDataNodeType;    
    string $nodes[]=`ls -type $MGPicker_SceneDataNodeType`;
    int $nodeSize = size($nodes);
    if(!$nodeSize)
    {
        return {};
    }
    string $results[];
    string $pickerName,$cNamespace,$data;
    for($n in $nodes)
    {        
        //get namespace form node name:
        $cNamespace = `MGP_GetNamespaceViaObj $n`;
        if(`mgp_namespaceMatch $ns $cNamespace`)
        {
            $results[size($results)] = $n;
            continue;
        }
        //get namespace for node attribute:
        if(!`attributeExists $MGPicker_SceneData_NsAttr $n`)
        {
            continue;
        }
        $cNamespace = getAttr ($n+"."+$MGPicker_SceneData_NsAttr);
        if(`mgp_namespaceMatch $ns $cNamespace`)
        {
            $results[size($results)] = $n;
            continue;
        }
        //get picker name attr:
        if(!`attributeExists $MGPicker_SceneData_NameAttr $n`)
        {
            continue;
        }
        $pickerName = getAttr ($n+"."+$MGPicker_SceneData_NameAttr);
        if(`mgp_namespaceMatch $ns $pickerName`)
        {
            $results[size($results)] = $n;
        }
    }
    return $results;
}
proc string [] mgp_findOtherPickerInSceneFollowedReader(string $ns)
{
    string $results[];
    string $converts[]= `mgp_listAllPkrConverters`;
    for($converter in $converts)
    {
        string $lister = `mgp_getPickerConverterProc_nodeLister $converter`;
        string $reader = `mgp_getPickerConverterProc_readNode $converter`;
        string $getNS = `mgp_getPickerConverterProc_getNamespace $converter`;
        if(!`exists $lister` || !`exists $getNS` || !`exists $reader`)
        {
            continue;
        }
        string $pkrNodes[]=`eval $lister`;
        if(!size($pkrNodes))
        {
            continue;
        }       
        //print $pkrNodes;
        for($each in $pkrNodes)
        {
            string $cmd = ($getNS+" \""+$each+"\"");
            string $cNamespace = `eval $cmd`;
            if(`mgp_namespaceMatch $ns $cNamespace`)
      {
          $results[size($results)] = $each;
          $results[size($results)] = $reader;
          continue;
      }
        }
    }
    return $results;    
}
proc string mgp_readNamespaceFromPickerFile(string $file)
{
    int $fileId=`fopen $file "r"`;
    if(!$fileId)
    {
        return "";
    }
    string $nextLine = `fgetline $fileId`;
    string $cLine;
    int $lineCount = 1;
    while (!`feof $fileId`) 
    {
        if($lineCount >= 7)     //we read 7 lines maximum.
        {
            fclose $fileId;
            return "";
        }
        $nextLine = `fgetline $fileId`;
        $cLine = `strip $nextLine`;
        if(`startsWith $cLine "<namespace>"`)
        {
            string $temp1[]= `stringToStringArray $cLine ">"`;
            string $temp2[]=`stringToStringArray $temp1[1] "<"`;            
            fclose $fileId;
            return `strip $temp2[0]`;
        }
        $lineCount ++;
    }
    fclose $fileId;
}
proc string [] mgp_findPickerInDir_doit(string $dir,string $ns)
{
    string $result[];
    if(!`size $dir` || !`filetest -d $dir`)
    {
        return $result;
    }
    if(!`endsWith $dir "/"`)
    {
        $dir += "/";
    }
    string $pkrDirs[]=`mgp_ListAllSubFolders $dir`;
    if(!size($pkrDirs))
    {
        return $result;
    }
    string $cDir;
    string $cNs,$cFilePath;
    string $pkrFirs[];
    for($pkrDir in $pkrDirs)
    {
        $cDir = $dir+$pkrDir+"/";
        $pkrFiles = `getFileList -fld $cDir -fs "*.mgpkr"`;
        for($f in $pkrFiles)
        {
            string $bn = `basename $f ".mgpkr"`;
            $cFilePath = ($cDir+$f);
            if(`mgp_namespaceMatch $ns $bn`)
            {
                $result[size($result)] = $cFilePath;
                continue;
            }
            else
            {
                $cNs = `mgp_readNamespaceFromPickerFile  $cFilePath`;
                if(`mgp_namespaceMatch $ns $cNs`)
                {
                    $result[size($result)] = $cFilePath;
                    continue;
                }
            }
        }
    }
    return $result;    
}

proc string [] mgp_findPickerInPickerProject_doit(string $projName,string $ns)
{
    string $projDir = `MGP_getPkrDataDirectory`+$projName+"/";
    return `mgp_findPickerInDir_doit $projDir $ns`;
}
proc int mgp_findAndLoadPicker_inScene(string $ns)
{
        //print "mgp_findAndLoadPicker_inScene\n";
        string $matchPkrNodes[] = `mgp_findMGPickerInScene $ns`;
    int $mgNodeSize = size($matchPkrNodes);
    if($mgNodeSize)
    {
        for($n in $matchPkrNodes)
        {
            mgp_readSceneMGPickerNode $n;
        }
    }
    //then find other type of picker nodes in scene via converters:
    string $otherPickerNodesAndReaders[]=`mgp_findOtherPickerInSceneFollowedReader $ns`;
    //print "$otherPickerNodesAndReaders:\n";
    //print $otherPickerNodesAndReaders;
    int $otherSize = size($otherPickerNodesAndReaders);
    if($otherSize)
    {
        for($i=0; $i<$otherSize; $i+=2)
        {
            string $cmd = ($otherPickerNodesAndReaders[$i+1]+" \""+$otherPickerNodesAndReaders[$i]+"\"");
            eval $cmd;
        }
    }
    //if nodes are found, we dont need to continue the files:
    if($mgNodeSize || $otherSize)
    { 
        return 1;
    }
    return 0;
}

proc int mgp_findAndLoadPicker_viaDir(string $dir,string $ns)
{
        string $matchPkrFiles[] = `mgp_findPickerInDir_doit $dir  $ns`;
        //print $ns;
        //print $matchPkrFiles;
    if(size($matchPkrFiles))
    {
        for($f in $matchPkrFiles)
        {
            if(`mgp_loadPickerFileIfNotLoadedAndEditNamespace $f $ns 1`)
            {
                    return 1;
                }
        }
    }
    return 0;
}
proc int mgp_findAndLoadPicker_inLocalProject(string $ns)
{
        //below we start to search files, but for files, only MG-Picker file is supported.
    //if not find in scene,find in the default project:
        string $defaultProj = `mgp_getCurrentProjectName`;
        
        string $defaultProjectMatches[] = mgp_findPickerInPickerProject_doit($defaultProj,$ns);
        if(`size $defaultProjectMatches`)
        {
            for($f in $defaultProjectMatches)
      {
          if(`mgp_loadPickerFileIfNotLoadedAndEditNamespace $f $ns 1`)
                {
                    return 1;
                }
      }
        }
        return 0;  //no we don't want to search other project:
        /*
    //if not find above,find in all the other projects:
    string $dataDir = `MGP_getPkrDataDirectory`;
    string $allProjs[]=`mgp_ListAllSubFolders $dataDir`;
    
    for($proj in $allProjs)
    {
        if($proj == $defaultProj)
        {
            continue;
        }
        string $otherProjectMatches[] = `mgp_findPickerInPickerProject_doit $proj $ns`;
        if(`size $otherProjectMatches`)
                {
                    for($f in $otherProjectMatches)
              {
                  MGPicker -e -readPickerFile $f;
              }
              return 1;
                }
    }
    return 0;
    */
}
proc int mgp_findPickerViaSceneSlashPickersDirViaSelection()
{   
    global string $MGPicker_pickerFileExtension;
    global string $MGPicker_WithScene_Folder;
    string $sel[]=`ls -sl`;
    //if nothing selected, we open the picker for current scene:
    if(!size($sel))
    {
        string $sn = `file -q -sn`;
        //print $sn;
        if(size($sn))
        {
            //string $ns = "";
            string $dir = `dirname $sn`;
            string $fn = `basenameEx $sn`;
            string $pickerPath = $dir + "/" + $MGPicker_WithScene_Folder + "/" + $fn + "/" + $fn + $MGPicker_pickerFileExtension;
            //print ($pickerPath+"\n");
            if(`filetest -f $pickerPath`)
            {
                    if(`mgp_loadPickerFileIfNotLoadedAndEditNamespace $pickerPath "" 1`)
            {
                    return 1;
                }
            }
            else
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }   
    }
    string $pathes[];
    int $result = 0;
    for($node in $sel)
    {
        if(!`referenceQuery -isNodeReferenced $node`)
        {
            continue;
        }
        string $filepath = `referenceQuery  -filename $node`;
        string $ns = `file -q -rpr $filepath`;
        string $dir = `dirname $filepath`;
        string $fn = `basenameEx $filepath`;
        string $pickerPath = $dir + "/" + $MGPicker_WithScene_Folder + "/" +$fn + "/" + $fn + $MGPicker_pickerFileExtension;
        if(!`stringArrayContains $dir $pathes`)
        {
            //print ($pickerPath+"\n");
            if(`filetest -f $pickerPath`)
            {
                if(`mgp_loadPickerFileIfNotLoadedAndEditNamespace $pickerPath $ns 1`)
                {                   
                $result = 1;  
              }
            }
            $pathes[size($pathes)] = $dir;
        }
    }
    return $result;
}
proc int mgp_findPickerViaSceneSlashPickersDir(string $ns)
{
    if(!`size $ns`)
    {
        return 0;
    }
    //print "find: mgp_findPickerViaSceneSlashPickersDir\n";
    global string $MGPicker_pickerFileExtension;
    global string $MGPicker_WithScene_Folder;
    string $nodes[] = `ls -dagObjects ($ns+":*")`;
    string $node = $nodes[0];
    if(!size($node))
    {
        return 0;
    }
    int $result = 0;
    string $filepath = `referenceQuery  -filename $node`;
    string $fileNS = `file -q -rpr $filepath`;
    string $dir = `dirname $filepath`;
    string $fn = `basenameEx $filepath`;
    string $pickerPath = $dir + "/" + $MGPicker_WithScene_Folder + "/" +$fn + "/" + $fn + $MGPicker_pickerFileExtension;

    if(`filetest -f $pickerPath`)
    {
        if(`mgp_loadPickerFileIfNotLoadedAndEditNamespace $pickerPath $fileNS 1`)
        {
            $result = 1;
        }
    }
    return $result;
}
proc int mgp_findAndLoadPickerUsingPythonAutoLoader(string $ns)
{
    string $cmd = "import MGP;MGP.MGP_LoadMGPickerViaPythonAutoLoaders('"+$ns+"')";
    return `python $cmd`;
}
proc int mgp_findAndLoadPicker_doit(string $ns)
{
    if(`mgp_findAndLoadPickerUsingPythonAutoLoader $ns`)
    {
        return 1;
    }
      global string $MGPicker_InScene_DummyName;
    global string $MGPicker_WithScene_DummyName;
    global string $MGPicker_Local_DummyName;
        string $orders[] =`mgp_getSearchingOrder`;
        //print $orders;
        for($path in $orders)
        {
            if($path == $MGPicker_InScene_DummyName)
            {
                if(`mgp_findAndLoadPicker_inScene $ns`)
                {
                    MGP_ScriptEditorFeedback(("["+$ns+"]:"+`MGP_MultiLanguage "pkr.search.FoundNode"`),0);
                    return 1;
                }
                MGP_ScriptEditorFeedback(("["+$ns+"]:"+`MGP_MultiLanguage "pkr.search.canotFindNode"`),0);
                //print "Not in scene!\n";
            }
            else if($path == $MGPicker_WithScene_DummyName)
            {
                if(`mgp_findPickerViaSceneSlashPickersDir $ns`)
                {
                    MGP_ScriptEditorFeedback(("["+$ns+"]:"+`MGP_MultiLanguage "pkr.search.FoundScenePickersDir"`),0);
                    return 1;
                }
                MGP_ScriptEditorFeedback(("["+$ns+"]:"+`MGP_MultiLanguage "pkr.search.canotFindScenePickersDir"`),0);
            }
            else if($path == $MGPicker_Local_DummyName)
            {
                string $project = `mgp_getCurrentProjectName`;
                if(`size $ns`)
                {
                    if(`mgp_findAndLoadPicker_inLocalProject $ns`)
                    {
                        MGP_ScriptEditorFeedback(("["+$ns+"]:"+`MGP_MultiLanguage_rep1 "pkr.search.foundInProject" $project`) ,0);
                        return 1;
                    }
                    MGP_ScriptEditorFeedback(("["+$ns+"]:"+`MGP_MultiLanguage_rep1 "pkr.search.canotFindInProject" $project`) ,0);
                }   
                else
                {
                    MGP_ScriptEditorFeedback(("["+$ns+"]:"+`MGP_MultiLanguage_rep1 "pkr.search.noNSToSearchProj" $project`) ,0);
                }
            }
            else
            {
                if(`size $ns`)
                {                   
                    if(!`size $path`)
                    {
                        continue;
                    }           
                    if(!`filetest -d $path`)
                    {
                        MGP_ScriptEditorFeedback(("["+$ns+"]:"+`MGP_MultiLanguage_rep1 "pkr.search.noExistDirToSearch" $path`),0);  
                        continue;
                    }
                    if(`mgp_findAndLoadPicker_viaDir  $path $ns`)
                    {
                        MGP_ScriptEditorFeedback(("["+$ns+"]:"+`MGP_MultiLanguage_rep1 "pkr.search.foundInDir" $path`),0);          
                        return 1;
                    }
                    MGP_ScriptEditorFeedback(("["+$ns+"]:"+`MGP_MultiLanguage_rep1 "pkr.search.canotFindInDir" $path`),0);                  
                }
                else
                {                   
                    MGP_ScriptEditorFeedback(("["+$ns+"]:"+`MGP_MultiLanguage_rep1 "pkr.search.noNSToSearchDir" $path`),0);
                }
            }
        }
        
        //now check out the failsaved picker:
        string $fallbackPicker = strip(`MGPicker -q -fallbackPicker`);
        if(size($fallbackPicker) && $fallbackPicker!=$ns)
        {
            int $result = `mgp_findAndLoadPicker_doit $fallbackPicker`;
            if($result)
            {
                MGPickerView -e -ns $ns;
                MGPickerView -e -tabLabel $ns;
                return 1;  
            }
        }
        return 0;    
}
global proc int MGP_FindAndLoadPickerForName(string $ns)
{
    return mgp_findAndLoadPicker_doit($ns);
}
global proc MGP_LoadGenericPicker(string $pickerName)
{
        string $sel[]=`ls -sl`;
        
        int $alreadyOpened = 0;
        //if mgpicker node is selected:
        if(size($sel))
        {
            global string $MGPicker_SceneDataNodeType;    
            for($node in $sel)
            {
                if(`nodeType $node` == $MGPicker_SceneDataNodeType)
                {
                    if(`mgp_readSceneMGPickerNode $node`)
                    {
                        select -d $node;
                        $alreadyOpened ++;
                    }
                }
            }
        }
        int $maximumCount = 4;
    string $nss[] = `MGP_getSelectionNonDuplicateNamespaces 0 $maximumCount`;
    int $count = `MGPicker -q -pickerAreaCount`;
    int $charSize = size($nss);
    if(!$charSize)
    {
            MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.noMatchFound.noNs.war"` 1;
            if($alreadyOpened)
            {
                print "\n";
            }
        return;
    }
    int $activeAreaNeeded = $charSize > 1 && $count  > 1;
    int $cIndex = 0;   
    for($ns in $nss)
    {
        if($cIndex >= $maximumCount)
        {
            MGP_ScriptEditorFeedback `MGP_MultiLanguage_rep1 "pkr.search.exceedMaximum.war" $maximumCount` 1;
            if($alreadyOpened)
            {
                print "\n";
            }
            return;
        }
        if($activeAreaNeeded)
        {
            int $activeArea = $cIndex % $count;
            //print ("Active area: "+$activeArea+"\n");
            MGPicker -e -activePickerArea $activeArea;
        }
        if(!`mgp_findAndLoadPicker_doit $pickerName`)
        {       
            MGP_ScriptEditorFeedback ("["+$ns+"]:"+`MGP_MultiLanguage "pkr.noMatchFound.hasNs.war"`) 0;
        }
        else
        {
            $cIndex ++;
            MGPickerView -e -ns $ns;
            MGPickerView -e -tabLabel $ns;
        }
    }
}
global proc MGP_FindAndLoadPicker()
{
    string $sel[]=`ls -sl`;
    
    int $alreadyOpened = 0;
    //if mgpicker node is selected:
    if(size($sel))
    {
        global string $MGPicker_SceneDataNodeType;    
        for($node in $sel)
        {
            if(`nodeType $node` == $MGPicker_SceneDataNodeType)
            {
                if(`mgp_readSceneMGPickerNode $node`)
                {
                    select -d $node;
                    $alreadyOpened ++;
                }
            }
        }
    }
    int $maximumCount = 4;
    string $nss[] = `MGP_getSelectionNonDuplicateNamespaces 0 $maximumCount`;
    int $count = `MGPicker -q -pickerAreaCount`;
    int $charSize = size($nss);
    if(!$charSize)
    {
            MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.noMatchFound.noNs.war"` 1;
            if($alreadyOpened)
            {
                print "\n";
            }
        return;
    }
    int $activeAreaNeeded = $charSize > 1 && $count  > 1;
    int $cIndex = 0;   
    for($ns in $nss)
    {
        if($cIndex >= $maximumCount)
        {
            MGP_ScriptEditorFeedback `MGP_MultiLanguage_rep1 "pkr.search.exceedMaximum.war" $maximumCount` 1;
            if($alreadyOpened)
            {
                print "\n";
            }
            return;
        }
        if($activeAreaNeeded)
        {
            int $activeArea = $cIndex % $count;
            //print ("Active area: "+$activeArea+"\n");
            MGPicker -e -activePickerArea $activeArea;
        }
        if(!`mgp_findAndLoadPicker_doit $ns`)
        {       
            MGP_ScriptEditorFeedback ("["+$ns+"]:"+`MGP_MultiLanguage "pkr.noMatchFound.hasNs.war"`) 0;
        }
        else
        {
            $cIndex ++;
        }
    }
}

global proc MGP_RefreshAndReloadAllLoaderMenu()
{
    string $cmd = "catch (`python \"import MGP;MGP.loadermanager.MGPickerLoaderManager.refreshAndRebuildLoadAllMenu('MGP_LoadAllPickersMenu')\"`)";
    evalDeferred $cmd;
}
//config ui codes-------------------------------------------

global proc MGP_ConfigChangeCommand(string $id)
{
    global string $MGPicker_Config_LanID;
    global string $MGPicker_Config_DefaultPanelLayoutID;
    global string $MGPicker_Config_ShapeAntialiasingID;
    //global string $MGPicker_Config_TextAntialiasingID;
    global string $MGPicker_Config_ScrollBarVisibleID;
    
    global string $MGPicker_Config_AutoloadScenePkrID;
    global string $MGPicker_Config_AutoClosePkrID;
    global string $MGPicker_Config_LinkOpacityID;
    global string $MGPicker_Config_PanelSpacingID;
    global string $MGPicker_Config_SelBtnSizeID;
    global string $MGPicker_Config_DefaultPanelSizeID;
    global string $MGPicker_Config_PanelPresetID;
    global string $MGPicker_Config_DisplayWhenAttrNudgingID;
    global string $MGPicker_Config_CrossLineColID;
    global string  $MGPicker_Config_WarnSaveIssueID;
    global string  $MGPicker_Config_SearchingOrderID;
    
    global string $MGPicker_Config_PoseButtonImageSizeID;
    global string $MGPicker_Config_PoseButtonImageMarginID;
    
    global string $MGPicker_Config_ShowMenuIndicator;
    global string $MGPicker_Config_StayOnTop;
    global string $MGPicker_Config_RenameTablabel;
    
    global string $MGPicker_Config_FilterAttrButton;
    
    string $value;
    if($id == $MGPicker_Config_LanID)
    {
        $value = `optionMenuGrp -q -v MGP_Config_UILanOM`;
    }
    else if($id == $MGPicker_Config_ShapeAntialiasingID)
    {
        $value = `checkBoxGrp -q -v1 MGP_Config_AntiAliasingCBG`;
        //todo: apply config here but save config with c++:
    }
    //else if($id == $MGPicker_Config_TextAntialiasingID)
    //{
    //    $value = `checkBoxGrp -q -v2 MGP_Config_AntiAliasingCBG`;
        //todo: apply config here but save config with c++:
    //}
    else if($id == $MGPicker_Config_ScrollBarVisibleID)
    {
        $value = `checkBoxGrp -q -v1 MGP_Config_ScrollBarVisibleCBG`;
    }
    else if($id == $MGPicker_Config_AutoloadScenePkrID)
    {
        $value = `checkBoxGrp -q -v1 MGP_Config_AutoLoadSceneNodeCBG`;
    }
    else if($id == $MGPicker_Config_AutoClosePkrID)
    {
        $value = `checkBoxGrp -q -v1 MGP_Config_AutoCloseUnrelatedCBG`;
    }
    else if($id == $MGPicker_Config_LinkOpacityID)
    {
        $value = `intSliderGrp -q -v MGP_Config_LinkOpacityISG`;
    }
    else if($id == $MGPicker_Config_PanelSpacingID)
    {
        $value = `intSliderGrp -q -v MGP_Config_PanelGapISG`;
    }
    else if($id == $MGPicker_Config_SelBtnSizeID)
    {
        $value = `intFieldGrp -q -v1 MGP_Config_SelBtnSizeIFG`+" "+`intFieldGrp -q -v2 MGP_Config_SelBtnSizeIFG`;
    }
    else if($id == $MGPicker_Config_DefaultPanelSizeID)
    {
        $value = `intFieldGrp -q -v1 MGP_Config_DefaultPanelSizeIFG`+" "+`intFieldGrp -q -v2 MGP_Config_DefaultPanelSizeIFG`;
    }
    else if($id == $MGPicker_Config_PoseButtonImageSizeID)
    {
        $value = `intFieldGrp -q -v1 MGP_Config_PoseImageSizeIFG`+" "+`intFieldGrp -q -v2 MGP_Config_PoseImageSizeIFG`;
    }
    else if($id == $MGPicker_Config_PoseButtonImageMarginID)
    {
        $value = `intFieldGrp -q -v1 MGP_Config_PoseImageMarginIFG`;
    }
    else if($id == $MGPicker_Config_DisplayWhenAttrNudgingID)
    {
        $value = `checkBoxGrp -q -v1 MGP_Config_DisplayWhenNudgingCBG`;
    }
    else if($id == $MGPicker_Config_WarnSaveIssueID)
    {
        $value = `checkBoxGrp -q -v1 MGP_Config_WarnSaveIssueCBG`;
    }
    else if($id == $MGPicker_Config_CrossLineColID)
    {
        float $rgb[]= `colorSliderGrp -q -rgb  MGP_Config_CrossLineCol_CSG`;
        $value = $rgb[0]+","+$rgb[1]+","+$rgb[2];
    }
    else if($id == $MGPicker_Config_PanelPresetID)
    {
            string $presets[] = `textScrollList -q -ai MGP_Config_PanelPreset_TSL`;
            $value = `stringArrayToString $presets "|"`;
    }
    else if($id == $MGPicker_Config_DefaultPanelLayoutID)
    {
            $value = `optionMenuGrp -q -sl MGP_Config_DefaultPanelLayoutOMG`-1; 
    }
    else if($id == $MGPicker_Config_SearchingOrderID)
    {
            string $pathes[] = `textScrollList -q -ai MGP_Config_SearchPath_TSL`;
            global string $MGPicker_SearchOrder[];
            $MGPicker_SearchOrder = $pathes;
            $value = `stringArrayToString $pathes "|"`;
    }
    else if($id == $MGPicker_Config_StayOnTop)
    {
            $value = `checkBoxGrp -q -v1 MGP_Config_StayOnTopCBG`;
    }
    else if($id == $MGPicker_Config_ShowMenuIndicator)
    {
            $value = `checkBoxGrp -q -v1 MGP_Config_ShowMenuTriangleCBG`;
    }
    else if($id == $MGPicker_Config_RenameTablabel)
    {
            $value = `checkBoxGrp -q -v1 MGP_Config_RenameTablabelCBG`;
    }        
    else if($id == $MGPicker_Config_FilterAttrButton)
    {
            $value = `checkBoxGrp -q -v1 MGP_Config_FilterAttrBtnCBG`;
    }
    if(size($value))
    {
        MGPicker -e -config $id $value;
    }   
}
proc mgp_searchingOrder_saveChange()
{
    global string  $MGPicker_Config_SearchingOrderID;
    MGP_ConfigChangeCommand $MGPicker_Config_SearchingOrderID;
}
proc mgp_searchingOrder_addPath()
{
    string $okCaption = `MGP_MultiLanguage "pkr.add"`;
    string $caption = `MGP_MultiLanguage "pkr.addSerachPath.ann"`;
    string $result[] = `fileDialog2 -dialogStyle 2 -fileMode 3 -okCaption $okCaption -caption $caption -startingDirectory ""`;
  string $foldername =$result[0];
  if(!size($foldername))
  {
    return;
  }
  string $localPath = `MGP_getPkrDataDirectory`;
  $localPath  = `substring $localPath 1 (size($localPath)-1)`;
  if(`startsWith $foldername $localPath`)
  {
    return;
  }
    string $ai[]=`textScrollList -q -ai MGP_Config_SearchPath_TSL`;
    if(`stringArrayContains $foldername $ai`)
    {
        return;
    }
    textScrollList -e -append $foldername MGP_Config_SearchPath_TSL;
    textScrollList -e -da  MGP_Config_SearchPath_TSL;
    textScrollList -e -sii `textScrollList -q -ni MGP_Config_SearchPath_TSL` MGP_Config_SearchPath_TSL;
}
global proc MGP_SearchingOrderTSL_Commands(int $mode)
//$mode 0: add path;
//$mode 1: remove selected path;
//$mode 2: move selected path up;
//$mode 3: move selected path down;
{
    if(!$mode)
    {
        mgp_searchingOrder_addPath;
    }
    else if($mode == 1)
    {
        string $si[]=`textScrollList -q -si MGP_Config_SearchPath_TSL`;
        string $pathToRemove = $si[0];
        if(!`size $pathToRemove`)
        {
            return;
        }
    global string $MGPicker_InScene_DummyName;
    global string $MGPicker_WithScene_DummyName;
    global string $MGPicker_Local_DummyName;
    if($pathToRemove == $MGPicker_InScene_DummyName 
            || $pathToRemove == $MGPicker_WithScene_DummyName
            ||  $pathToRemove == $MGPicker_Local_DummyName)
    {
        return;
    }
    textScrollList -e -ri $pathToRemove MGP_Config_SearchPath_TSL;
    }
    else
    {
        int $sii[]=`textScrollList -q -sii MGP_Config_SearchPath_TSL`;
        if(!size($sii))
        {
            return;
        }
        string $si[]=`textScrollList -q -si MGP_Config_SearchPath_TSL`;
        string $thePath = $si[0];
        
        int $index = $sii[0];
        int $totalLen = `textScrollList -q -ni MGP_Config_SearchPath_TSL`;
        
        if($mode == 2) //moving up
        {
            if($index == 1)
            {
                return;
            }
            textScrollList -e -rii $index MGP_Config_SearchPath_TSL;
            textScrollList -e -ap ($index-1) $thePath MGP_Config_SearchPath_TSL;
            textScrollList -e -da MGP_Config_SearchPath_TSL;
            textScrollList -e -sii ($index-1) MGP_Config_SearchPath_TSL;
        }
        else //moving dn
        {
            if($index == ($totalLen))
            {
                return;
            }
            textScrollList -e -rii $index MGP_Config_SearchPath_TSL;
            textScrollList -e -ap ($index+1) $thePath MGP_Config_SearchPath_TSL;
            textScrollList -e -da MGP_Config_SearchPath_TSL;
            textScrollList -e -sii ($index+1) MGP_Config_SearchPath_TSL;
        }
    }
    mgp_searchingOrder_saveChange;
}
proc mgp_panelpreset_addPath()
{
    string $okCaption = `MGP_MultiLanguage "pkr.add"`;
  string $cancel = `MGP_MultiLanguage "pkr.cancel"`;
    string $caption = `MGP_MultiLanguage "pkr.addpanelPresets.ann"`;
    string $answer = `promptDialog -title $caption -button $okCaption -button $cancel`;
    if($answer == $cancel)
    {
        return;
    }
  string $result = `promptDialog -q -text`;
  if(!size($result))
  {
    return;
  }
  string $ai[]=`textScrollList -q -allItems MGP_Config_PanelPreset_TSL`;
  int $index = 1;
  for($a in $ai)
  {
    if($a == $result)
    {       
            textScrollList -e -da  MGP_Config_PanelPreset_TSL;
            textScrollList -e -sii $index MGP_Config_PanelPreset_TSL;
            return;
    }
    $index ++;
  }
    textScrollList -e -append $result MGP_Config_PanelPreset_TSL;
    textScrollList -e -da  MGP_Config_PanelPreset_TSL;
    textScrollList -e -sii `textScrollList -q -ni MGP_Config_PanelPreset_TSL` MGP_Config_PanelPreset_TSL;
}
proc mgp_panelPreset_saveChange()
{
    global string $MGPicker_Config_PanelPresetID;
    MGP_ConfigChangeCommand $MGPicker_Config_PanelPresetID;
}
global proc MGP_PanelPresetTSL_Commands(int $mode)
//$mode 0: add preset name;
//$mode 1: remove selected preset;
//$mode 2: move selected preset up;
//$mode 3: move selected preset down;
{
    if(!$mode)
    {
        mgp_panelpreset_addPath;
    }
    else if($mode == 1)
    {
        string $si[]=`textScrollList -q -si MGP_Config_PanelPreset_TSL`;
        string $pathToRemove = $si[0];
        if(!`size $pathToRemove`)
        {
            return;
        }
    textScrollList -e -ri $pathToRemove MGP_Config_PanelPreset_TSL;
    }
    else
    {
        int $sii[]=`textScrollList -q -sii MGP_Config_PanelPreset_TSL`;
        if(!size($sii))
        {
            return;
        }
        string $si[]=`textScrollList -q -si MGP_Config_PanelPreset_TSL`;
        string $thePath = $si[0];
        
        int $index = $sii[0];
        int $totalLen = `textScrollList -q -ni MGP_Config_PanelPreset_TSL`;
        
        if($mode == 2) //moving up
        {
            if($index == 1)
            {
                return;
            }
            textScrollList -e -rii $index MGP_Config_PanelPreset_TSL;
            textScrollList -e -ap ($index-1) $thePath MGP_Config_PanelPreset_TSL;
            textScrollList -e -da MGP_Config_PanelPreset_TSL;
            textScrollList -e -sii ($index-1) MGP_Config_PanelPreset_TSL;
        }
        else //moving dn
        {
            if($index == ($totalLen))
            {
                return;
            }
            textScrollList -e -rii $index MGP_Config_PanelPreset_TSL;
            textScrollList -e -ap ($index+1) $thePath MGP_Config_PanelPreset_TSL;
            textScrollList -e -da MGP_Config_PanelPreset_TSL;
            textScrollList -e -sii ($index+1) MGP_Config_PanelPreset_TSL;
        }
    }   
    mgp_panelPreset_saveChange;
}
proc mgp_fillInSearchingOrderIntoTSL()
{
        string $orders[] =`mgp_getSearchingOrder`;
        textScrollList -e -ra MGP_Config_SearchPath_TSL;
        for($o in $orders)
        {
            textScrollList -e -append $o MGP_Config_SearchPath_TSL;
        }
}
global proc MGP_ResetConfig(int $mode)
//mode 0: reset all
//mode 1: reset generic config
//mode 2: reset animator mode
//mode 3: reset designer mode
//mode 4: reset searching directories 
{
    global string $MGPicker_Config_LanID;
    global string $MGPicker_Config_DefaultPanelLayoutID;
    global string $MGPicker_Config_ShapeAntialiasingID;
    //global string $MGPicker_Config_TextAntialiasingID;    
    global string $MGPicker_Config_ScrollBarVisibleID;
    
    global string $MGPicker_Config_AutoloadScenePkrID;
    global string $MGPicker_Config_AutoClosePkrID;
    global string $MGPicker_Config_LinkOpacityID;
    global string $MGPicker_Config_PanelSpacingID;
    global string $MGPicker_Config_SelBtnSizeID;    
    global string $MGPicker_Config_DefaultPanelSizeID;
    global string $MGPicker_Config_PanelPresetID;
    global string $MGPicker_Config_DisplayWhenAttrNudgingID;
    global string $MGPicker_Config_CrossLineColID;
    global string $MGPicker_Config_WarnSaveIssueID;
    
    global string $MGPicker_Config_PoseButtonImageSizeID;
    global string $MGPicker_Config_PoseButtonImageMarginID;
    
    global string $MGPicker_Config_ShowMenuIndicator;
    global string $MGPicker_Config_StayOnTop;
    global string $MGPicker_Config_RenameTablabel;
    global string $MGPicker_Config_FilterAttrButton;
    int $shapeAntialiasing = 1;
    //int $textAntialiasing = 1;
    int $scrollBarVisible = 1;
    int $autoloadSceneNode = 1;
    int $autocloseUnrelatedNode = 1;
    int $linkOpacity = 60;
    int $panelGap = 5;
    int $selBtnW = 10;
    int $selBtnH = 10;
    
    int $panelW = 260;
    int $panelH = 380;
    
    int $poseImageW = 90;
    int $poseImageH = 90;
    int $poseImageMargin = 5;
    int $displayReportWhenNudging = 1;
    int $warSaveIssueInPreviewMode = 1;
    int $panelLayout = 1;
    float $crossLineCol[]={1,1,1};
    
    if(!$mode || $mode == 1)
    {
        optionMenuGrp -e -v "English" MGP_Config_UILanOM;
        MGP_ConfigChangeCommand $MGPicker_Config_LanID;
          
        checkBoxGrp -e -v1 $shapeAntialiasing MGP_Config_AntiAliasingCBG;
        MGP_ConfigChangeCommand $MGPicker_Config_ShapeAntialiasingID;
        
        checkBoxGrp -e -v1 $scrollBarVisible MGP_Config_ScrollBarVisibleCBG;
        MGP_ConfigChangeCommand $MGPicker_Config_ScrollBarVisibleID;
                        
        checkBoxGrp -e -v1 0 MGP_Config_StayOnTopCBG;
        MGP_ConfigChangeCommand $MGPicker_Config_StayOnTop;
        
        checkBoxGrp -e -v1 1 MGP_Config_ShowMenuTriangleCBG;
        MGP_ConfigChangeCommand $MGPicker_Config_ShowMenuIndicator;
    }
    if(!$mode || $mode == 2)
    {
        checkBoxGrp -e  -v1 $autoloadSceneNode MGP_Config_AutoLoadSceneNodeCBG;
        MGP_ConfigChangeCommand $MGPicker_Config_AutoloadScenePkrID;
        
        checkBoxGrp -e  -v1 $autocloseUnrelatedNode MGP_Config_AutoCloseUnrelatedCBG;
        MGP_ConfigChangeCommand $MGPicker_Config_AutoClosePkrID;
        
        intSliderGrp -e -v $linkOpacity  MGP_Config_LinkOpacityISG;
        MGP_ConfigChangeCommand $MGPicker_Config_LinkOpacityID;  
        
        checkBoxGrp -e -v1 $warSaveIssueInPreviewMode MGP_Config_WarnSaveIssueCBG; 
        MGP_ConfigChangeCommand $MGPicker_Config_WarnSaveIssueID; 
        
        checkBoxGrp -e -v1 $displayReportWhenNudging MGP_Config_DisplayWhenNudgingCBG; 
        MGP_ConfigChangeCommand $MGPicker_Config_DisplayWhenAttrNudgingID; 
        
        checkBoxGrp -e -v1 1 MGP_Config_RenameTablabelCBG; 
        MGP_ConfigChangeCommand $MGPicker_Config_RenameTablabel; 
        
        checkBoxGrp -e -v1 1 MGP_Config_FilterAttrBtnCBG; 
        MGP_ConfigChangeCommand $MGPicker_Config_FilterAttrButton;
    }
    if(!$mode || $mode == 3)
    {
        intFieldGrp -e -value1 $poseImageW -value2 $poseImageH MGP_Config_PoseImageSizeIFG;   
        MGP_ConfigChangeCommand $MGPicker_Config_PoseButtonImageSizeID; 
        
        intFieldGrp -e -value1 $poseImageMargin MGP_Config_PoseImageMarginIFG;   
        MGP_ConfigChangeCommand $MGPicker_Config_PoseButtonImageMarginID; 
        
        intFieldGrp -e -value1 $panelW -value2 $panelH MGP_Config_DefaultPanelSizeIFG;   
        MGP_ConfigChangeCommand $MGPicker_Config_DefaultPanelSizeID; 
        
        intSliderGrp -e -v $panelGap  MGP_Config_PanelGapISG;   
        MGP_ConfigChangeCommand $MGPicker_Config_PanelSpacingID; 
        
        optionMenuGrp -e -sl $panelLayout MGP_Config_DefaultPanelLayoutOMG; 
        MGP_ConfigChangeCommand $MGPicker_Config_DefaultPanelLayoutID;
        
        intFieldGrp -e -v1 $selBtnW -v2 $selBtnH MGP_Config_SelBtnSizeIFG;   
        MGP_ConfigChangeCommand $MGPicker_Config_SelBtnSizeID; 
        
        colorSliderGrp -e -rgb $crossLineCol[0] $crossLineCol[1] $crossLineCol[2]  MGP_Config_CrossLineCol_CSG;   
        MGP_ConfigChangeCommand $MGPicker_Config_CrossLineColID;  
        
        string $presets[]=`MGP_GetPredifinedPanelPresets`;
                textScrollList -e -ra MGP_Config_PanelPreset_TSL;
                for($p in $presets)
                {
                    textScrollList -e -append $p MGP_Config_PanelPreset_TSL;
                }
        MGP_ConfigChangeCommand $MGPicker_Config_PanelPresetID;   
    }
    if(!$mode || $mode == 4)
    {
        textScrollList -e -ra  MGP_Config_SearchPath_TSL;
        
        global string $MGPicker_InScene_DummyName;
            global string $MGPicker_WithScene_DummyName;
        global string $MGPicker_Local_DummyName;
        textScrollList -e -a $MGPicker_InScene_DummyName MGP_Config_SearchPath_TSL;
        textScrollList -e -a $MGPicker_WithScene_DummyName MGP_Config_SearchPath_TSL;
        textScrollList -e -a $MGPicker_Local_DummyName MGP_Config_SearchPath_TSL;
        mgp_searchingOrder_saveChange;
    }
    if(!$mode || $mode == 5)
    {
        MGP_OnConnectorDir_ResetCommand;
    }
}

//the minimize picker toggle hotkey codes-----------------------
/*
global proc MGP_toggleMinimizeRuntimeProc()
{
    global string $MGPicker_WindowName; 
    global string $MGPicker_RestoreButton;
    if(!`window -q -ex $MGPicker_WindowName`)
    {
        MGPicker_UI 1;
    }
    else
    {
        int $winVis = `window -q -vis $MGPicker_WindowName`;
        if(!$winVis)
        {
            window -e -vis 1  $MGPicker_WindowName;
            int $minimized = `MGP_isMinimized`;
            if($minimized)
            {
                MGP_toggleMinimize;
            } 
            return;
        }
        MGP_toggleMinimize;
    }
}
proc mgp_makeMGPicker_MinimizeRuntimeCommand()
{
    global string $MGPicker_ToggleMinimizedRunTimeCommandName;
    if (!`runTimeCommand -exists $MGPicker_ToggleMinimizedRunTimeCommandName`) 
    {
        runTimeCommand -category "MGtools"
            -annotation "Toggle the minimize state of MG-Picker Studio. Will load it if it is not loaded yet."
            -command ("MGP_toggleMinimizeRuntimeProc")
            $MGPicker_ToggleMinimizedRunTimeCommandName;
    }
}
proc string mgp_constructHotkeyCommand(
    string $key,
    int    $ctrl,
    int    $alt,
    int     $cmd,
    int    $press,
    int    $repeat,
    string $command)
{
    //  Must surround the key string in double quote characters.
    //
    string $result = ("hotkey -k \"");

    //  Must preceed back slashes and double quote characters with
    //  a backslash.
    //
    if ("\\" == $key || "\"" == $key) $key = "\\" + $key;
    
    $result += ($key + "\" ");

    if ($ctrl) $result += "-ctl ";
    if ($alt) $result += "-alt ";
    if ($cmd) $result += "-cmd ";

    if ($press) $result += "-name \"";
    else $result += "-releaseName \"";

    $result += ($command + "\" ");

    if ($press) $result += "-pressCommandRepeat ";
    else $result += "-releaseCommandRepeat ";

    $result += $repeat;
    
    return $result;
}
proc int mgp_getNameCommand(string $nameCommand)
{
    int $result = 0, $index;
    int $numberOfNameCommands = `assignCommand -query -numElements`;

    for ($index = 1; $index <= $numberOfNameCommands; $index++) {
        if ($nameCommand == `assignCommand -query -name $index`) {
            $result = $index;
            break;
        }
    }

    return $result;
}
proc string mgp_getRunTimeCommandFromNameCommand(string $nameCommand)
//
//  Description:
//      Return the runTimeCommand that is invoked by the specified 
//      nameCommand.
//
{
    string $result = "";
    int $index, $numberOfNameCommands;

    $numberOfNameCommands = `assignCommand -query -numElements`;
    for ($index = 1; $index <= $numberOfNameCommands; $index++) {
        if ($nameCommand == `assignCommand -query -name $index`) {
            $result = `assignCommand -query -command $index`;
            break;
        }
    }
    
    if (!`runTimeCommand -exists $result`) $result = "";
    
    return $result;
}
proc string mgp_getHotkeyCommandNew (
    string $key,
    int    $ctrl,
    int    $alt,
    int    $command,
    int    $press)
{
    string $result = "";
    string $nameCommand = "";

    string $hotkeyQueryCommand = "hotkey -query ";
    if ($ctrl) $hotkeyQueryCommand += "-ctl ";
    if ($alt) $hotkeyQueryCommand += "-alt ";
    if($command) $hotkeyQueryCommand += "-cmd ";
    if ($press) $hotkeyQueryCommand += "-name ";
    else $hotkeyQueryCommand += "-releaseName ";

    if ("\"" == $key || "\\" == $key) 
    {
        $hotkeyQueryCommand += ("\"\\" + $key + "\"");

    } 
    else if ("-" == $key) 
    {
        $hotkeyQueryCommand += ("Dash");

    } 
    else 
    {
        $hotkeyQueryCommand += ("\"" + $key + "\"");
    }
    $nameCommand = eval($hotkeyQueryCommand);

    if ("" != $nameCommand) 
    {
        string $runTimeCommand = mgp_getRunTimeCommandFromNameCommand($nameCommand);
        if ("" != $runTimeCommand) 
        {
            $result = $runTimeCommand;
            
        } 
        else 
        {
            $result = $nameCommand;
        }
    }   
    return $result;
}
proc string mgp_getHotkeyCommand(
    string $key,
    int    $ctrl,
    int    $alt,
    int    $cmd,
    int    $press)
{
    if(`about -mac`){
        return  (mgp_getHotkeyCommandNew ($key, $ctrl, $alt,  $cmd, $press));
    }

    return  (mgp_getHotkeyCommandNew ($key, $ctrl, $alt,  false, $press));
}*/
/*
proc MGP_AssignMinimizedHotkey_Doit(string $key, int $ctrl, int $alt)
{
  global string $MGPicker_ToggleMinimizedRunTimeCommandName;
    string $runTimeCommand = $MGPicker_ToggleMinimizedRunTimeCommandName;
  int $press = 1;
    int $repeat = 0;
    int $cmd = 0;
    string $nameCommandName;
    int $nameCommandIndex;
    int $setUpReleaseHotkey = false;

    string $existingCommand = mgp_getHotkeyCommand($key, $ctrl, $alt, $cmd, $press);
    string $confirmResponse;

    if($runTimeCommand == $existingCommand) 
    {
        return;
    }
    global string $MGPicker_Config_AllowOtherF7HotkeyID;
    int $promptHotKey = 1;
    if(`optionVar -ex $MGPicker_Config_AllowOtherF7HotkeyID`)
    {
        $promptHotKey = 1-`optionVar -q $MGPicker_Config_AllowOtherF7HotkeyID`;
    }
    if ("" != $existingCommand) 
    {
        if($promptHotKey)
        {
        string $assign = `MGP_MultiLanguage "pkr.assign"`;
            string $cancel = `MGP_MultiLanguage "pkr.cancel"`;;
            string $displayMsg = `MGP_MultiLanguage_rep1 "pkr.hotkey.assigned" $existingCommand`;
            
            $confirmResponse = `confirmDialog -button $assign -button $cancel   
                -defaultButton $assign -cancelButton $cancel
                -message $displayMsg`;
            if ($assign != $confirmResponse) 
            {
                optionVar -iv $MGPicker_Config_AllowOtherF7HotkeyID 1;
                return;
            }
        }
    }

    if ($press) 
    {
        //  Check if there is a release command attached to the hotkey
        //  as well.
        $releaseCommand = mgp_getHotkeyCommand($key, $ctrl, $alt, $cmd, 0);

        if ("" != $releaseCommand) 
        {
            string $ok = `MGP_MultiLanguage "pkr.ok"`;
            string $displayMsg = `MGP_MultiLanguage_rep1 "pkr.hotkey.releaseAssign" $releaseCommand`;
             
            confirmDialog -button $ok -defaultButton $ok -cancelButton $ok 
                -message $displayMsg;
            $removeReleaseHotkeyCmd = mgp_constructHotkeyCommand(
                $key, $ctrl, $alt, $cmd, 0, 0, "");
            eval ($removeReleaseHotkeyCmd);
        }
    }

    $nameCommandName = $runTimeCommand + "NameCommand";
    $nameCommandIndex = mgp_getNameCommand($nameCommandName);


    if (0 == $nameCommandIndex) 
    {
        string $nameCommandCmd = "nameCommand -ann \"" + $nameCommandName 
            + "\" -command (\"" + $runTimeCommand + "\") " 
            + $nameCommandName;
        eval ($nameCommandCmd);
        $nameCommandIndex = mgp_getNameCommand($nameCommandName);
    }       
    
    string $hotkeyCmd = mgp_constructHotkeyCommand(
        $key, $ctrl, $alt, $cmd, $press, $repeat, $nameCommandName);
    eval ($hotkeyCmd);
    savePrefs -hotkeys;
}

proc mgp_initMinimieToggleHotkey()
{    
    if(`mgp_isMaya2017OrLater`)
    {
        return;
    }   
    mgp_makeMGPicker_MinimizeRuntimeCommand; 
    string $keyInfo [] = {"F7","0","0","0","0"};
    //print $keyInfo;
    //if it is maya 2016:
    if(`exists "hotkeySet"`)
    {
        string $hotkeySet = `hotkeySet -q -current`;
        if($hotkeySet == "Maya_Default")
        {
            MGP_ScriptEditorFeedback "Current hotkey set is Maya_Default and it is locked. Switch to other hotkeyset in hotkey Editor if you wanna make F7 hotkey works for MG-Picker Studio." 0;
            return;
        }
    }
    MGP_AssignMinimizedHotkey_Doit $keyInfo[0] $keyInfo[2] $keyInfo[1]; 
}
global proc MGP_AssignMinimieToggleHotkey()
{
    if(`mgp_isMaya2017OrLater`)
    {
        return;
    }  
    global string $MGPicker_Config_AllowOtherF7HotkeyID;
    optionVar -iv $MGPicker_Config_AllowOtherF7HotkeyID 0;
    mgp_initMinimieToggleHotkey;
}
*/
global proc MGP_AutoloadingConfigChangeCommand()
{
    int $autoload = `checkBoxGrp -q -v1 MGP_Config_AutoLoadMGPickerCBG`;
    int $uiMode = 1;
    if($autoload)
    {
        $uiMode = `optionMenuGrp -q -sl MGP_Config_AutoLoadMGPickerModeOM`;
        if($uiMode == 2)
        {
            $uiMode = 0;
        }
        $autoload = `radioButtonGrp -q -sl MGP_Config_AutoLoadViaUsersetupMELRBG`;
    }
    MGP_BuildUserSetupAutoloading $autoload $uiMode;
}
global proc MGP_Config_Autoload_CC()
{
    int $autoload = `checkBoxGrp -q -v1 MGP_Config_AutoLoadMGPickerCBG`;    
    optionMenuGrp -e -en $autoload MGP_Config_AutoLoadMGPickerModeOM;
    radioButtonGrp -e -en $autoload MGP_Config_AutoLoadViaUsersetupMELRBG;
    
    MGP_AutoloadingConfigChangeCommand;
}
proc int [] mgp_getAutoloadSetting()
{   
    //repair the usersetup.mel   
  string $scriptPath = `internalVar -usd`;
  string $userSetupMEL = $scriptPath + "userSetup.mel";
  string $userSetupPY = $scriptPath + "userSetup.py";
  int $melExist = `filetest -f $userSetupMEL`;
  int $pyExist = `filetest -f $userSetupPY`;
  if(!$melExist && !$pyExist)
  {
    return {0,1,1};
  }
  int $autoloadInMel = 0;
  int $uiModeInMel = 1;
  
  if($melExist)
  {
    string $content=`MGP_ReadFileString $userSetupMEL`;
    if(`gmatch $content "*MGP_AutoloadMGPickerStudio 1*"`)  
    {
        $uiModeInMel = 1;
        $autoloadInMel = 1;
    }
    else if(`gmatch $content "*MGP_AutoloadMGPickerStudio 0*"`)     
    {
        $uiModeInMel = 2;
        $autoloadInMel = 1;
    }
    }
    if($autoloadInMel)
    {
        return {1,$uiModeInMel,1};
    }
    
  int $autoloadInPy = 0;
  int $uiModeInPy = 1;
  if($pyExist)
  {
    string $content=`MGP_ReadFileString $userSetupPY`;
    if(`gmatch $content "*MGPicker_AutoLoad_Py(*,1)*"`)     
    {
        $uiModeInPy = 1;
        $autoloadInPy = 1;
    }
    else if(`gmatch $content "*MGPicker_AutoLoad_Py(*,0)*"`)        
    {
        $uiModeInPy = 2;
        $autoloadInPy = 1;
    }
    }
    if($autoloadInPy)
    {
        return {1,$uiModeInPy,2};
    }
    else
    {
        return {0,1,1};
    }
}
proc mgp_updateConfigCategories(int $useOriginalIndex)
{
    if(!`textScrollList -q -ex MGP_Config_CategoryTSL`)
    {
        return;
    }
    global int $gMGP_ConfigForAnimator;
    int $index  = 4;
    if($gMGP_ConfigForAnimator)
    {
        $index  = 2;
    }
    if($useOriginalIndex)
    {
        int $indice[] = `textScrollList -q -sii MGP_Config_CategoryTSL`;
        $index = $indice[0] ;
        if(!$index)
        {
            $index = 1;
        }
    }
    textScrollList -e -ra MGP_Config_CategoryTSL;
    textScrollList -e
            -append `MGP_MultiLanguage "pkr.general"`
            -append `MGP_MultiLanguage "pkr.animatorMode"`
            -append `MGP_MultiLanguage "pkr.pickerProjectSettings"`
            -append `MGP_MultiLanguage "pkr.designerMode"`
            -append `MGP_MultiLanguage "pkr.autoloading"`
            -append `MGP_MultiLanguage "pkr.Licence"`
            MGP_Config_CategoryTSL;
    textScrollList -e -sii $index MGP_Config_CategoryTSL;
}
global proc MGP_Config_CategoryChangeCommand()
{
    int $index[] = `textScrollList -q -sii MGP_Config_CategoryTSL`;
    string $fls[]={"MGP_Config_GeneralFL", 
                    "MGP_Config_AnimModeFL",
                    "MGP_Config_ProjectSettingFL",
                    "MGP_Config_DesignerModeFL",
                    "MGP_Config_autoLoadFL",
                    "MGP_Config_licenseFL"
                    };
    int $theIndex = $index[0] - 1;
    int $len = size($fls);
    int $vis = 0;
    for($i=0; $i<$len; $i++)
    {
        $vis = ($i == $theIndex);
        frameLayout -e -vis $vis $fls[$i];
    }
}

proc string mgp_getExist_MGPKR_File()
{
        string $lblf= "Pick";
        string $title = "Picker an exist MGPicker File";
        string $singleFilter = "MGPicker (*.mgpkr)";
        string $projDir = `MGP_getPkrDataDirectory`+`mgp_getCurrentProjectName`+"/";
        string $resultFile[] = `fileDialog2 -dir $projDir
                                                             -fileMode 1 
                                                             -fileFilter $singleFilter 
                                                             -dialogStyle 2 
                                                             -okc $lblf 
                                                             -caption $title`;
        return `basename $resultFile[0] ".mgpkr"`;                                                   
}
global proc string [] MGP_GetGenericPickers_OfCurrentPickerProject()
{
    global string $MGPicker_Config_GenericPickerID;
    string $str = `MGPicker -q -config $MGPicker_Config_GenericPickerID ""`;
    return `stringToStringArray $str "|"`;
}
global proc MGP_OnGenericPicker_ChangedCommand()
{
    string $exists[]= `textScrollList -q -allItems mgp_GenericPickerTSL`; 
    global string $MGPicker_Config_GenericPickerID;
    MGPicker -e -config $MGPicker_Config_GenericPickerID `stringArrayToString $exists "|"`;
    
    popupMenu -e -deleteAllItems mgp_fallbackGenericPM;
    for($p in $exists)
    {
        menuItem -l $p -p mgp_fallbackGenericPM -c ("MGP_UseGenericAsFallBack \""+$p+"\""); 
    }   
    
    //print `MGP_GetGenericPickers_OfCurrentPickerProject`;
    //update the menu��
    MGP_UpdateAvailablePickerMenu; 
}
global proc MGP_OnGenericPicker_UpDnCommands(int $mode)
//$mode 0: move selected path up;
//$mode 1: move selected path down;
{   
        int $sii[]=`textScrollList -q -sii mgp_GenericPickerTSL`;
        if(!size($sii))
        {
            return;
        }
        string $si[]=`textScrollList -q -si mgp_GenericPickerTSL`;
        string $thePath = $si[0];
        
        int $index = $sii[0];
        int $totalLen = `textScrollList -q -ni mgp_GenericPickerTSL`;
        
        if($mode == 0) //moving up
        {
            if($index == 1)
            {
                return;
            }
            textScrollList -e -rii $index mgp_GenericPickerTSL;
            textScrollList -e -ap ($index-1) $thePath mgp_GenericPickerTSL;
            textScrollList -e -da mgp_GenericPickerTSL;
            textScrollList -e -sii ($index-1) mgp_GenericPickerTSL;
        }
        else //moving dn
        {
            if($index == ($totalLen))
            {
                return;
            }
            textScrollList -e -rii $index mgp_GenericPickerTSL;
            textScrollList -e -ap ($index+1) $thePath mgp_GenericPickerTSL;
            textScrollList -e -da mgp_GenericPickerTSL;
            textScrollList -e -sii ($index+1) mgp_GenericPickerTSL;
        }
        MGP_OnGenericPicker_ChangedCommand;
}
global proc MGP_OnGenericPicker_AddCommand()
{
    string $pickerName = strip(`mgp_getExist_MGPKR_File`);
    if(!size($pickerName))
    {
        return;
    }
    string $exists[]= `textScrollList -q -allItems mgp_GenericPickerTSL`; 
    if(stringArrayContains($pickerName,$exists))
    {
        textScrollList -e -selectItem $pickerName mgp_GenericPickerTSL;
        return;
    }
    textScrollList -e -append $pickerName mgp_GenericPickerTSL;
    MGP_OnGenericPicker_ChangedCommand;
}
global proc MGP_OnGenericPicker_DeleteCommand()
{
    string $pickerNames[] = `textScrollList -q -si mgp_GenericPickerTSL`;
    if(!size($pickerNames))
    {
        return;
    }
    for($p in $pickerNames)
    {
        textScrollList -e -removeItem $p mgp_GenericPickerTSL;
    }
    MGP_OnGenericPicker_ChangedCommand;
}
global proc MGP_OnFallBackPicker_PickCommand()
{
    string $pickerName = strip(`mgp_getExist_MGPKR_File`);
    if(!size($pickerName))
    {
        return;
    }
    textField -e -text $pickerName MGP_FallbackPickerTF;
    //print $pickerName;
    MGPicker -e -fallbackPicker $pickerName;
}
global proc MGP_OnFallBackPickerChanged()
{
    string $pickerName = strip(`textField -q -text MGP_FallbackPickerTF`);
    MGPicker -e -fallbackPicker $pickerName;
}
global proc MGP_UseGenericAsFallBack(string $pickerName)
{
    textField -e -text $pickerName MGP_FallbackPickerTF;
    MGP_OnFallBackPickerChanged;
}

global proc MGP_UpdateProjectSettingOnProjectChanged()
{       
    MGP_SetProjectDoit `optionMenuGrp -q -v MGP_PickerProjOMG`;
    mgp_fillInSearchingOrderIntoTSL;    
  
    //refresh fallback picker menu:
    string $fallBack = `MGPicker -q -fallbackPicker`;
    textField -e -text $fallBack MGP_FallbackPickerTF;
    
    popupMenu -e -deleteAllItems mgp_fallbackGenericPM;
    string $genericItemList[] = `MGP_GetGenericPickers_OfCurrentPickerProject`;
    
    //update the generic pickers:
    textScrollList -e -removeAll mgp_GenericPickerTSL;
    for($p in $genericItemList)
    {
        menuItem -l $p -p mgp_fallbackGenericPM -c ("MGP_UseGenericAsFallBack \""+$p+"\"");         
        textScrollList -e -append $p mgp_GenericPickerTSL;
    } 
    /*  
    if(`textScrollList -q -numberOfItems mgp_GenericPickerTSL`)
    {
        textScrollList -e -selectIndexedItem 1 mgp_GenericPickerTSL;
    }*/
    
}
proc mgp_updateCurrentPickerProjectToConfig()
{
    if(!`optionMenuGrp -q -ex MGP_PickerProjOMG`)
    {
        return;
    }   
    string $projects[] = `MGP_listAllProjects`;
    string $cProj = `mgp_getCurrentProjectName`;
    int $contain = 0;
    for($proj in $projects)
    {
        menuItem -l $proj;
        if($proj == $cProj)
        {
            $contain = 1;
        }
    }
    if($contain)
    {
        optionMenuGrp -e -v $cProj MGP_PickerProjOMG;
    }
    else 
    {
        if(!size($projects))
        {
            menuItem -p MGP_PickerProjOMG -l "Default";
        }
        optionMenuGrp -e -select 1 MGP_PickerProjOMG;
    }   
}
global proc string MGP_ConfigUIContent()
{    
    int $ver2017OrLater = `mgp_isMaya2017OrLater`;
    global string $MGPicker_Config_LanID;    
    global string $MGPicker_Config_ShapeAntialiasingID;
    //global string $MGPicker_Config_TextAntialiasingID;
    global string $MGPicker_Config_ScrollBarVisibleID;
    
    global string $MGPicker_Config_AutoloadScenePkrID;
    global string $MGPicker_Config_AutoClosePkrID;
    global string $MGPicker_Config_LinkOpacityID;
    global string $MGPicker_Config_PanelSpacingID;
    global string $MGPicker_Config_SelBtnSizeID;    
    global string $MGPicker_Config_DefaultPanelSizeID;
    global string $MGPicker_Config_DefaultPanelLayoutID;
    global string $MGPicker_Config_PanelPresetID;
    global string $MGPicker_Config_DisplayWhenAttrNudgingID;
    global string $MGPicker_Config_CrossLineColID;
    global string $MGPicker_Config_WarnSaveIssueID;
    
    global string $MGPicker_Config_PoseButtonImageSizeID;
    global string $MGPicker_Config_PoseButtonImageMarginID;
    
    global string $MGPicker_Config_ShowMenuIndicator;
    global string $MGPicker_Config_StayOnTop;
    global string $MGPicker_Config_RenameTablabel;
    global string $MGPicker_Config_FilterAttrButton;
    
    string $configs[] = `MGPicker -q -config "" ""`;
    string $uiChoice = "";
    
    int $shapeAntialiasing = 1;
    //int $textAntialiasing = 1;
    int $scrollBarVisible = 1;
    
    int $autoloadSceneNode = 1;
    int $autocloseUnrelatedNode = 1;
    int $linkOpacity = 60;
    int $panelGap = 5;
    int $selBtnW = 10;
    int $selBtnH = 10;
    
    int $panelW = 300;
    int $panelH = 400;
    
    int $poseImageW = 90;
    int $poseImageH = 90;
    int $poseImageMargin = 5;
    int $displayReportWhenNudging = 1;
    int $warSaveIssueInPreviewMode = 1;
    
    string $panelPresets[];
    float $crossLineCol[]={1,1,1};
    
    int $panelLay = 1;
    
    int $stayOnTop = 0;
    int $showMenuTriangle = 1;
    int $renameTabLabel = 1;
    int $filterAttrBtn = 0;
    
    for($i=0; $i<size($configs); $i+=2)
    {
        if($configs[$i] == $MGPicker_Config_LanID)
        {
            $uiChoice = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_ShapeAntialiasingID)
        {
            $shapeAntialiasing = $configs[$i+1];
        }
        //else if($configs[$i] == $MGPicker_Config_TextAntialiasingID)
        //{
        //    $textAntialiasing = $configs[$i+1];
        //}
        else if($configs[$i] == $MGPicker_Config_ScrollBarVisibleID)
        {
            $scrollBarVisible = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_AutoloadScenePkrID)
        {
            $autoloadSceneNode = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_AutoClosePkrID)
        {
            $autocloseUnrelatedNode = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_LinkOpacityID)
        {
            $linkOpacity = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_PanelSpacingID)
        {
            $panelGap = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_SelBtnSizeID)
        {
            string $selBtnSize = $configs[$i+1];
            string $sizeStr[]=`stringToStringArray $selBtnSize " "`;
            $selBtnW = $sizeStr[0];
            $selBtnH = $sizeStr[1];
        }
        else if($configs[$i] == $MGPicker_Config_DefaultPanelSizeID)
        {
            string $panelSize = $configs[$i+1];
            string $sizeStr[]=`stringToStringArray $panelSize " "`;
            $panelW = $sizeStr[0];
            $panelH = $sizeStr[1];
        }
        else if($configs[$i] == $MGPicker_Config_DefaultPanelLayoutID)
        {
            $panelLay = $configs[$i+1];
            $panelLay ++;
        }
        else if($configs[$i] == $MGPicker_Config_PoseButtonImageSizeID)
        {
            string $imgSize = $configs[$i+1];
            string $sizeStr[]=`stringToStringArray $imgSize " "`;
            $poseImageW = $sizeStr[0];
            $poseImageH = $sizeStr[1];
        }
        else if($configs[$i] == $MGPicker_Config_PoseButtonImageMarginID)
        {
            $poseImageMargin = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_DisplayWhenAttrNudgingID)
        {
            $displayReportWhenNudging = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_WarnSaveIssueID)
        {
            $warSaveIssueInPreviewMode = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_PanelPresetID)
        {
            $panelPresets = `stringToStringArray $configs[$i+1] "|"`;
        }
        else if($configs[$i] == $MGPicker_Config_CrossLineColID)
        {
            string $temp = $configs[$i+1];
            string $temps[]=`stringToStringArray $temp " "`;
            int $len = size($temps);
            for($c=0; $c<$len; $c++)
            {
                $crossLineCol[$c] = $temps[$c];
            }
        }
        else if($configs[$i] == $MGPicker_Config_ShowMenuIndicator)
        {
            $showMenuTriangle = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_StayOnTop)
        {
            $stayOnTop = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_RenameTablabel)
        {
            $renameTabLabel = $configs[$i+1];
        }
        else if($configs[$i] == $MGPicker_Config_FilterAttrButton)
        {
            $filterAttrBtn = $configs[$i+1];
        }
    }
    if(!size($uiChoice))
    {
        $uiChoice = "English";
    }
    if(!`size $panelPresets`)
    {
        $panelPresets = `MGP_GetPredifinedPanelPresets`;
    }
    int $autoloadConfig[] = `mgp_getAutoloadSetting`;
    
    //--------------now ui controls------------------
    string $mainFL = `formLayout`; 
        string $lbl = `text -fn "boldLabelFont" -l "Categories"`;
        textScrollList -w 120 -sc "MGP_Config_CategoryChangeCommand" -ams 0 MGP_Config_CategoryTSL;
    //string $rightCl = `columnLayout -adj 1 -rs 3`;
    //  text -l "" MGP_Config_CategoryLBL;
    //string $scrollLayout = `scrollLayout`;
    //generic config-----------------------------------
    //columnLayout -adj 1 -rs 3 MGP_Config_Category1; 
    //separator -st "in"; 
    string $tr = `MGP_MultiLanguage "pkr.general"` ;
    frameLayout -l $tr -collapsable 1 MGP_Config_GeneralFL ;
        columnLayout -adj 1 -rs 3;   
                optionMenuGrp -l `MGP_MultiLanguage "pkr.uiLanguage"`
                        -adj 2 
                        -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_LanID+"\"")
                        MGP_Config_UILanOM;
                string $langs[]=`MGP_listPkrAvailableLanguageFileFullPathes`;
                string $langBaseNames[];
                for($lang in $langs)
                {
                    string $bn = `basenameEx $lang`;
                    $langBaseNames[size($langBaseNames)] = $bn;
                    menuItem -l $bn;
                }    
                if(`stringArrayContains $uiChoice $langBaseNames`)
                {
                    optionMenuGrp -e -v $uiChoice MGP_Config_UILanOM;
                }
                checkBoxGrp -l "" 
                        -numberOfCheckBoxes  1
                        -l1 `MGP_MultiLanguage "pkr.shapeAntialiasing"`
                        //-l2 "Text" 
                        -adj 2  
                        -v1 $shapeAntialiasing 
                        //-v2 $textAntialiasing 
                        -cc1 ("MGP_ConfigChangeCommand \""+$MGPicker_Config_ShapeAntialiasingID+"\"")
                        //-cc2 ("MGP_ConfigChangeCommand \""+$MGPicker_Config_TextAntialiasingID+"\"")
                        MGP_Config_AntiAliasingCBG;
                 //mgp_makeHotkeyControl;
                checkBoxGrp -l "" 
                        -numberOfCheckBoxes  1
                        -l1 `MGP_MultiLanguage "pkr.scrollBarVisible"`
                        //-l2 "Text" 
                        -adj 2  
                        -v1 $scrollBarVisible
                        //-v2 $textAntialiasing 
                        -cc1 ("MGP_ConfigChangeCommand \""+$MGPicker_Config_ScrollBarVisibleID+"\"")
                        //-cc2 ("MGP_ConfigChangeCommand \""+$MGPicker_Config_TextAntialiasingID+"\"")
                        MGP_Config_ScrollBarVisibleCBG;                 
                checkBoxGrp -l "" 
                        -numberOfCheckBoxes  1
                        -l1 `MGP_MultiLanguage "pkr.option.stayOnTop"`
                        -adj 2  
                        -v1 $stayOnTop
                        -cc1 ("MGP_ConfigChangeCommand \""+$MGPicker_Config_StayOnTop+"\"")
                        MGP_Config_StayOnTopCBG;
                        
                checkBoxGrp -l "" 
                        -numberOfCheckBoxes  1
                        -l1 `MGP_MultiLanguage "pkr.option.showMenuTriangle"`
                        -adj 2  
                        -v1 $showMenuTriangle
                        -cc1 ("MGP_ConfigChangeCommand \""+$MGPicker_Config_ShowMenuIndicator+"\"")
                        MGP_Config_ShowMenuTriangleCBG;
                        
     setParent  $mainFL;  
       
    //animator config-----------------------------------
    frameLayout -l `MGP_MultiLanguage "pkr.animatorMode"` -collapsable 1 MGP_Config_AnimModeFL;  //-cl (1-$gMGP_ConfigForAnimator) 
        columnLayout -adj 1 -rs 3;        
        checkBoxGrp -l `MGP_MultiLanguage "pkr.mayaSceneChanged"`
            -l1 `MGP_MultiLanguage "pkr.autoLoad.inScene"`
            -adj 2  
            -v1 $autoloadSceneNode  
            -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_AutoloadScenePkrID+"\"")
            MGP_Config_AutoLoadSceneNodeCBG;
        checkBoxGrp -l "" -l1 `MGP_MultiLanguage "pkr.autoUnload.unrelated"`
                -adj 2 
                -v1 $autocloseUnrelatedNode 
                -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_AutoClosePkrID+"\"")
                MGP_Config_AutoCloseUnrelatedCBG;
        separator -st "in";
        intSliderGrp -l `MGP_MultiLanguage "pkr.link.opacity"`
                -min 0 -max 255 
                -v $linkOpacity  -f 1
                -adj 3 
                -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_LinkOpacityID+"\"")
                MGP_Config_LinkOpacityISG;
        separator -st "in";
        checkBoxGrp -l "" 
            -l1 `MGP_MultiLanguage "pkr.warn.modeChanged"`
            -adj 2  
            -v1 $warSaveIssueInPreviewMode 
            -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_WarnSaveIssueID+"\"")
            MGP_Config_WarnSaveIssueCBG;
        checkBoxGrp -l "" 
            -l1 `MGP_MultiLanguage "pkr.reportWhenAttrNudging"`
            -adj 2  
            -v1 $displayReportWhenNudging 
            -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_DisplayWhenAttrNudgingID+"\"")
            -ann `MGP_MultiLanguage "pkr.reportWhenAttrNudging.ann"`
            MGP_Config_DisplayWhenNudgingCBG;
            
        checkBoxGrp -l "" 
            -l1 `MGP_MultiLanguage "pkr.option.renameTablabel"`
            -adj 2  
            -v1 $renameTabLabel
            -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_RenameTablabel+"\"")
            MGP_Config_RenameTablabelCBG;
            
        checkBoxGrp -l "" 
            -l1 `MGP_MultiLanguage "pkr.option.filterAttrButton"`
            -adj 2  
            -v1 $filterAttrBtn
            -ann `MGP_MultiLanguage "pkr.option.filterAttrButton.ann"`
            -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_FilterAttrButton+"\"")
            MGP_Config_FilterAttrBtnCBG;
            
            
     setParent  $mainFL;  
    //project config-----------------------------------
    //columnLayout -adj 1 -rs 3 MGP_Config_Category3; 
    frameLayout -l `MGP_MultiLanguage "pkr.pickerProjectSettings"` -collapsable 1 MGP_Config_ProjectSettingFL;   // -cl (1-$gMGP_ConfigForAnimator) 
                //+" "+`MGPicker -q -pickerProject`   
        string $projectSettingFL = `formLayout`;    
        string $projectSettingCL = `columnLayout -adj 1 -rs 3`;  
            string $addStr =  (`MGP_MultiLanguage "pkr.add"`+"..");             
            optionMenuGrp -l `MGP_MultiLanguage "pkr.currentPickerProj"` -cc "MGP_UpdateProjectSettingOnProjectChanged" MGP_PickerProjOMG;  
            mgp_updateCurrentPickerProjectToConfig; 
            separator -st "in";     
                //text -en 0 -l `MGP_MultiLanguage "pkr.searchRule.ann1"` -align "left" MGP_Config_SearchLBL1; 
            //text -l `MGP_MultiLanguage "pkr.searchDirs"` -fn "boldLabelFont" -align "left";           
            rowLayout -nc 5 -cw5 1 30 30 30 30 -cl5 "left" "center" "center" "center" "center" -adj 1;
                text -l `MGP_MultiLanguage "pkr.searchDirs"` -fn "boldLabelFont" -align "left" MGP_Config_SearchLBL;   
                //text -en 0 -l `MGP_MultiLanguage "pkr.searchRule.ann"` MGP_Config_SearchLBL;    
                button -l $addStr -h 20 -w 45 -c "MGP_SearchingOrderTSL_Commands 0" MGP_Config_SearchPath_AddBtn;  
                button -l `MGP_MultiLanguage "pkr.del"` -h 20 -w 30 -c "MGP_SearchingOrderTSL_Commands 1" MGP_Config_SearchPath_DelBtn; 
                button -l `MGP_MultiLanguage "pkr.up"` -h 20 -w 30 -c "MGP_SearchingOrderTSL_Commands 2" MGP_Config_SearchPath_UpBtn;    
                button -l `MGP_MultiLanguage "pkr.down"` -h 20 -w 30 -c "MGP_SearchingOrderTSL_Commands 3" MGP_Config_SearchPath_DnBtn;    
            setParent ..;           
            textScrollList -ams 0 -h 120 -dkc "MGP_SearchingOrderTSL_Commands 1"
                    -ann (`MGP_MultiLanguage "pkr.searchRule.ann"`+"\n"+`MGP_MultiLanguage "pkr.searchRule.ann1"`)
                    MGP_Config_SearchPath_TSL;
            //mgp_fillInSearchingOrderIntoTSL;
            //now begin new generic picker setting:   
        string $fallBackForm = `formLayout`;
            string $fallbackLbl = `MGP_MultiLanguage "pkr.ifNoMatch"`;
            string $fbLbl = `text -l $fallbackLbl -h 20 MGP_FallbackLabl`;
            textField -h 20 -cc "MGP_OnFallBackPickerChanged" MGP_FallbackPickerTF;
            string $pkLbl = `MGP_MultiLanguage "pkr.pickerDot"`;
            string $pickFBBtn = `button -l $pkLbl -c "MGP_OnFallBackPicker_PickCommand" -w 48 -h 20 MGP_Fallback_PickerBtn`;
            string $pickerGenericBtn = `button -l ">" -w 20 -h 20`;
                popupMenu -b 1 mgp_fallbackGenericPM;
                
            formLayout -e 
                    -af $fbLbl "top" 2
                    -af $fbLbl "left" 6
                    
                    -af MGP_FallbackPickerTF "top" 2
                    -ac MGP_FallbackPickerTF "left" 2 $fbLbl
                    -ac MGP_FallbackPickerTF "right" 2 $pickFBBtn
                    
                    -af $pickFBBtn "top" 2
                    -ac $pickFBBtn "right" 2 $pickerGenericBtn
                    
                    -af $pickerGenericBtn "top" 2
                    -af $pickerGenericBtn "right" 2
                    $fallBackForm;  
            
            setParent $projectSettingCL;
            separator -st "in";
                rowLayout -nc 5 -cw5 1 30 30 30 30 -cl5 "left" "center" "center" "center" "center" -adj 1;              
                    text -h 20 -align "left" -l `MGP_MultiLanguage "pkr.genericPickerSetting"` -fn "boldLabelFont" mgp_GenericPickerTxt;
                    button -l $addStr -h 20 -w 45 -c "MGP_OnGenericPicker_AddCommand" MGP_Config_GenericPicker_AddBtn;  
                    button -l `MGP_MultiLanguage "pkr.del"` -h 20 -w 30 -c "MGP_OnGenericPicker_DeleteCommand" MGP_Config_GenericPicker_DelBtn; 
                    button -l `MGP_MultiLanguage "pkr.up"` -h 20 -w 30 -c "MGP_OnGenericPicker_UpDnCommands 0" MGP_Config_GenericPicker_UpBtn;    
                    button -l `MGP_MultiLanguage "pkr.down"` -h 20 -w 30 -c "MGP_OnGenericPicker_UpDnCommands 1" MGP_Config_GenericPicker_DnBtn;  
            setParent $projectSettingFL;    
                    textScrollList 
                                -ann `MGP_MultiLanguage "pkr.genericPickerSetting.ann"`
                                -dkc "MGP_OnGenericPicker_DeleteCommand"
                             mgp_GenericPickerTSL;
                formLayout -e 
                        -af $projectSettingCL "top" 2
                        -af $projectSettingCL "left" 3
                        -af $projectSettingCL "right" 3
                        
                        -ac mgp_GenericPickerTSL "top" 0 $projectSettingCL
                        -af mgp_GenericPickerTSL "left" 2 
                        -af mgp_GenericPickerTSL "right" 2 
                        -af mgp_GenericPickerTSL "bottom" 2 
                        $projectSettingFL;
            
     setParent  $mainFL; 
 
    //designer config-----------------------------------
    //columnLayout -adj 1 -rs 3 MGP_Config_Category4; 
    frameLayout -l `MGP_MultiLanguage "pkr.designerMode"` -collapsable 1 MGP_Config_DesignerModeFL;    //-cl ($gMGP_ConfigForAnimator)   
        columnLayout -adj 1 -rs 3;    
        intFieldGrp -numberOfFields 2 
            -label `MGP_MultiLanguage "pkr.selBtn.multipleSize"` 
            -extraLabel "" 
            -value1 $selBtnW  
            -value2 $selBtnH 
            -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_SelBtnSizeID+"\"")
            -dc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_SelBtnSizeID+"\"")
            MGP_Config_SelBtnSizeIFG;  
        separator -st "in";
        intFieldGrp -numberOfFields 2 
            -label `MGP_MultiLanguage "pkr.poseBtnSize"`
            -extraLabel "" 
            -value1 $poseImageW
            -value2 $poseImageH 
            -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_PoseButtonImageSizeID+"\"")
            MGP_Config_PoseImageSizeIFG;
        intFieldGrp    -numberOfFields 1
            -label `MGP_MultiLanguage "pkr.poseBtnMargin"`
            -extraLabel "" 
            -value1 $poseImageMargin
            -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_PoseButtonImageMarginID+"\"")
            MGP_Config_PoseImageMarginIFG;
        separator -st "in";
        intFieldGrp -numberOfFields 2 
            -label `MGP_MultiLanguage "pkr.defaultPanelSize"`
            -extraLabel "" 
            -value1 $panelW
            -value2 $panelH 
            -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_DefaultPanelSizeID+"\"")
            MGP_Config_DefaultPanelSizeIFG;  
        optionMenuGrp 
            -label `MGP_MultiLanguage "pkr.defaultPanelLayout"`
            -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_DefaultPanelLayoutID+"\"")
            MGP_Config_DefaultPanelLayoutOMG;    
            menuItem -l `MGP_MultiLanguage "pkr.panelLayout.horizontal"`; 
            menuItem -l `MGP_MultiLanguage "pkr.panelLayout.vertical"`;   
        optionMenuGrp -e -sl $panelLay MGP_Config_DefaultPanelLayoutOMG;    
        
        intSliderGrp -l `MGP_MultiLanguage "pkr.panelSpacing"` 
            -min 0 -max 10 
            -v $panelGap -f 1
            -adj 3 
            -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_PanelSpacingID+"\"")
            MGP_Config_PanelGapISG;
        separator -st "in";
            rowLayout -nc 5 -cw5 1 30 30 30 30 -cl5 "left" "center" "center" "center" "center" -adj 1;
                    text -en 0 -l ("  "+`MGP_MultiLanguage "pkr.panelPresets.ann"`) MGP_Config_PanelPresetLBL;    
                    button -l `MGP_MultiLanguage "pkr.add"` -h 20 -w 30 -c "MGP_PanelPresetTSL_Commands 0" MGP_Config_PanelPreset_AddBtn;  
                    button -l `MGP_MultiLanguage "pkr.del"` -h 20 -w 30 -c "MGP_PanelPresetTSL_Commands 1" MGP_Config_PanelPreset_DelBtn; 
                    button -l `MGP_MultiLanguage "pkr.up"` -h 20 -w 30 -c "MGP_PanelPresetTSL_Commands 2" MGP_Config_PanelPreset_UpBtn;    
                    button -l `MGP_MultiLanguage "pkr.down"` -h 20 -w 30 -c "MGP_PanelPresetTSL_Commands 3" MGP_Config_PanelPreset_DnBtn;    
                setParent ..;           
            textScrollList -ams 0 -h 120 -dkc "MGP_PanelPresetTSL_Commands 1"
                    MGP_Config_PanelPreset_TSL;
                    for($name in $panelPresets)
                    {
                        textScrollList -e -append $name MGP_Config_PanelPreset_TSL;
                    }
                    textScrollList -e -sii 1 MGP_Config_PanelPreset_TSL;
        separator -st "in";
        colorSliderGrp -label `MGP_MultiLanguage "pkr.crosslineCol"` 
                        -rgb $crossLineCol[0] $crossLineCol[1] $crossLineCol[2] 
                        -cc ("MGP_ConfigChangeCommand \""+$MGPicker_Config_CrossLineColID+"\"")
                        MGP_Config_CrossLineCol_CSG;
    
    
     setParent  $mainFL;  
    //autoload config-----------------------------------
    //columnLayout -adj 1 -rs 3 MGP_Config_Category5; 
    frameLayout -l `MGP_MultiLanguage "pkr.autoloading"` -collapsable 1 MGP_Config_autoLoadFL;
        columnLayout -adj 1 -rs 3;   
            //string $autoLoadRL = `rowLayout -nc 2 -adj 2 -cw2 250 1`;
            if($ver2017OrLater)
            {
                text -label `MGP_MultiLanguage "pkr.autoload.2017orLater"` MGP_Config_AutoLoadAnnoLbl;
            }
            else
            {
                checkBoxGrp -l "" 
                                    -l1 `MGP_MultiLanguage "pkr.autoload.withMaya"`
                                    -v1 $autoloadConfig[0]
                                    -cc "MGP_Config_Autoload_CC"
                                    MGP_Config_AutoLoadMGPickerCBG;
                    $autoloadConfig[1] = $autoloadConfig[1] ?  $autoloadConfig[1] : 1;  
                    optionMenuGrp -l `MGP_MultiLanguage "pkr.autoload.in"` -cc "MGP_AutoloadingConfigChangeCommand" MGP_Config_AutoLoadMGPickerModeOM;
                        menuItem -l `MGP_MultiLanguage "pkr.animatorMode"` MGP_Config_AutoLoadMGPickerMode_AnimatorMI;
                        menuItem -l `MGP_MultiLanguage "pkr.designerMode"` MGP_Config_AutoLoadMGPickerMode_DesignerMI;
                    optionMenuGrp -e -en $autoloadConfig[0]  -sl $autoloadConfig[1]     MGP_Config_AutoLoadMGPickerModeOM;
                    //setParent ..; 
                    $autoloadConfig[2] = $autoloadConfig[2] ?  $autoloadConfig[2] : 1;          
                    radioButtonGrp 
                                    -l `MGP_MultiLanguage "pkr.autoload.via"`
                                    -en $autoloadConfig[0] 
                                    -numberOfRadioButtons  2 
                                    -cc "MGP_AutoloadingConfigChangeCommand"
                                    -labelArray2   "UserSetup.mel" "UserSetup.py"
                                    -sl $autoloadConfig[2]
                                    MGP_Config_AutoLoadViaUsersetupMELRBG;
            }                       
        setParent $mainFL; 
        
    //licence config-----------------------------------
    //columnLayout -adj 1 -rs 3 MGP_Config_Category5; 
    frameLayout -l `MGP_MultiLanguage "pkr.Licence"` -collapsable 1 MGP_Config_licenseFL;
        columnLayout -adj 1 -rs 3;
            
            string $connectorForm = `formLayout`;
            global string $gMG_Connector_APPName;
            string $connectorTxt = `MGP_MultiLanguage_rep1 "pkr.Licence.connectorPosition.lbl" $gMG_Connector_APPName`;
            
            string $connectorLbl = `text -l $connectorTxt -h 20 MGP_ConnectorLabl`;
            
            textField -ed 0 -h 20 -text `MGPicker_GetLicenseConnectorDir 0` MGP_ConnectorDirTF;
            $pkLbl = `MGP_MultiLanguage "pkr.pickerDot"`;
            $pickConnectorBtn = `button -l $pkLbl -c "MGP_OnConnectorDir_PickCommand" -w 48 -h 20 MGP_Connector_PickerBtn`;
            $resetlbl = `MGP_MultiLanguage "pkr.Licence.reset"`;
            $resetConnectorBtn = `button -l $resetlbl -c "MGP_OnConnectorDir_ResetCommand" -w 48 -h 20 MGP_Connector_ResetBtn`;

            formLayout -e 
                    -af $connectorLbl "top" 2
                    -af $connectorLbl "left" 6
                    
                    -af MGP_ConnectorDirTF "top" 2
                    -ac MGP_ConnectorDirTF "left" 2 $connectorLbl
                    -ac MGP_ConnectorDirTF "right" 2 $pickConnectorBtn
                    
                    -af $pickConnectorBtn "top" 2
                    -ac $pickConnectorBtn "right" 2 $resetConnectorBtn
                    
                    -af $resetConnectorBtn "top" 2
                    -af $resetConnectorBtn "right" 2
                    $connectorForm;
            setParent ..;
            global string $MGPicker_ServerConfigFolder;
            global string $gMG_ConnectorInfoServerFileName;
            $serverFile = $MGPicker_ServerConfigFolder + "/" + $gMG_ConnectorInfoServerFileName;
            //$serverFileValue = `MGPicker_GetLicenceConnectorDir_ServerDefine 0`;
            string $severDefinedAnn = `MGP_MultiLanguage_rep1 "pkr.Licence.connectorPosition.server.ann"   $serverFile`; 
            $connectorServerLbl = `text -en 0 -align "left" -l $severDefinedAnn -h 20 MGP_ConnectorServerAnnLbl`;
                    
    setParent $mainFL;  
                
    //separator -st "none";
    string $btmRL = `rowLayout -adj 2 -nc 3 -cw3 120 1 100`;
        button -l (`MGP_MultiLanguage "pkr.resetCfg"`+" >") -w 120 MGP_Config_ResetBtn;
        popupMenu -b 1;
        menuItem -l `MGP_MultiLanguage "pkr.resetCfg.general"` -c "MGP_ResetConfig 1" MGP_Config_Reset_General_MI;
        menuItem -l `MGP_MultiLanguage "pkr.resetCfg.animMode"` -c "MGP_ResetConfig 2" MGP_Config_Reset_Anim_MI;
        menuItem -l `MGP_MultiLanguage "pkr.resetCfg.designerMode"` -c "MGP_ResetConfig 3" MGP_Config_Reset_Designer_MI;
        menuItem -l `MGP_MultiLanguage "pkr.resetCfg.searching"` -c "MGP_ResetConfig 4" MGP_Config_Reset_Search_MI;
        menuItem -l `MGP_MultiLanguage "pkr.resetCfg.connector"` -c "MGP_ResetConfig 5" MGP_Config_Reset_Connector_MI;
        menuItem -d 1;
        menuItem -l `MGP_MultiLanguage "pkr.resetCfg.all"` -c "MGP_ResetConfig 0" MGP_Config_Reset_All_MI;
        
        //button -l `MGP_MultiLanguage "pkr.resetCfg.f7"` -c "MGP_AssignMinimieToggleHotkey" MGP_Config_F7_Btn;
        text -l "";
        button -l `MGP_MultiLanguage "pkr.close"` -c "layoutDialog -dismiss \"OK\"" MGP_Config_Close_Btn;
    //setParent $mainFL; 
    formLayout -e
            -af $lbl "top" 0
            -af $lbl "left" 0
            
            -ac MGP_Config_CategoryTSL "top" 3 $lbl
            -af MGP_Config_CategoryTSL "left" 0
            -ac MGP_Config_CategoryTSL "bottom" 3 $btmRL
            
            -af MGP_Config_GeneralFL "top" 0 
            -ac MGP_Config_GeneralFL "left" 5 MGP_Config_CategoryTSL
            -ac MGP_Config_GeneralFL "bottom" 3 $btmRL
            -af MGP_Config_GeneralFL "right" 0
            
            -af MGP_Config_AnimModeFL "top" 0 
            -ac MGP_Config_AnimModeFL "left" 5 MGP_Config_CategoryTSL
            -ac MGP_Config_AnimModeFL "bottom" 3 $btmRL
            -af MGP_Config_AnimModeFL "right" 0
            
            -af MGP_Config_ProjectSettingFL "top" 0 
            -ac MGP_Config_ProjectSettingFL "left" 5 MGP_Config_CategoryTSL
            -ac MGP_Config_ProjectSettingFL "bottom" 3 $btmRL
            -af MGP_Config_ProjectSettingFL "right" 0
            
            -af MGP_Config_DesignerModeFL "top" 0 
            -ac MGP_Config_DesignerModeFL "left" 5 MGP_Config_CategoryTSL
            -ac MGP_Config_DesignerModeFL "bottom" 3 $btmRL
            -af MGP_Config_DesignerModeFL "right" 0
            
            -af MGP_Config_autoLoadFL "top" 0 
            -ac MGP_Config_autoLoadFL "left" 5 MGP_Config_CategoryTSL
            -ac MGP_Config_autoLoadFL "bottom" 3 $btmRL
            -af MGP_Config_autoLoadFL "right" 0
            
            -af MGP_Config_licenseFL "top" 0 
            -ac MGP_Config_licenseFL "left" 5 MGP_Config_CategoryTSL
            -ac MGP_Config_licenseFL "bottom" 3 $btmRL
            -af MGP_Config_licenseFL "right" 0
            
            -af $btmRL "left" 0
            -af $btmRL "right" 0
            -af $btmRL "bottom" 0
            $mainFL;
        mgp_updateConfigCategories 0;
      MGP_Config_CategoryChangeCommand; 
    MGP_UpdateProjectSettingOnProjectChanged;
    return $mainFL;
}
global proc MGP_ConfigUIContentForLayoutDialog()
{
    string $form = `setParent -q`;
    setParent $form;
    string $cl = `MGP_ConfigUIContent`;
    formLayout -e 
        -af $cl "top" 5
        -af $cl "left" 5
        -af $cl "right" 5
        -af $cl "bottom" 5
        -width 640
        -h 425
        $form;
}
global proc MGP_ConfigWindow()
{
    if (`window -exists mgtoolConfigUI`)
    {
        deleteUI mgtoolConfigUI;
    }
    global int $gMGP_ConfigForAnimator;
    $gMGP_ConfigForAnimator = 0;
    layoutDialog -title (`MGP_getAppName`+" "+`MGP_MultiLanguage "pkr.pref.noDot"`) -ui "MGP_ConfigUIContentForLayoutDialog";
}
global proc MGP_ConfigWindowForAnimator()
{
  if (`window -exists mgtoolConfigUI`)
    {
        deleteUI mgtoolConfigUI;
    }
    global int $gMGP_ConfigForAnimator;
    $gMGP_ConfigForAnimator = 1;
  layoutDialog -title (`MGP_getAppName`+" "+`MGP_MultiLanguage "pkr.pref.noDot"`) -ui "MGP_ConfigUIContentForLayoutDialog";
}

global proc MGP_Quit()
{
    global string $MGPicker_DockControlName;
    string $cmd = "deleteUI -control "+$MGPicker_DockControlName;
    if(`mgp_isMaya2017OrLater`)
    {
        if(`workspaceControl -q -ex $MGPicker_DockControlName`)
        {
            evalDeferred $cmd;
        }
        return;
    }    
    if(!`exists "MGDockControl"`)
    {
        return;
    }
    if(`MGDockControl -q -ex $MGPicker_DockControlName`)
    {
        evalDeferred $cmd;
        return;
    }
    global string $MGPicker_WindowName; 
    if(`window -q -ex $MGPicker_WindowName`)
    {
        $cmd = "deleteUI "+$MGPicker_WindowName;
        evalDeferred $cmd;
    }
}

global proc MGP_OnConnectorDir_ResetCommand()
{
    global string $gMG_LicenseConnectorDir_ov;  
    optionVar -rm $gMG_LicenseConnectorDir_ov;
    if(`textField -q -ex MGP_ConnectorDirTF`)
    {
        textField -e -text "" MGP_ConnectorDirTF;   
    }
}
global proc mgp_pickLicenseConnectorDir_doit(string $filePath, int $mode)
{
    if(!size($filePath) || !`filetest -f $filePath`)
    {
        return;
    }
    MGP_SaveLicenseConnectorDir  $filePath;
    global string $gMG_LicenseConnectorDir_ov;  
     
    if(`textField -q -ex MGP_ConnectorDirTF`)
    {
        textField -e -text `optionVar -q $gMG_LicenseConnectorDir_ov` MGP_ConnectorDirTF; 
    }       
}

proc string mgp_pickerProgramFilePath(string $programFileName)
{
        string $ann = (`MGP_MultiLanguage_rep1 "pkr.pickConnector.title" $programFileName`);
    string $caption = `MGP_MultiLanguage "pkr.pick"`;
    string $resultFile[] = `fileDialog2 -fileMode 1 -fileFilter $programFileName -dialogStyle 2 -okc $caption -caption $ann`;
    return $resultFile[0];
}

global proc string MGP_GetPickedConnectorFilePath()
{
        string $programFileName = `MGP_GetConnectorProgramFileName`;
        return `mgp_pickerProgramFilePath $programFileName `;
}

global proc string MGP_GetPickedNewsFilePath()
{
        string $programFileName = `MGP_GetNewsProgramFileName`;
        return `mgp_pickerProgramFilePath $programFileName `;
}

global proc MGP_OnConnectorDir_PickCommand()
{
    string $programFilePath = `MGP_GetPickedConnectorFilePath`;
    mgp_pickLicenseConnectorDir_doit $programFilePath 0;        
}
//------------plugin related code----------------------------------
proc string mgp_getPluginExtension()
{   
    global int $MGPKR_OStype;
    string $sys = ".mll";
    if($MGPKR_OStype==1)        
    {
        $sys = ".bundle";
    }
    else if($MGPKR_OStype==2)
    {
        $sys = ".so";
    }
    return $sys;
}
global proc string [] MGP_ListAllPluginVersions()
{
    string $extension = `mgp_getPluginExtension`;   
    string $dir = `MGP_GetDirInProgramfiles "Plug-ins/"`;
    string $plugins[]=`getFileList -fld $dir -fs ("*"+$extension)`;
    string $result[];
    for($p in $plugins)
    {
        $result[size($result)] = ($dir + $p);
    }
    return $result;
}
global proc string[] MGP_GetMainAndBuildVersions()
{
    string $verFile = `MGP_GetDirInProgramfiles "MGPicker.ver"`;
    string $buildDate = "20150410";
    string $ver = "1.0";
    if(`filetest -f $verFile`)
    {
        int $readVerID=`fopen $verFile "r"`;
        $ver = `fgetline $readVerID`;
        $buildDate = `fgetline $readVerID`;
        fclose $readVerID;
    }
    if(!size($ver))$ver = "1.0";
    if(!size($buildDate))$buildDate = "20150410";
    return {$ver,$buildDate};
}
proc string mgp_getPluginFileName(string $pluginPrefex)
{   
    global int $gMGPicker_MayaVerInt;
    int $x64Maya_orNot = `about -is64`;
    string $bigStr = "64";
    if(!$x64Maya_orNot)
    {
      $bigStr = "86";
    }
  string $file = $pluginPrefex + "_";
            
  $file += (`mgp_getMayaVersionStringForPlugin` + "x");
  
  global int $MGPKR_OStype;
    string $sys = $bigStr+`mgp_getPluginExtension`;

  $file += $sys ;
    return $file;       
}
proc string mgp_returnPluginFilePath (string $pluginPrefex)
{  
        string $pluginFileName = `mgp_getPluginFileName $pluginPrefex`;         
        
        string $mllName = `MGP_GetDirInProgramfiles ("Plug-ins/"+$pluginFileName)`;
        
        return $mllName;
}
global proc string MGP_getPluginFileForCurrentMaya()
{
    return `mgp_returnPluginFilePath "MGPicker"`;
}

global proc string MGP_getVersionHisotryFile()
{
    string $lan = `MGP_GetLanguageName`;
    string $path = `MGP_GetDirInProgramfiles ""`+"VersionHisotry/VersionHisotry_"+$lan+".txt";
    if(!`filetest -f $path`)
    {
        $path = `MGP_GetDirInProgramfiles ""`+"VersionHisotry/VersionHisotry_English.txt";
    }
    return $path;
}
global proc MGP_hideMayaErrorWarning()
{
    evalDeferred "print \"\\\n\"";
}
global proc int MGP_LoadUnloadPlugin (int $onOff)
{
    //result 0: not successful
    //result 1: successful
    int $result=0;
    string $pluginFile = `mgp_returnPluginFilePath "MGPicker"`;
    if(!`exists "loadPluginCallback"`)
    {
        string $proName =(`getenv MAYA_LOCATION`+"/scripts/others/pluginWin.mel");
        eval ("source \""+ $proName+"\"");
    }   
    if($onOff)
    {
        if(!`pluginInfo -q -loaded $pluginFile`)    
        {
            
            $result=(1-(catch(`loadPluginCallback  $pluginFile "plug-in"`)));            
            global int $ignoreUpdateCallback;
            global int $pluginRefreshNeeded;
            global string $pluginWindowName;
            int $visible = `window -q -ex $pluginWindowName`;
            if( $visible )
            {
                if( !$ignoreUpdateCallback )  
                {
                    updatePluginList();
                }
            }
            else
            {
                $pluginRefreshNeeded = true;
            }
        }
        else
        {
            return 1;
        }
    }
    else
    {
        if(!`pluginInfo -q -loaded $pluginFile`)    
        {
            return 1;
        }
        $result=(1-(catch(`unloadPluginWithCheck( $pluginFile)`)));          
    }
    return $result;
}
proc string mgp_getLoaderMelSourceCode()
{
    string $mel = `mgp_getDefaultLoaderMelPath`;
    string $melFile = "MGPicker_WrittenByMiguel.mel";
    string $cmd = "string $mgpicker_programDir = `getenv \"MGPICKER_PROGRAM_FILE_DIR\"`;";
    $cmd += "if(`filetest -d $mgpicker_programDir`){eval (\"source \\\"\"+$mgpicker_programDir+\"/"+$melFile+"\"+\"\\\"\");}";
    $cmd += "else { eval (\"source \\\""+$mel+"\\\"\"); }";
    return $cmd;
}
global proc int MGP_InstallMGPickerToCurrentShelf()
{   
    global string $gMGPicker_ShelfLabel_anim;
    global string $gMGPicker_ShelfLabel_designer;
    string $defaultIcon = "commandButton.png";  
    string $animIcon = `mgp_icon "Picker_animModeIcon.png"`;    
    string $designerIcon = `mgp_icon "Picker_designerModeIcon.png"`;
    string $animLbl = $gMGPicker_ShelfLabel_anim;   
    string $designerLbl = $gMGPicker_ShelfLabel_designer;
    string $animShortLbl = "Anim";  
    string $designerShortLbl = "Designer";
    string $animAnn = "Click to load MG-Picker Studio in animator mode.";   
    string $designerAnn = "Click to load MG-Picker Studio in designer mode.";   
    
    if(!`filetest -f $animIcon`)$animIcon=$defaultIcon;
    if(!`filetest -f $designerIcon`)$designerIcon=$defaultIcon;
    
    global string $gShelfTopLevel;
    if (!`tabLayout -exists $gShelfTopLevel`)
    {
        MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.mayaShelf.notExist"` 1;
        return 0;
    }
    string $st =`tabLayout -q -st $gShelfTopLevel`;
        
    //first delete all the old ones.
    string $children []=`shelfLayout -q -ca $st`;
    for ($eachOldSB in $children)
    {
        if(!`shelfButton -q -ex $eachOldSB`)
        {
            continue;
        }
        string $eachOldLabel=`shelfButton -q -l $eachOldSB`;
        if($animLbl == $eachOldLabel || $designerLbl == $eachOldLabel)
        {
            deleteUI -ctl $eachOldSB;
        }   
    }   
    string $mel = `mgp_getLoaderMelSourceCode`;
    //animator:
    string $cmd = ($mel+"\nMG_PickerStudio 1;");   
  string $sb=`shelfButton
        //-imageOverlayLabel $animShortLbl
        -label $animLbl
        -parent ($gShelfTopLevel + "|" +$st )
        -command $cmd
        -image $animIcon
        -highlightImage $animIcon 
        -annotation $animAnn                    
    `;   
    
  //designer:
  $cmd = ($mel+"\nMG_PickerStudio 0;"); 
  $sb=`shelfButton
        //-imageOverlayLabel $designerShortLbl
        -label $designerLbl
        -parent ($gShelfTopLevel + "|" +$st )
        -command $cmd
        -image $designerIcon
        -highlightImage $designerIcon 
        -annotation $designerAnn                    
    `;
  control -e -vis 1 $sb;            
    
    return 1;
}
global proc int MGP_BuildUserSetupAutoloading(int $mode, int $autoloadUIMode)
//$mode 0: no autoloading
//$mode 1: userSetup.mel
//$mode 2: userSetup.py

//$autoloadUIMode 0: for designer mode
//$autoloadUIMode 1: for animator mode
{
    int $usePyUsersetup = ($mode == 2);
    
    //repair the usersetup.mel 
    global string $MGPicker_ProgramPath;      
  string $loaderMel = `mgp_getDefaultLoaderMelPath`;
  
  string $obsoleteUserSetupFiles [];
  clear $obsoleteUserSetupFiles;
  string $obsoleteExps [];
  clear $obsoleteExps;
  
  string $commandCode;   
    string $userSetupFile;
    string $obsoleteUserSetupFile;
    string $repExp;
    string $repExpAbsolete;
    if($mode == 1)
    {
      $userSetupFile = "userSetup.mel";
      $obsoleteUserSetupFile = "userSetup.py";
      $obsoleteUserSetupFiles [size($obsoleteUserSetupFiles)] = $obsoleteUserSetupFile;
      $repExp ="//MGPickerAutoLoad_start.*//MGPickerAutoLoad_end";
      $repExpAbsolete    ="#MGPickerAutoLoad_start.*#MGPickerAutoLoad_end"; 
      $obsoleteExps [size($obsoleteExps)] = $repExpAbsolete;
    $commandCode= ("//MGPickerAutoLoad_start\nglobal proc MGP_AutoloadMGPickerStudio(int $mode)\n{\n  string $MGPicker_LoaderFile = \""+$loaderMel+"\";\n  if(`filetest -f $MGPicker_LoaderFile`)\n  {\n    evalDeferred (\"source \\\"\"+$MGPicker_LoaderFile+\"\\\";MG_PickerStudio \"+$mode+\";\");\n  }\n}\ncatch(`MGP_AutoloadMGPickerStudio "+$autoloadUIMode+"`);\n//MGPickerAutoLoad_end\n");
  }
  else if($mode == 2)
    {
      $userSetupFile = "userSetup.py";
      $obsoleteUserSetupFile = "userSetup.mel";
      $obsoleteUserSetupFiles [size($obsoleteUserSetupFiles)] = $obsoleteUserSetupFile;
      $repExp ="#MGPickerAutoLoad_start.*#MGPickerAutoLoad_end";    
      $repExpAbsolete    ="//MGPickerAutoLoad_start.*//MGPickerAutoLoad_end";   
      $obsoleteExps [size($obsoleteExps)] = $repExpAbsolete;
        $commandCode= ("#MGPickerAutoLoad_start\ndef MGPicker_AutoLoad_Py(loaderMel, loadUIMode):\n    import maya.mel as mel\n    import os  \n    if os.path.isfile(loaderMel):\n        try:\n            mel.eval('evalDeferred (\"source \\\\\\\"'+loaderMel+'\\\\\\\";MG_PickerStudio '+ str(loadUIMode)+';\")')\n        except:\n            print ('[MG-Picker Studio]!!Error loading MG-Picker Studio.')\n");
        //$commandCode= ("#MGPickerAutoLoad_start\ndef MGPicker_AutoLoad_Py(loaderMel, loadUIMode):\n    import maya.mel as mel\n    import os  \n    if os.path.isfile(loaderMel):\n        mel.eval('evalDeferred (\"source \\\\\\\"'+loaderMel+'\\\\\\\";MG_PickerStudio '+ str(loadUIMode)+';)')\n");
    $commandCode += ("MGPicker_AutoLoad_Py('"+$loaderMel+"',"+$autoloadUIMode+")\n#MGPickerAutoLoad_end\n");
  }
  else if($mode == 0)
  {
      $obsoleteUserSetupFile = "userSetup.py";
      $obsoleteUserSetupFiles [size($obsoleteUserSetupFiles)] = $obsoleteUserSetupFile;
      $repExpAbsolete    ="#MGPickerAutoLoad_start.*#MGPickerAutoLoad_end"; 
      $obsoleteExps [size($obsoleteExps)] = $repExpAbsolete;
      $obsoleteUserSetupFile = "userSetup.mel";
      $obsoleteUserSetupFiles [size($obsoleteUserSetupFiles)] = $obsoleteUserSetupFile;
      $repExpAbsolete    ="//MGPickerAutoLoad_start.*//MGPickerAutoLoad_end";   
      $obsoleteExps [size($obsoleteExps)] = $repExpAbsolete;
  }
  
  string $scriptPath = `internalVar -usd`;
  if($mode)
  {
        $conFigFileNameForOpen = ( $scriptPath + $userSetupFile);
        string $oldContent="",$newContent="";
        if(`filetest -f $conFigFileNameForOpen`)
        {
            $oldContent=`MGP_ReadFileString $conFigFileNameForOpen`;
            $newContent=`MGP_substitute $repExp $oldContent ""`;    
            $newContent = $commandCode + strip($newContent);
        }
        else
        {
            $newContent = $commandCode;
        }
        //print  $newContent;   
        $fileId=`fopen $conFigFileNameForOpen "w"`;
        fprint $fileId $newContent;
        fflush $fileId;
        fclose $fileId; 
    }
    
    //now clean up the obsolete one:
    int $obsoleteCount = size($obsoleteUserSetupFiles);
    for($i=0; $i<$obsoleteCount; $i++)
    {
        string $conFigFileNameForOpen = ( $scriptPath + $obsoleteUserSetupFiles[$i]);
        string $repExpAbsolete = $obsoleteExps[$i];
        //print ("absolette file: "+$conFigFileNameForOpen+"\n");
        if(`filetest -f $conFigFileNameForOpen`)
        {
          $oldContent=`MGP_ReadFileString $conFigFileNameForOpen`;
          string $newContent = $oldContent;
          if(size($oldContent))
          {
            $newContent=`MGP_substitute $repExpAbsolete $oldContent ""`;
            }
            //if not obsolete codes found, we just skip it.
            if($newContent == $oldContent)
            {
                continue;
            }
            
          //print ("---------------------------\nnewContent: "+$newContent+"\n");
          string $stripContent = strip($newContent);
          //print ("---------------------------\nnewContent: "+$stripContent+"\n");
          if(!size($stripContent))
          {
            sysFile -del $conFigFileNameForOpen;
          }
          else
          {
          $fileId=`fopen $conFigFileNameForOpen "w"`;
            fprint $fileId $newContent;
            fflush $fileId;
            fclose $fileId; 
        }
        }
    }
    return 1;
}

//uninstall MG-Picker Studio --------------------------------------
proc uninstallMGPicker_doneReport ()
{
        global string $MGPicker_AppName;
    if (`window -exists MGPicker_UninstallationUI`)
    {
        deleteUI MGPicker_UninstallationUI;
    }
    global string $MGPicker_UninstallDone_Rep;
    confirmDialog -title $MGPicker_AppName -message $MGPicker_UninstallDone_Rep -button "OK"; 
}
proc uninstallAllMGPickerShelves()
{   
    global string $gMGPicker_ShelfLabel_anim;
    global string $gMGPicker_ShelfLabel_designer;
    
  global string $gShelfTopLevel;
  if(!`control -q -ex $gShelfTopLevel`)
  {
      MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.uninstall.mayaShelfNoExist"` 1;
      return;
  }
    
    string $tabs[] =`tabLayout -q -childArray $gShelfTopLevel`;
    string $cTab;
    int $clearCount;
    for($cTab in $tabs)
    {
        string $children []=`shelfLayout -q -ca $cTab`;
        for ($eachOldSB in $children)
        {
            if(!`shelfButton -q -ex $eachOldSB`)
            {
                continue;
            }
            string $lbl = `shelfButton -q -l $eachOldSB`;
            if($lbl == $gMGPicker_ShelfLabel_anim || $lbl == $gMGPicker_ShelfLabel_designer)
            {
                deleteUI -ctl $eachOldSB;
                $clearCount ++;
            }
        }        
   }
  
  if($clearCount)
  {
    saveAllShelves $gShelfTopLevel;
  }
  
  MGP_ScriptEditorFeedback `MGP_MultiLanguage_rep1 "pkr.uninstall.shelf.rep" $clearCount` 0;
}
proc uninstallAllMGPickerF7HotKey()
{
  global string $MGPicker_ToggleMinimizedRunTimeCommandName;
    string $runTimeCommand = $MGPicker_ToggleMinimizedRunTimeCommandName;
    if(`runTimeCommand -q -ex $runTimeCommand`)
    {
        runTimeCommand -e -del  $runTimeCommand;
    }
  MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.uninstall.hotKey"` 0;    
}
proc int mgp_isLocalInstalled()
{
      global string $MGPicker_FolderName;
    string $folderInScriptEditor = (`internalVar -usd`+$MGPicker_FolderName+"/");
    return `filetest -d $folderInScriptEditor`;
}
global proc MGP_UninstallMGPicker_doit ()
{
    global string $MGPicker_AppName;
    
  //get options:-------------------------------------------------------
  int $program = `checkBox -q -v  uninstallMGPicker_ClearPrgramCB`;
  //int $registry = `checkBox -q -v  uninstallMGPicker_ClearRegistryCB`;
  int $config = `checkBox -q -v  uninstallMGPicker_ClearConfigCB`;
  int $data = `checkBox -q -v  uninstallMGPicker_ClearPickerDataCB`;
  int $template = `checkBox -q -v  uninstallMGPicker_ClearPickerTemplatesCB`;
  int $operation = ($program + $config + $data + $template);
  if(!$operation)
  {
    confirmDialog -title $MGPicker_AppName
                                  -message `MGP_MultiLanguage "pkr.uninstall.noActionDone"`
                                  -button "OK"
                                  -defaultButton "OK"
                                  -dismissString "OK";
    return;
  }
  string $uninstall = `MGP_MultiLanguage "pkr.uninstall"`;
  string $cancel = `MGP_MultiLanguage "pkr.cancel"`;
  string $msg = `MGP_MultiLanguage "pkr.uninstall.confirm"`;
  string $answer = `confirmDialog -title $MGPicker_AppName
                                  -message $msg
                                  -button $uninstall 
                                  -button $cancel 
                                  -defaultButton $cancel
                                  -dismissString $cancel`;
  if($answer != $uninstall)
  {
    if (`window -exists MGPicker_UninstallationUI`)
    {
        deleteUI MGPicker_UninstallationUI;
    }
    return;
  }
       
     
    layout -e -en 0 uninstallMGPicker_OptionCL;
    layout -e -en 0 uninstallMGPicker_BtmRL;
      
    separator -e -vis 0 uninstallMGPicker_MidSep;
    progressBar -e -vis 1 uninstallMGPicker_ProgressBar;    
    
    //clear the registry first:    
    //if($registry)
    //{
    //  MGPicker -drg;
    //  MGP_ScriptEditorFeedback `MG_DualLan "MGtools.uninstall.dereg.done.rep"` 1;
    //}  
    
    int $percentage;
    
    //first clean up program related issues:
    if($program)
    {      
        //unload plugin which will close ui as well:
        MGP_LoadUnloadPlugin 0;
        
      //remove shelves--------------------
      uninstallAllMGPickerShelves; 
       
      //remove hotkey and markingmenus --------------------
      uninstallAllMGPickerF7HotKey; 
      
      //remove userSetups --------------------
      MGP_BuildUserSetupAutoloading 0 0;
      MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.uninstall.autoload"` 0;       
    }
    
    
    global string $MGPicker_FolderName;
    string $folderInScriptEditor = (`internalVar -usd`+$MGPicker_FolderName+"/");
    int $localExists = `filetest -d $folderInScriptEditor`;
    
    int $removeAllFiles = ($program * $config);
    //if remove all the files:
    if($removeAllFiles)
    {
            if($localExists)
            {
                    MGP_DeleteFolder_Ex $folderInScriptEditor uninstallMGPicker_ProgressBar "" 0 0;
                    MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.uninstall.program"` 0; 
                    MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.uninstall.userCfg"` 0; 
                }
    }
    else
    {
        if($program && $localExists)
        {
                MGP_DeleteFolder_Ex ($folderInScriptEditor+"MGPicker_Program") uninstallMGPicker_ProgressBar "" 0 0;
                
                //delete all files inside root dir:
            string $subFolders[]=`getFileList -fld $folderInScriptEditor`;
            for($each in $subFolders)
            {
                if(`filetest -f ($folderInScriptEditor+$each)`)
                {
                    sysFile -del ($folderInScriptEditor+$each);
                }
            }
        MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.uninstall.program"` 0; 
        }
        if($config  && $localExists)
        {
                MGP_DeleteFolder_Ex ($folderInScriptEditor+"MGPicker_UserConfig") uninstallMGPicker_ProgressBar "" 0 0;
        MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.uninstall.userCfg"` 0; 
        }
    }    
    //user data
    if($data)
    {
            MGP_DeleteFolder_Ex `MGP_getPkrDataDirectory` uninstallMGPicker_ProgressBar "" 0 0;
            MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.uninstall.userData"` 0; 
        }
        
    //user template
    if($template)
    {
            MGP_DeleteFolder_Ex `MGP_getPickerUserTamplateDirectory` uninstallMGPicker_ProgressBar "" 0 0;
            MGP_ScriptEditorFeedback `MGP_MultiLanguage "pkr.uninstall.userTemplates"` 0; 
        }
        
    uninstallMGPicker_doneReport;      
}
global proc MGP_UninstallOptionCC()
{
    int $program = `checkBox -q -v  uninstallMGPicker_ClearPrgramCB`;
  //int $registry = `checkBox -q -v  uninstallMGPicker_ClearRegistryCB`;
  int $config = `checkBox -q -v  uninstallMGPicker_ClearConfigCB`;
  int $data = `checkBox -q -v  uninstallMGPicker_ClearPickerDataCB`;
  int $template = `checkBox -q -v  uninstallMGPicker_ClearPickerTemplatesCB`;
  int $operation = ($program + $config + $data + $template);
  button -e -en $operation uninstallMGPicker_DoitBtn;
}
global proc MGP_UninstallWizard()
{
        global string $MGPicker_AppName;
        string $title = (`MGP_MultiLanguage "pkr.uninstall.lbl"`+" "+$MGPicker_AppName);
        if (`window -exists MGPicker_UninstallationUI`)
    {
        deleteUI MGPicker_UninstallationUI;
    }
    window -title $title  MGPicker_UninstallationUI;
    string $form = `formLayout`;
    string $cl = `columnLayout -adjustableColumn 1 -rowSpacing 3 uninstallMGPicker_OptionCL`;
        
    //test if it is locally installed:  
    int $localExists = `mgp_isLocalInstalled`;
    
    checkBox -align "left" -l `MGP_MultiLanguage "pkr.uninstallUi.program"` -cc "MGP_UninstallOptionCC" -v 1 uninstallMGPicker_ClearPrgramCB;
    
    //checkBox -align "left" -l "Earse Registry Information" -v 0 uninstallMGPicker_ClearRegistryCB;    
    checkBox -align "left" -l `MGP_MultiLanguage "pkr.uninstallUi.config"` -vis $localExists -v 0 -cc "MGP_UninstallOptionCC" uninstallMGPicker_ClearConfigCB;
    
    separator -st "in";
    checkBox -align "left" -l ("!! "+`MGP_MultiLanguage "pkr.uninstallUi.templates"`) -v 0 -cc "MGP_UninstallOptionCC" uninstallMGPicker_ClearPickerTemplatesCB;
    checkBox -align "left" -l ("!! "+`MGP_MultiLanguage "pkr.uninstallUi.data"`) -v 0 -cc "MGP_UninstallOptionCC" uninstallMGPicker_ClearPickerDataCB;
    
    text -en 0 -vis (1-$localExists) -l `MGP_MultiLanguage "pkr.uninstall.server.tip"` -align "left";
    setParent $form;
    
    string $sep = `separator -st "in" uninstallMGPicker_MidSep`;
    string $progressBar = `progressBar -vis 0 -h 15 -min 0 -max 100 -progress 0 uninstallMGPicker_ProgressBar`;
    string $btnRL = `rowLayout -nc 3 -cw3 1 100 100 -cl3 "center" "center" "center"  -adj 1 uninstallMGPicker_BtmRL`;
        text -l "";
        button -align "center" -l `MGP_MultiLanguage "pkr.cancel"` -w 100 -c "deleteUI MGPicker_UninstallationUI" uninstallMGPicker_CancelBtn;
        button -align "center" -l `MGP_MultiLanguage "pkr.uninstall"` -w 100 -c "MGP_UninstallMGPicker_doit" uninstallMGPicker_DoitBtn;
    formLayout -e  
                -af $cl "top" 10
                -af $cl "left" 10
                -af $cl "right" 10
                -ac $cl "bottom" 10 $sep
                
                -af $sep "left" 5
                -af $sep "right" 5
                -ac $sep "bottom" 5 $btnRL
                
                -af $progressBar "left" 5
                -af $progressBar "right" 5
                -ac $progressBar "bottom" 5 $btnRL
                
                -af $btnRL "left" 5
                -af $btnRL "right" 5
                -af $btnRL "bottom" 5
             $form;
    showWindow MGPicker_UninstallationUI;
     //window -q -wh MGPicker_UninstallationUI;   
    window -e -wh 450 200 MGPicker_UninstallationUI;  
    
    //eval the done report string before the plugin been unloaded:
    global string $MGPicker_UninstallDone_Rep;
    $MGPicker_UninstallDone_Rep = `MGP_MultiLanguage "pkr.uninstall.done"`; 
}
global proc string[] MGP_GetControlsToGrabKey()
//get the widget that will be installed eventfilter.
{
    string $result[];
    clear $result;
    $result[size($result)] = "MGPicker_NamespaceTF";  //this have to be installed eventfilter because it absorbs keypress event.
    global string $MGPicker_FrameFormLayout;
    $result[size($result)] = $MGPicker_FrameFormLayout; 
    return $result;
}
global proc MGP_ToggleStayOnTop()
{
    global string $MGPicker_Config_StayOnTop;
    int $stayOnTop = `MGPicker -q -config $MGPicker_Config_StayOnTop ""`;
    $stayOnTop = 1-$stayOnTop;
    MGPicker -e -config $MGPicker_Config_StayOnTop  $stayOnTop;
}
global proc string MGP_getWindowName()
{
    global string $MGPicker_DockControlName;
    if(`mgp_isMaya2017OrLater`)
    {
        return $MGPicker_DockControlName;
    }    
    if(!`exists "MGDockControl"`)
    {
        return "";
    }
    if(`MGDockControl -q -ex $MGPicker_DockControlName`)
    {
        return $MGPicker_DockControlName;
    }
    global string $MGPicker_WindowName;
    return $MGPicker_WindowName;
}


global proc MGP_InitUiMode(int $mode)
{
    global string $MGPicker_DockControlName;
    global string $MGPicker_Config_UiMode;
    int $ver2017OrLater = `mgp_isMaya2017OrLater`;
    if($ver2017OrLater && `optionVar -ex $MGPicker_Config_UiMode`)
    {
        $mode = `optionVar -q $MGPicker_Config_UiMode`;
    }
    if($mode)
    {
        MGP_switchToAnimatorMode;
        global string $MGPicker_Config_AutoloadScenePkrID;
        string $config = `MGPicker -q -config $MGPicker_Config_AutoloadScenePkrID ""`;
        int $autoloadSceneNode = $config;
        //return;
        MGP_ReadAllPickerFromSceneAndUpdateMenu $autoloadSceneNode; 
        //refresh;   
        MGP_ReadOtherPickerFromSceneAndUpdateMenu $autoloadSceneNode;
    }
    else
    {
        MGP_UpdateAvailablePickerMenu;
        //mgp_applyUISizePosViaInfoString 0;
        //evalDeferred "MGP_ensurePanelAreShownForDesignerMode";
    }
    mgp_updateWindowIcon $mode;
}

// -------------- for maya 2017 ----------------------------------------------
global proc MPG_UiContent()
{
    global string $MGPicker_AppName;
    global string $MGPicker_ControlName;
    global string $MGPicker_WindowName; 
    //global string $MGPicker_RestoreButton;        
    if(!`exists MGPicker`)
    {
        MGP_LoadUnloadPlugin 1;
    }
    int $ver2017OrLater = `mgp_isMaya2017OrLater`;
    global string $MGPicker_FrameFormLayout;
    string $frameL = `formLayout $MGPicker_FrameFormLayout`;
        /*
        iconTextButton 
                -i `mgp_icon "PickerMinimizedIcon_h.bmp"` 
                -vis 0  
            -c "MGP_restoreUIFromMinimizedMode" $MGPicker_RestoreButton;
        */
        string $ann = `MGP_MultiLanguage "pkr.minimize.ann"`;
        string $mainLayout = `formLayout MGPicker_mainFormLayout`;  
            string $rowLay = `rowLayout -vis 0 -nc 4 -cw2 18 1 -h 24 -adj 2 MGPicker_TopRowLay`;
            
            string $icon = `mgp_icon "Picker_MonoIcon_small.png"`;
            string $hicon = `mgp_icon "Picker_MonoIcon_small_h.png"`;
            /*string $minimizeBtn = "";
            string $sep = "";
            
            if(!$ver2017OrLater)
            {
                $minimizeBtn = `iconTextButton -w 22 -h 22 
                                        -i $icon -hi $hicon
                                        -c "MGP_toggleMinimize"
                                        -ann $ann
                                        MGPicker_minimizeBtn`;
            
                
                
                
                $sep = `separator -st "in" -hr 0 -w 3 -h 20`;
            }
            */
            //string $rc = `iconTextRadioCollection`;
            
            $ann = `MGP_MultiLanguage "pkr.previewMode.ann"`;    
            $icon = `mgp_icon "testMode_btn_small.png"`;
            $hicon = `mgp_icon "testMode_btn_small_h.png"`;  
            iconTextButton -w 22 -h 22  
                        -i  $hicon 
                        -c "MGP_switchSimpleMode 0"  
                        -ann $ann
                        MGP_PreviewModeBtn;
        
            /*
            $icon = `mgp_icon "moreIcon_small.png"`;
            $hicon = `mgp_icon "moreIcon_small_h.png"`;
            string $moreBtn = `iconTextButton -w 22 -h 22 -i $icon -hi $hicon`;
            */
            string $innerForm = `formLayout -w 93 MGP_topRigthFormLay`;
                //string $sep1 = `separator -st "in" -hr 0 -w 3 -h 20`;
                
                $icon = `mgp_icon "edit_Btn_small.png"`;
                    $hicon = `mgp_icon "edit_Btn_small_h.png"`;  
                    $ann = `MGP_MultiLanguage "pkr.simpleEditMode.ann"`;     
                    iconTextButton -w 22 -h 22  
                            -i  $icon -c "MGP_switchSimpleMode 1" 
                            -ann $ann
                            MGP_SimpleEditModeBtn;       
  
                        global string $MGPicker_SimpleEdit_FillColor_Btn;  
                        global string $MGPicker_SimpleEdit_LabelColor_Btn;  
                        
                            $ann = `MGP_MultiLanguage "pkr.fillColor.ann"`; 
                    string $filColBtn = `button -l "" 
                                                                        -w 12 -h 18  -vis 0
                                                                        -c "MGPicker -e -popupColorEdit 0" 
                                                                        -ann $ann
                                                                        $MGPicker_SimpleEdit_FillColor_Btn`;
                                                                        
                            $ann = `MGP_MultiLanguage "pkr.lblColor.ann"`; 
                    string $labelColBtn = `button -l "" -w 12 -h 18 
                                                                        -c "MGPicker -e -popupColorEdit 1"  -vis 0
                                                                        -ann $ann
                                                                        $MGPicker_SimpleEdit_LabelColor_Btn`;
                            
                    $ann = `MGP_MultiLanguage "pkr.nsField.ann"`;                                                   
                textField -ed 0 -ann $ann -w 4 MGPicker_NamespaceTF;
                
                $ann = `MGP_MultiLanguage "pkr.popNamespaceEdit.lbl"`;
                $icon = `mgp_icon "editNS_Btn.png"`;
                    $hicon = `mgp_icon "editNS_Btn_h.png"`;
                string $editNSBtn = `iconTextButton -w 22 -h 22 
                                                            -i $icon -hi $hicon 
                                                            -ann $ann 
                                                            -c "MGPicker -e -popupNamespace"
                                                            MGP_EditNamespaceBtn`; 
                
                $ann = `MGP_MultiLanguage "pkr.findAndLoad.ann"`;
                $icon = `mgp_icon "findLoad_Btn.png"`;
                    $hicon = `mgp_icon "findLoad_Btn_h.png"`;
                string $findLoadBtn = `iconTextButton -w 22 -h 22 
                                                            -i $icon -hi $hicon 
                                                            -ann $ann
                                                            -c "MGP_FindAndLoadPicker"
                                                            MGP_FindLoadBtn`;  
                
                                                            
                $ann = `MGP_MultiLanguage "pkr.more.ann"`;
                $icon = `mgp_icon "moreIcon_small.png"`;
                    $hicon = `mgp_icon "moreIcon_small_h.png"`;
                string $getBtn = `iconTextButton -w 22 -h 22 
                                                            -i $icon -hi $hicon 
                                                            -ann $ann
                                                            MGP_MoreFeatureBtn`;  
                popupMenu -b 1;    
                    $lbl = `MGP_MultiLanguage "pkr.loadAll.menu"`;
                    menuItem -l $lbl -sm 1 MGP_LoadAllPickersMenu;
                    MGP_RefreshAndReloadAllLoaderMenu;
                    setParent -m ..;
                    menuItem -d 1;
                                                    
                    $lbl = `MGP_MultiLanguage "pkr.findAndLoad.lbl"`;
                        $ann = `MGP_MultiLanguage "pkr.findAndLoad.ann"`;
                    menuItem -l $lbl  -ann $ann  -c "MGP_FindAndLoadPicker" MGP_More_FindLoad_MI;
                    
                    $lbl = `MGP_MultiLanguage "pkr.openPicker.mi"`;
                        $ann = `MGP_MultiLanguage "pkr.openPicker.ann"`;
                            menuItem -l $lbl -ann $ann -c "MGPicker -e -openPicker" MGP_More_OpenPicker_MI;                         
                    
                    $lbl = `MGP_MultiLanguage "pkr.loadAllPickerNodes.lbl"`;
                        $ann = `MGP_MultiLanguage "pkr.loadAllPickerNodes.ann"`;
                    menuItem -l $lbl  -ann $ann -c "MGP_ReadAllPickerFromSceneAndUpdateMenu 1;refresh;MGP_ReadOtherPickerFromSceneAndUpdateMenu 1;" MGP_More_LoadAllPickers_MI;
                    
                    $lbl = `MGP_MultiLanguage "pkr.loadSelectedPickerNode.lbl"`;
                        $ann = `MGP_MultiLanguage "pkr.loadSelectedPickerNode.lbl"`;
                        menuItem -l $lbl  -ann $ann -c "MGP_ReadSelectedPickerFromScene" MGP_More_LoadSelectedPiciker_MI;
                            
                    $lbl = `MGP_MultiLanguage "pkr.closeAll.lbl"`;
                        $ann = `MGP_MultiLanguage "pkr.closeAll.ann"`;
                    menuItem -l $lbl  -ann $ann -c "MGPicker -e -closeAll 0" MGP_More_CloseAll_MI;
                    menuItem -d 1;
                    
                    $lbl = `MGP_MultiLanguage "pkr.createTempPicker.lbl"`;
                    $ann = `MGP_MultiLanguage "pkr.createTempPicker.ann"`;
                    menuItem -l $lbl  -ann $ann -c "MGPicker -e -createTempPicker" MGP_More_CreateTemp_MI;
                    menuItem -d 1;
                    
                    $lbl = `MGP_MultiLanguage "pkr.new.selHelper.lbl"`;
                    $ann = `MGP_MultiLanguage "pkr.new.selHelper.ann"`;
                    menuItem -l $lbl  -ann $ann -c "MGPicker -e -selectionHelper" MGP_More_SelectionHelper_MI;
                    menuItem -d 1;
                    
                    $lbl = `MGP_MultiLanguage "pkr.searchAttr.mi"`;
                        $ann = `MGP_MultiLanguage "pkr.searchAttr.ann"`;
                    menuItem -l $lbl  -ann $ann -c "MGPicker -e -searchUi 1" MGP_SearchUI_MI;
                    menuItem -d 1;
                    
                    
                    
                    $lbl = `MGP_MultiLanguage "pkr.setCurrentProj.mi"`;
                    $ann = `MGP_MultiLanguage "pkr.setCurrentProj.ann"`;
                    menuItem -l $lbl -ann $ann -c "MGP_SetPickerProject" MGP_More_SetProj_MI;
                    menuItem -d 1;
                            
                    $lbl = `MGP_MultiLanguage "pkr.popNamespaceEdit.lbl"`;
                        $ann = `MGP_MultiLanguage "pkr.popNamespaceEdit.ann"`;
                    menuItem -l $lbl  -ann $ann -c "MGPicker -e -popupNamespace" MGP_More_PopNS_MI;
                    
                    menuItem -d 1;                  
                                        
                  $lbl = `MGP_MultiLanguage "pkr.pref.dot"`;
                    $ann = `MGP_MultiLanguage "pkr.pref.dot.ann"`;
                  menuItem -l $lbl -ann $ann -c "MGP_ConfigWindowForAnimator"  MGP_More_Config_MI;
                    menuItem -d 1;            
                    $lbl = `MGP_MultiLanguage "pkr.option.stayOnTop.mi"`;
                    $ann = `MGP_MultiLanguage "pkr.option.stayOnTop.mi.ann"`;
                    menuItem -l $lbl -ann $ann -c "MGP_ToggleStayOnTop" MGP_More_StayOnTop_MI;
                    
                    menuItem -d 1;    
                              $lbl = `MGP_MultiLanguage "pkr.switchToDesigner.lbl"`;
                                $ann = `MGP_MultiLanguage "pkr.switchToDesignerMode.ann"`;
                              menuItem -l $lbl -ann $ann -c "MGP_switchToDesignerMode" MGP_More_SwitchToDesigner_MI;    
                            
                    menuItem -d 1;
                    $lbl = `MGP_MultiLanguage "pkr.hotkeyOutliner.mi"`;
                        $ann = `MGP_MultiLanguage "pkr.hotkeyOutliner.ann"`;
                    menuItem -l $lbl  -ann $ann -c "MGPicker -e -hotkeyOutliner" MGP_HotkeyEditor_MI;
                    
                    menuItem -d 1;
                    $lbl = `MGP_MultiLanguage "pkr.aboutCpicker.lbl"`;
                        $ann = `MGP_MultiLanguage "pkr.aboutCpicker.ann"`;  
                    menuItem -l $lbl -ann $ann -c "MGPicker -e -aboutCurrentPicker" MGP_More_AboutCurrentPicker_MI;
                    
                    $lbl = `MGP_MultiLanguage "pkr.About.lbl"`;
                    menuItem -l $lbl  -ann $lbl -c "MGPicker -e -about" MGP_More_About_MI;
                    
                    $lbl = `MGP_MultiLanguage "pkr.Help.lbl"`;
                        $ann = `MGP_MultiLanguage "pkr.Help.ann"`;  
                    menuItem -l $lbl -c "MGP_LoadHelp 2" -ann $ann MGP_More_Help_MI;
                
                
                    /*
                $icon = `mgp_icon "refreshIcon_small.png"`;
                $hicon = `mgp_icon "refreshIcon_small_h.png"`;
                string $refreshBtn = `iconTextButton -w 22 -h 22 -i $icon -hi $hicon -c "MGP_ReadAllPickerFromSceneAndUpdateMenu"`;
                
                $icon = `mgp_icon "helpIcon_small.png"`;
                $hicon = `mgp_icon "helpIcon_small_h.png"`;
                string $helpBtn = `iconTextButton -w 22 -h 22 -i $icon -hi $hicon`;
                */
                formLayout -e
                        -af MGP_SimpleEditModeBtn "top" 0
                        -af MGP_SimpleEditModeBtn "left" 0
                        
                        -ac $filColBtn "left" 1 MGP_SimpleEditModeBtn
                        -af $filColBtn "top" 2 
                        
                        -ac $labelColBtn  "left" 1 $filColBtn
                        -af $labelColBtn  "top" 2 
                        
                        -ac MGPicker_NamespaceTF  "left" 1 $labelColBtn
                        -ac MGPicker_NamespaceTF  "right" 0 $editNSBtn
                        -af MGPicker_NamespaceTF  "top" 1
                        
                        -ac $editNSBtn  "right" 0 $findLoadBtn
                        -af $editNSBtn  "top" 0
                        
                        -ac $findLoadBtn  "right" 0 $getBtn
                        -af $findLoadBtn  "top" 0
                        
                        -af $getBtn "top" 0 
                        -af $getBtn "right" 0 
                        $innerForm;
            setParent $mainLayout;
            string $p = `formLayout -w 60 MGPicker_PickerLayout`;
                    
            global int $MGPKR_OStype;
            int $mayaV = `mgp_getMayaVersionNumForPlugin`;
            MGPicker $MGPicker_ControlName;
            
            // for the visibility trick below, maybe it does not matter since we hide the MGPicker widget before
            // we add it to parent layout widget.
            // but we keep the code in case it still helps:
            if($MGPKR_OStype==1)
            {
                if($mayaV<2015)
                {
                    MGPicker -vis 1 $MGPicker_ControlName;  
                }
                else    //2015, 2016
                {
                    int $dock = `mgp_wasDocking`;
                    if($dock)
                    {
                        //MGPicker $MGPicker_ControlName;
                        evalDeferred ("MGPicker -e -vis 1 \""+$MGPicker_ControlName+"\"");
                    }
                    else
                    {
                        MGPicker -vis 1 $MGPicker_ControlName;
                    }
                }
            }
            else
            {
            		evalDeferred ("MGPicker -e -vis 1 \""+$MGPicker_ControlName+"\"");
                //MGPicker $MGPicker_ControlName; 
            }
            formLayout -e 
                -af $MGPicker_ControlName "top" 0
                -af $MGPicker_ControlName "left" 0
                -af $MGPicker_ControlName "right" 0
                -af $MGPicker_ControlName "bottom" 0
                $p;
        
        formLayout -e 
              -af $rowLay "top" 0
              -af $rowLay "left" 0
              -af $rowLay "right" 0
              
              -ac $p "top" 1 $rowLay
              -af $p "left" 0
              -af $p "right" 0
              -af $p "bottom" 0
              $mainLayout;
        //setParent $p;
    formLayout -e 
        //-af $MGPicker_RestoreButton "top" 0
        //-af $MGPicker_RestoreButton "left" 0
        
        -af $mainLayout "top" 0 //$MGPicker_RestoreButton        
        -af $mainLayout "left" 0
        -af $mainLayout "right" 0
        -af $mainLayout "bottom" 0
        $frameL;
    //mgp_applyUISizePosViaInfoString 0;
    //init the searching order.
    mgp_initSearchingOrder; 
    
  MGP_retranslateUi;
  if($ver2017OrLater)
  {
    evalDeferred ("MGP_InitUiMode 1"); //This 1 is default init ui mode, if it is in optionvar, it will use value in optionvar.
  }
  
}
    
global proc MGP_FloatingChangeCommand()
{
    global string $MGPicker_DockControlName;
    
    if(!`exists "MGDockControl"`)
    {
        return;
    }
    if(!`MGDockControl -q -ex $MGPicker_DockControlName`)
    {
        return;
    }
    global string $MGPicker_Config_Docking;
    optionVar -iv $MGPicker_Config_Docking (1-`MGDockControl -q -floating $MGPicker_DockControlName`);
    global string $MGPicker_Config_DockArea;
    optionVar -sv $MGPicker_Config_DockArea `MGDockControl -q -area $MGPicker_DockControlName`;
}
global proc mgp_refreshUi()
{
    evalDeferred "refresh -f";
}
proc mgp_cleanUpAutoloadingForMaya2017Later()
{
    global string $MGPIcker_AutoloadingCleaned_Maya2017;
    if(!`optionVar -ex $MGPIcker_AutoloadingCleaned_Maya2017` || !`optionVar -q $MGPIcker_AutoloadingCleaned_Maya2017`)
    {
        MGP_BuildUserSetupAutoloading 0 0;
    }
    optionVar -iv $MGPIcker_AutoloadingCleaned_Maya2017 1;
}

global proc MGP_WorkspaceUI()
{
    MPG_UiContent;  
}

global proc MG_PickerStudio(int $mode)
//$mode 0: designer mode;
//$mode 1: animator mode;
{   
    global string $MGPicker_AppName;
    global string $MGPicker_DockControlName;
    global string $MGPicker_ControlName;
    global string $MGPicker_WindowName; 
    //global string $MGPicker_RestoreButton;
    MGP_LoadUnloadPlugin 1;
    
    if(`mgp_isMaya2017OrLater`)
    {
        string $uiScript = `mgp_getLoaderMelSourceCode`+"MGP_WorkspaceUI;";
        if(`workspaceControl -q -ex $MGPicker_DockControlName`)
        {
            workspaceControl -e -vis 1 -raise $MGPicker_DockControlName;
            if(catchQuiet (`workspaceControl -e -restore $MGPicker_DockControlName`))
            {
                print "\n";
            }
            // -ui $uiScript better not be here for editing since that will crash maya.      
        
            int $oldMode = `mgp_getPickerDesignerOrAnimatorMode`;
            if($oldMode != $mode)
            {
                MGP_switchBetweenDesignerAnimatorMode_doit $mode;
            }
        }  
        else
        {
            global string $MGPicker_Config_UiMode;
            optionVar -iv $MGPicker_Config_UiMode $mode;
            // Specify -requiredPlugin will issue syntax error.
            //string $pluginFile = `mgp_returnPluginFilePath "MGPicker"`;
            
            global int $MGPicker_AvoidSourceAgain;
            $MGPicker_AvoidSourceAgain = 1;
            workspaceControl -ui $uiScript 
                         -label `mgp_getInitWindowTitle` 
                         -minimumWidth 140
                         //-requiredPlugin  $pluginFile 
                         //-checksPlugins 1
                         -loadImmediately 1
                         $MGPicker_DockControlName;
            mgp_cleanUpAutoloadingForMaya2017Later;
        }
        mgp_refreshUi;
        return;
    }
    
    copyNetworkDllForWindowsIn2011;
    
    if(!`exists "MGDockControl"`)
    {
        error "Old MG-Picker Studio plugin currently loaded!";
        return;
    }
    if(`MGDockControl -q -ex $MGPicker_DockControlName`)
    {
        MGDockControl -e -raise -vis 1 $MGPicker_DockControlName;
        /*
        int $iconfied = `window -q -iconify $MGPicker_WindowName`;
        if($iconfied)
        {
            window -e -iconify 0 $MGPicker_WindowName;
        }*/
        //int $infoInConfig[] = `mgp_readUISizePosInfoString $mode`;
        /*
        int $minimized = `MGP_isMinimized`;
        if($minimized)
        {
            MGP_toggleMinimize;
        } */
        int $oldMode = `mgp_getPickerDesignerOrAnimatorMode`;
        if($oldMode != $mode)
        {
            if($mode)
            {
                MGP_switchBetweenDesignerAnimatorMode_doit 1;
            }
            else 
            {
                MGP_switchBetweenDesignerAnimatorMode_doit 0;
            }   
            //mgp_applyUISizePosViaInfoString_doit $infoInConfig;       
        }
        return ;//deleteUI $MGPicker_WindowName;
    }
    string $title = `mgp_getInitWindowTitle`;
    if(`window -q -ex $MGPicker_WindowName`)
    {
        deleteUI $MGPicker_WindowName;
    }
    
    string $window = `window -title $title
           -iconName $MGPicker_AppName
           $MGPicker_WindowName`;
    MPG_UiContent;
    //showWindow $window;
    //window -q -wh  $MGPicker_WindowName;
    //window -e -wh 900 500 $MGPicker_WindowName;
    //mgp_init_setPickerProjName;
    
    //init the minimized toggle hotkey:
    //mgp_initMinimieToggleHotkey; 
    

    int $docking = `mgp_wasDocking`;;
    string $dockArea = "left";
    global string $MGPicker_Config_DockArea;
    if(`optionVar -ex $MGPicker_Config_DockArea`)
    {
        $dockArea = `optionVar -q $MGPicker_Config_DockArea`;
        if($dockArea != "left" && $dockArea != "right" && $dockArea != "top" && $dockArea != "bottom")
        {
            $dockArea = "left";
        }
    }   
    if($docking)
    {
        MGDockControl 
            -area $dockArea
            -label `mgp_getInitWindowTitle` 
            -content $MGPicker_WindowName 
            -allowedArea "left"
            -allowedArea "right"
            -floatChangeCommand "MGP_FloatingChangeCommand"
            -vis 1
            $MGPicker_DockControlName;
    }
    else
    {
        MGDockControl 
            -floating 1
            -label `mgp_getInitWindowTitle` 
            -content $MGPicker_WindowName 
            -allowedArea "left"
            -allowedArea "right"
            -floatChangeCommand "MGP_FloatingChangeCommand"
            -vis 1
            $MGPicker_DockControlName;
    }
    MGP_InitUiMode $mode;
}

//translation -------------------------------------------
global proc MGP_retranslateUi()
{
    int $ver2017OrLater = `mgp_isMaya2017OrLater`;   
    //translate the app name first:
    global string $MGPicker_AppName;
    $MGPicker_AppName = `MGP_MultiLanguage "pkr.app"`;
    
    //translate window title:
    evalDeferred "MGP_updateWindowTitleInMel";
    
    //3d model panel--------------------------------------
    if(`optionMenu -q -ex MGPicker_3DModelView_camOM`)
    {
        string $camLbl = `MGP_MultiLanguage "pkr.Cam"`;
        optionMenu -e -l $camLbl MGPicker_3DModelView_camOM;
        string $ann = `MGP_MultiLanguage "pkr.texture.ann"`;                
      iconTextButton -e -ann $ann MGP_ShowTex_ITCB;
      $ann = `MGP_MultiLanguage "pkr.fieldChart.ann"`;
      iconTextButton -e -ann $ann MGP_WireOnShaded_ITCB; 
      string $text = `MGP_MultiLanguage "pkr.isolateSelRig.lbl"`;
      menuItem -e -l $text MGP_IsolateRig_MI;
      $text = `MGP_MultiLanguage "pkr.isolateSelObj.lbl"`;
      menuItem -e  -l $text MGP_IsolateObj_MI;
      $text = `MGP_MultiLanguage "pkr.isolateCancel.lbl"`;
      menuItem -e  -l $text MGP_IsolateCancel_MI;
  }
  if(`menuItem -q -ex MGP_UpdateStyleMenuMI`)
  {
    menuItem -e -l `MGP_MultiLanguage "pkr.updateMenu.lbl"`  MGP_UpdateStyleMenuMI;
  }
  if(`menuItem -q -ex MGP_UpdateCameraMenuMI`)
  {
    menuItem -e -l `MGP_MultiLanguage "pkr.updateMenu.lbl"`  MGP_UpdateCameraMenuMI;
  }
        
    //main UI-----------------------------------------------------------
    //global string $MGPicker_RestoreButton;
    if(`menuItem -q -ex MGPicker_UpdateMenuMI`)
    {
        menuItem -e -l `MGP_MultiLanguage "pkr.updateMenu.lbl"` 
                -ann `MGP_MultiLanguage "pkr.updateMenu.ann"`   
                MGPicker_UpdateMenuMI;
    }
    
    if(`iconTextButton -q -ex MGP_PreviewModeBtn`)
    {                   
        //string $ann = `MGP_MultiLanguage "pkr.restore.ann"`;
        //iconTextButton -e -ann $ann $MGPicker_RestoreButton;
        
        $ann = `MGP_MultiLanguage "pkr.previewMode.ann"`;     
        iconTextButton -e -ann $ann MGP_PreviewModeBtn;
    
        $ann = `MGP_MultiLanguage "pkr.simpleEditMode.ann"`;     
        iconTextButton -e -ann $ann MGP_SimpleEditModeBtn;  
        /*
        if(!$ver2017OrLater)
        {                       
          $ann = `MGP_MultiLanguage "pkr.minimize.ann"`;
            iconTextButton -e -ann $ann MGPicker_minimizeBtn;
        }*/
                
      $ann = `MGP_MultiLanguage "pkr.intoAnimatorInteractiveMode.ann"`;     
      iconTextButton -e -ann $ann   MGP_PreviewModeBtn;       
    
        $ann = `MGP_MultiLanguage "pkr.nsField.ann"`;
      textField -e -ann $ann  MGPicker_NamespaceTF; 
      
      $ann = `MGP_MultiLanguage "pkr.popNamespaceEdit.lbl"`;
    iconTextButton -e -ann $ann MGP_EditNamespaceBtn; 
    
      $ann = `MGP_MultiLanguage "pkr.findAndLoad.lbl"`;
    iconTextButton -e -ann $ann MGP_FindLoadBtn; 

      string $lbl = `MGP_MultiLanguage "pkr.loadAll.menu"`;
        menuItem -e -l $lbl MGP_LoadAllPickersMenu;
                                                            
        $ann = `MGP_MultiLanguage "pkr.more.ann"`;
      iconTextButton -e -ann $ann   MGP_MoreFeatureBtn;
      
       $lbl = `MGP_MultiLanguage "pkr.findAndLoad.lbl"`;
        $ann = `MGP_MultiLanguage "pkr.findAndLoad.ann"`;
      menuItem -e -l $lbl  -ann $ann MGP_More_FindLoad_MI;
      
      $lbl = `MGP_MultiLanguage "pkr.popNamespaceEdit.lbl"`;
        $ann = `MGP_MultiLanguage "pkr.popNamespaceEdit.ann"`;
      menuItem -e -l $lbl -ann $ann  MGP_More_PopNS_MI;
      
      $lbl = `MGP_MultiLanguage "pkr.hotkeyOutliner.mi"`;
            $ann = `MGP_MultiLanguage "pkr.hotkeyOutliner.ann"`;
        menuItem -e -l $lbl  -ann $ann MGP_HotkeyEditor_MI;
      
      $lbl = `MGP_MultiLanguage "pkr.createTempPicker.lbl"`;
        $ann = `MGP_MultiLanguage "pkr.createTempPicker.ann"`;
      menuItem -e -l $lbl -ann $ann  MGP_More_CreateTemp_MI;
      
      $lbl = `MGP_MultiLanguage "pkr.loadAllPickerNodes.lbl"`;
        $ann = `MGP_MultiLanguage "pkr.loadAllPickerNodes.ann"`;
      menuItem -e -l $lbl -ann $ann  MGP_More_LoadAllPickers_MI;
      
    $lbl = `MGP_MultiLanguage "pkr.loadSelectedPickerNode.lbl"`;
        $ann = `MGP_MultiLanguage "pkr.loadSelectedPickerNode.lbl"`;
        menuItem -e -l $lbl  -ann $ann MGP_More_LoadSelectedPiciker_MI;
                                 
    $lbl = `MGP_MultiLanguage "pkr.setCurrentProj.mi"`;
        $ann = `MGP_MultiLanguage "pkr.setCurrentProj.ann"`;
    menuItem -e -l $lbl -ann $ann MGP_More_SetProj_MI;
    
    $lbl = `MGP_MultiLanguage "pkr.option.stayOnTop.mi"`;
    $ann = `MGP_MultiLanguage "pkr.option.stayOnTop.mi.ann"`;
    menuItem -e -l $lbl -ann $ann MGP_More_StayOnTop_MI;
                    
    $lbl = `MGP_MultiLanguage "pkr.openPicker.mi"`;
        $ann = `MGP_MultiLanguage "pkr.openPicker.ann"`;
    menuItem -e -l $lbl -ann $ann MGP_More_OpenPicker_MI;
                            
      $lbl = `MGP_MultiLanguage "pkr.loadSelectedPickerNode.lbl"`;
      menuItem -e -l $lbl -ann $lbl  MGP_More_LoadSelectedPiciker_MI;    
       
      $lbl = `MGP_MultiLanguage "pkr.closeAll.lbl"`;
        $ann = `MGP_MultiLanguage "pkr.closeAll.ann"`;
      menuItem -e -l $lbl -ann $ann MGP_More_CloseAll_MI;
      
      $lbl = `MGP_MultiLanguage "pkr.switchToDesigner.lbl"`;
        $ann = `MGP_MultiLanguage "pkr.switchToDesignerMode.ann"`;
      menuItem -e -l $lbl -ann $ann MGP_More_SwitchToDesigner_MI;
      
      $lbl = `MGP_MultiLanguage "pkr.pref.dot"`;
        $ann = `MGP_MultiLanguage "pkr.pref.dot.ann"`;
      menuItem -e -l $lbl -ann $ann MGP_More_Config_MI;
      
      $lbl = `MGP_MultiLanguage "pkr.Help.lbl"`;
        $ann = `MGP_MultiLanguage "pkr.Help.ann"`;
      menuItem -e  -l $lbl -ann $ann MGP_More_Help_MI;
      
      $lbl = `MGP_MultiLanguage "pkr.About.lbl"`;
      menuItem -e  -l $lbl -ann $lbl MGP_More_About_MI;
      
    $lbl = `MGP_MultiLanguage "pkr.aboutCpicker.lbl"`;
        $ann = `MGP_MultiLanguage "pkr.aboutCpicker.ann"`;  
    menuItem -e -l $lbl -ann $ann MGP_More_AboutCurrentPicker_MI;
                    
      $lbl = `MGP_MultiLanguage "pkr.new.selHelper.lbl"`;
      $ann = `MGP_MultiLanguage "pkr.new.selHelper.ann"`;
        menuItem -e -l $lbl  -ann $ann MGP_More_SelectionHelper_MI;
        
        $lbl = `MGP_MultiLanguage "pkr.searchAttr.mi"`;
      $ann = `MGP_MultiLanguage "pkr.searchAttr.ann"`;
      menuItem -e -l $lbl  -ann $ann MGP_SearchUI_MI;
      
    $ann = `MGP_MultiLanguage "pkr.intoSimpleEdit.ann"`;
    iconTextButton -e -ann $ann MGP_SimpleEditModeBtn;  
    

    
        global string $MGPicker_SimpleEdit_FillColor_Btn;  
        global string $MGPicker_SimpleEdit_LabelColor_Btn;  
        $ann = `MGP_MultiLanguage "pkr.fillColor.ann"`; 
        button -e -ann $ann $MGPicker_SimpleEdit_FillColor_Btn;                         
        
        $ann = `MGP_MultiLanguage "pkr.lblColor.ann"`;  
        button -e -ann $ann $MGPicker_SimpleEdit_LabelColor_Btn;
    }   
        
    //config UI-----------------------------------------------------------
    if(`optionMenuGrp -q -ex MGP_Config_UILanOM`)
    {
        string $tr = `MGP_MultiLanguage "pkr.general"` ;
      frameLayout -e -l $tr MGP_Config_GeneralFL;
      optionMenuGrp -e -l `MGP_MultiLanguage "pkr.uiLanguage"` MGP_Config_UILanOM;  
      checkBoxGrp -e -l1 `MGP_MultiLanguage "pkr.shapeAntialiasing"` MGP_Config_AntiAliasingCBG;
      checkBoxGrp -e -l1 `MGP_MultiLanguage "pkr.scrollBarVisible"` MGP_Config_ScrollBarVisibleCBG;
      checkBoxGrp -e -l1 `MGP_MultiLanguage "pkr.option.stayOnTop"` MGP_Config_StayOnTopCBG;
      checkBoxGrp -e -l1 `MGP_MultiLanguage "pkr.option.showMenuTriangle"` MGP_Config_ShowMenuTriangleCBG;                      
                        
      frameLayout -e -l `MGP_MultiLanguage "pkr.animatorMode"` MGP_Config_AnimModeFL;
      checkBoxGrp -e -l `MGP_MultiLanguage "pkr.mayaSceneChanged"`
                -l1 `MGP_MultiLanguage "pkr.autoLoad.inScene"` MGP_Config_AutoLoadSceneNodeCBG;
      checkBoxGrp -e  -l1 `MGP_MultiLanguage "pkr.autoUnload.unrelated"` MGP_Config_AutoCloseUnrelatedCBG;
      intSliderGrp -e -l `MGP_MultiLanguage "pkr.link.opacity"` MGP_Config_LinkOpacityISG;
      checkBoxGrp -e -l1 `MGP_MultiLanguage "pkr.warn.modeChanged"` MGP_Config_WarnSaveIssueCBG;
      checkBoxGrp -e -l1 `MGP_MultiLanguage "pkr.reportWhenAttrNudging"` -ann `MGP_MultiLanguage "pkr.reportWhenAttrNudging.ann"` MGP_Config_DisplayWhenNudgingCBG;

      checkBoxGrp -e -l1 `MGP_MultiLanguage "pkr.option.renameTablabel"` MGP_Config_RenameTablabelCBG;
      checkBoxGrp -e -l1 `MGP_MultiLanguage "pkr.option.filterAttrButton"`
            -ann `MGP_MultiLanguage "pkr.option.filterAttrButton.ann"` MGP_Config_FilterAttrBtnCBG;

            
                  
        frameLayout -e -l `MGP_MultiLanguage "pkr.designerMode"` MGP_Config_DesignerModeFL;    
      intFieldGrp -e -label `MGP_MultiLanguage "pkr.poseBtnSize"` MGP_Config_PoseImageSizeIFG;
      intFieldGrp -e  -label `MGP_MultiLanguage "pkr.poseBtnMargin"` MGP_Config_PoseImageMarginIFG;
      intFieldGrp -e  -label `MGP_MultiLanguage "pkr.defaultPanelSize"` MGP_Config_DefaultPanelSizeIFG;          
      intSliderGrp -e -l `MGP_MultiLanguage "pkr.panelSpacing"` MGP_Config_PanelGapISG;
      intFieldGrp -e -label `MGP_MultiLanguage "pkr.selBtn.multipleSize"` MGP_Config_SelBtnSizeIFG;  
      colorSliderGrp -e -label `MGP_MultiLanguage "pkr.crosslineCol"`  MGP_Config_CrossLineCol_CSG;
      
        frameLayout -e -l `MGP_MultiLanguage "pkr.pickerProjectSettings"` MGP_Config_ProjectSettingFL; 
            optionMenuGrp -e -l `MGP_MultiLanguage "pkr.currentPickerProj"` MGP_PickerProjOMG;  
        textScrollList -e
                    -ann (`MGP_MultiLanguage "pkr.searchRule.ann"`+"\n"+`MGP_MultiLanguage "pkr.searchRule.ann1"`)
                    MGP_Config_SearchPath_TSL;    
    text -e -l `MGP_MultiLanguage "pkr.ifNoMatch"` MGP_FallbackLabl;
    button -e -l `MGP_MultiLanguage "pkr.pickerDot"` MGP_Fallback_PickerBtn;    
                
    text -e -l `MGP_MultiLanguage "pkr.genericPickerSetting"` mgp_GenericPickerTxt;
        button -e -l `MGP_MultiLanguage "pkr.add"` MGP_Config_GenericPicker_AddBtn;  
            button -e -l `MGP_MultiLanguage "pkr.del"`  MGP_Config_GenericPicker_DelBtn; 
            button -e -l `MGP_MultiLanguage "pkr.up"`  MGP_Config_GenericPicker_UpBtn;    
            button -e -l `MGP_MultiLanguage "pkr.down"`  MGP_Config_GenericPicker_DnBtn;  
        textScrollList -e
                                -ann `MGP_MultiLanguage "pkr.genericPickerSetting.ann"`
                             mgp_GenericPickerTSL;
                             
                                             
    text -e -l `MGP_MultiLanguage "pkr.searchDirs"` MGP_Config_SearchLBL; 
    //text -e -l `MGP_MultiLanguage "pkr.searchRule.ann1"` MGP_Config_SearchLBL1; 
    button -e -l `MGP_MultiLanguage "pkr.add"` MGP_Config_SearchPath_AddBtn;  
    button -e -l `MGP_MultiLanguage "pkr.del"` MGP_Config_SearchPath_DelBtn; 
    button -e -l `MGP_MultiLanguage "pkr.up"`  MGP_Config_SearchPath_UpBtn;    
    button -e -l `MGP_MultiLanguage "pkr.down"` MGP_Config_SearchPath_DnBtn;        
    frameLayout -e -l `MGP_MultiLanguage "pkr.autoloading"` MGP_Config_autoLoadFL;
    if($ver2017OrLater)
    {
        text -e -label `MGP_MultiLanguage "pkr.autoload.2017orLater"` MGP_Config_AutoLoadAnnoLbl;
    }
    else
    {
        checkBoxGrp -e -l1 `MGP_MultiLanguage "pkr.autoload.withMaya"` MGP_Config_AutoLoadMGPickerCBG;
            optionMenuGrp -e -l `MGP_MultiLanguage "pkr.autoload.in"` MGP_Config_AutoLoadMGPickerModeOM;
            menuItem -e -l `MGP_MultiLanguage "pkr.animatorMode"` MGP_Config_AutoLoadMGPickerMode_AnimatorMI;
            menuItem -e -l `MGP_MultiLanguage "pkr.designerMode"` MGP_Config_AutoLoadMGPickerMode_DesignerMI;
            radioButtonGrp -e -l `MGP_MultiLanguage "pkr.autoload.via"` MGP_Config_AutoLoadViaUsersetupMELRBG;
    }   
    frameLayout -e -l `MGP_MultiLanguage "pkr.Licence"` MGP_Config_licenseFL;
    global string $gMG_Connector_APPName;
    string $connectorTxt = `MGP_MultiLanguage_rep1 "pkr.Licence.connectorPosition.lbl" $gMG_Connector_APPName`;
    text -e -l $connectorTxt MGP_ConnectorLabl;         
    $pkLbl = `MGP_MultiLanguage "pkr.pickerDot"`;
    button -e -l $pkLbl MGP_Connector_PickerBtn;
    $resetlbl = `MGP_MultiLanguage "pkr.Licence.reset"`;
    button -e -l $resetlbl MGP_Connector_ResetBtn;
    
    global string $MGPicker_ServerConfigFolder;
    global string $gMG_ConnectorInfoServerFileName;
    $serverFile = $MGPicker_ServerConfigFolder + "/" + $gMG_ConnectorInfoServerFileName;
    $severDefinedAnn = `MGP_MultiLanguage_rep1 "pkr.Licence.connectorPosition.server.ann"   $serverFile`; 
    text -e -l $severDefinedAnn MGP_ConnectorServerAnnLbl;
    
    button -e -l (`MGP_MultiLanguage "pkr.resetCfg"`+" >") MGP_Config_ResetBtn;
    menuItem -e -l `MGP_MultiLanguage "pkr.resetCfg.general"` MGP_Config_Reset_General_MI;
    menuItem -e -l `MGP_MultiLanguage "pkr.resetCfg.animMode"` MGP_Config_Reset_Anim_MI;
    menuItem -e -l `MGP_MultiLanguage "pkr.resetCfg.designerMode"` MGP_Config_Reset_Designer_MI;
    menuItem -e -l `MGP_MultiLanguage "pkr.resetCfg.searching"` MGP_Config_Reset_Search_MI;
    menuItem -e -l `MGP_MultiLanguage "pkr.resetCfg.connector"` MGP_Config_Reset_Connector_MI;
    menuItem -e -l `MGP_MultiLanguage "pkr.resetCfg.all"` MGP_Config_Reset_All_MI;
    
    //button -e -l `MGP_MultiLanguage "pkr.resetCfg.f7"` MGP_Config_F7_Btn;
    button -e -l `MGP_MultiLanguage "pkr.close"` MGP_Config_Close_Btn;
        
        mgp_updateConfigCategories 1;
    }
    //uninstall UI-----------------------------------------------------------
    if(`checkBox -q -ex uninstallMGPicker_ClearPrgramCB`)
    {
        checkBox -e -l `MGP_MultiLanguage "pkr.uninstallUi.program"` uninstallMGPicker_ClearPrgramCB;
    checkBox -e -l `MGP_MultiLanguage "pkr.uninstallUi.config"` uninstallMGPicker_ClearConfigCB;
    checkBox -e -l `MGP_MultiLanguage "pkr.data.program"` uninstallMGPicker_ClearPickerDataCB;

    button -e -l `MGP_MultiLanguage "pkr.cancel"` uninstallMGPicker_CancelBtn;
    button -e -l `MGP_MultiLanguage "pkr.uninstall"` uninstallMGPicker_DoitBtn;
    }
}
//MG_PickerStudio;

